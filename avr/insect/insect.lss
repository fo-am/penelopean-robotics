
insect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001418  000014ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  0080011e  0080011e  000014ca  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e1e  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000387a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  0000388b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002465  00000000  00000000  000038eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007f0  00000000  00000000  00005d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000571  00000000  00000000  00006540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007ec  00000000  00000000  00006ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000942  00000000  00000000  000072a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e6c  00000000  00000000  00007be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  00009a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e1       	ldi	r30, 0x18	; 24
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 38       	cpi	r26, 0x84	; 132
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <main>
      9e:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <servo_init>:

// initial pulse times in us for servo 0, 1, 2...7 (last value 6000 is the synchro gap)
unsigned int servo_pulse[9] = {1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 6000};

void servo_init() {
  SERVO_DDR = 0xff>>(8-SERVO_NUM);                  // portb output
      a6:	87 e0       	ldi	r24, 0x07	; 7
      a8:	87 b9       	out	0x07, r24	; 7
  TCCR1B |= (1<<WGM12) | (1<<CS11);  // pwm mode 4,CTC, prescale=8
      aa:	e1 e8       	ldi	r30, 0x81	; 129
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	8a 60       	ori	r24, 0x0A	; 10
      b2:	80 83       	st	Z, r24
  TIMSK1 |= (1<<OCIE1A);             // enable T1_compareA interrupt 
      b4:	ef e6       	ldi	r30, 0x6F	; 111
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	80 81       	ld	r24, Z
      ba:	82 60       	ori	r24, 0x02	; 2
      bc:	80 83       	st	Z, r24
  TCNT1 = 65530;
      be:	8a ef       	ldi	r24, 0xFA	; 250
      c0:	9f ef       	ldi	r25, 0xFF	; 255
      c2:	90 93 85 00 	sts	0x0085, r25
      c6:	80 93 84 00 	sts	0x0084, r24
      ca:	08 95       	ret

000000cc <ISR>:
}

ISR(TIMER1_COMPA_vect) {
  static unsigned char servo_num;
  if(servo_num < SERVO_NUM) {
      cc:	20 91 1e 01 	lds	r18, 0x011E
      d0:	23 30       	cpi	r18, 0x03	; 3
      d2:	38 f4       	brcc	.+14     	; 0xe2 <ISR+0x16>
    PORTB = (1<<servo_num);          // end pulse for servo (n), start pulse for servo (n+1)  
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	01 c0       	rjmp	.+2      	; 0xdc <ISR+0x10>
      da:	88 0f       	add	r24, r24
      dc:	2a 95       	dec	r18
      de:	ea f7       	brpl	.-6      	; 0xda <ISR+0xe>
      e0:	85 b9       	out	0x05, r24	; 5
  }          
  OCR1A = servo_pulse[servo_num];        // set width of pulse
      e2:	20 91 1e 01 	lds	r18, 0x011E
      e6:	e2 2f       	mov	r30, r18
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	ee 0f       	add	r30, r30
      ec:	ff 1f       	adc	r31, r31
      ee:	e0 50       	subi	r30, 0x00	; 0
      f0:	ff 4f       	sbci	r31, 0xFF	; 255
      f2:	80 81       	ld	r24, Z
      f4:	91 81       	ldd	r25, Z+1	; 0x01
      f6:	90 93 89 00 	sts	0x0089, r25
      fa:	80 93 88 00 	sts	0x0088, r24
  servo_num++;                     // prepare next servo 
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	82 0f       	add	r24, r18
  if(servo_num > 8) servo_num = 0; // again from servo 0;
     102:	89 30       	cpi	r24, 0x09	; 9
     104:	18 f4       	brcc	.+6      	; 0x10c <ISR+0x40>
  static unsigned char servo_num;
  if(servo_num < SERVO_NUM) {
    PORTB = (1<<servo_num);          // end pulse for servo (n), start pulse for servo (n+1)  
  }          
  OCR1A = servo_pulse[servo_num];        // set width of pulse
  servo_num++;                     // prepare next servo 
     106:	80 93 1e 01 	sts	0x011E, r24
     10a:	08 95       	ret
  if(servo_num > 8) servo_num = 0; // again from servo 0;
     10c:	10 92 1e 01 	sts	0x011E, r1
}
     110:	08 95       	ret

00000112 <degrees_to_pulse>:

////////////////////////////////////////////////////////////

unsigned int degrees_to_pulse(int degrees) {
  unsigned int range = SERVO_DEG_MAX-SERVO_DEG_MIN;
  unsigned int t = ((degrees-SERVO_DEG_MIN)*FIXED)/range;
     112:	ac 01       	movw	r20, r24
     114:	46 5a       	subi	r20, 0xA6	; 166
     116:	5f 4f       	sbci	r21, 0xFF	; 255
     118:	20 e1       	ldi	r18, 0x10	; 16
     11a:	37 e2       	ldi	r19, 0x27	; 39
     11c:	42 9f       	mul	r20, r18
     11e:	c0 01       	movw	r24, r0
     120:	43 9f       	mul	r20, r19
     122:	90 0d       	add	r25, r0
     124:	52 9f       	mul	r21, r18
     126:	90 0d       	add	r25, r0
     128:	11 24       	eor	r1, r1
     12a:	64 eb       	ldi	r22, 0xB4	; 180
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodhi4>
  return (SERVO_MIN+t*(SERVO_MAX-SERVO_MIN))/FIXED;
     132:	4c ea       	ldi	r20, 0xAC	; 172
     134:	5d e0       	ldi	r21, 0x0D	; 13
     136:	64 9f       	mul	r22, r20
     138:	c0 01       	movw	r24, r0
     13a:	65 9f       	mul	r22, r21
     13c:	90 0d       	add	r25, r0
     13e:	74 9f       	mul	r23, r20
     140:	90 0d       	add	r25, r0
     142:	11 24       	eor	r1, r1
     144:	88 51       	subi	r24, 0x18	; 24
     146:	9c 4f       	sbci	r25, 0xFC	; 252
     148:	b9 01       	movw	r22, r18
     14a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodhi4>
     14e:	cb 01       	movw	r24, r22
} 
     150:	08 95       	ret

00000152 <servo_state_init>:

void servo_state_init(servo_state *state, unsigned char id) {
     152:	fc 01       	movw	r30, r24
  state->id = id;
     154:	60 83       	st	Z, r22
  state->start_degrees = 0;
     156:	12 82       	std	Z+2, r1	; 0x02
     158:	11 82       	std	Z+1, r1	; 0x01
  state->end_degrees = 0;
     15a:	14 82       	std	Z+4, r1	; 0x04
     15c:	13 82       	std	Z+3, r1	; 0x03
  state->time = 0;
     15e:	16 82       	std	Z+6, r1	; 0x06
     160:	15 82       	std	Z+5, r1	; 0x05
  state->speed = 0;
     162:	10 86       	std	Z+8, r1	; 0x08
     164:	17 82       	std	Z+7, r1	; 0x07
     166:	08 95       	ret

00000168 <servo_current_degrees>:
}

int servo_current_degrees(servo_state *state) {
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	fc 01       	movw	r30, r24
  return state->start_degrees + 
    ((signed int)state->time*(state->end_degrees-state->start_degrees)/FIXED);
     16e:	c1 81       	ldd	r28, Z+1	; 0x01
     170:	d2 81       	ldd	r29, Z+2	; 0x02
     172:	23 81       	ldd	r18, Z+3	; 0x03
     174:	34 81       	ldd	r19, Z+4	; 0x04
     176:	2c 1b       	sub	r18, r28
     178:	3d 0b       	sbc	r19, r29
     17a:	45 81       	ldd	r20, Z+5	; 0x05
     17c:	56 81       	ldd	r21, Z+6	; 0x06
     17e:	24 9f       	mul	r18, r20
     180:	c0 01       	movw	r24, r0
     182:	25 9f       	mul	r18, r21
     184:	90 0d       	add	r25, r0
     186:	34 9f       	mul	r19, r20
     188:	90 0d       	add	r25, r0
     18a:	11 24       	eor	r1, r1
     18c:	60 e1       	ldi	r22, 0x10	; 16
     18e:	77 e2       	ldi	r23, 0x27	; 39
     190:	0e 94 8f 08 	call	0x111e	; 0x111e <__divmodhi4>
}
     194:	ce 01       	movw	r24, r28
     196:	86 0f       	add	r24, r22
     198:	97 1f       	adc	r25, r23
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <servo_modify>:

// start moving (or interrupt a current move) with 
// a new target position and speed
void servo_modify(servo_state *state, int target_degrees, unsigned int speed) {
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	ec 01       	movw	r28, r24
     1ae:	7b 01       	movw	r14, r22
     1b0:	8a 01       	movw	r16, r20
  state->start_degrees = servo_current_degrees(state);
     1b2:	0e 94 b4 00 	call	0x168	; 0x168 <servo_current_degrees>
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
  state->end_degrees = target_degrees;
     1ba:	fc 82       	std	Y+4, r15	; 0x04
     1bc:	eb 82       	std	Y+3, r14	; 0x03
  state->time = 0;
     1be:	1e 82       	std	Y+6, r1	; 0x06
     1c0:	1d 82       	std	Y+5, r1	; 0x05
  state->speed = speed;
     1c2:	18 87       	std	Y+8, r17	; 0x08
     1c4:	0f 83       	std	Y+7, r16	; 0x07
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <servo_update>:

void servo_update(servo_state *state) {
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	ec 01       	movw	r28, r24
  if (state->time >= MAKE_FIXED(1.0)) {
     1de:	0d 81       	ldd	r16, Y+5	; 0x05
     1e0:	1e 81       	ldd	r17, Y+6	; 0x06
     1e2:	b8 01       	movw	r22, r16
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 16 08 	call	0x102c	; 0x102c <__floatunsisf>
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e4       	ldi	r19, 0x40	; 64
     1f0:	4c e1       	ldi	r20, 0x1C	; 28
     1f2:	56 e4       	ldi	r21, 0x46	; 70
     1f4:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__gesf2>
     1f8:	87 fd       	sbrc	r24, 7
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <servo_update+0x2e>
    state->time = MAKE_FIXED(1.0);
     1fc:	80 e1       	ldi	r24, 0x10	; 16
     1fe:	97 e2       	ldi	r25, 0x27	; 39
     200:	04 c0       	rjmp	.+8      	; 0x20a <servo_update+0x36>
  } else {
    state->time += state->speed;
     202:	8f 81       	ldd	r24, Y+7	; 0x07
     204:	98 85       	ldd	r25, Y+8	; 0x08
     206:	80 0f       	add	r24, r16
     208:	91 1f       	adc	r25, r17
     20a:	9e 83       	std	Y+6, r25	; 0x06
     20c:	8d 83       	std	Y+5, r24	; 0x05
  }
  
  servo_pulse[state->id] = 
    degrees_to_pulse(servo_current_degrees(state));
     20e:	ce 01       	movw	r24, r28
     210:	0e 94 b4 00 	call	0x168	; 0x168 <servo_current_degrees>
     214:	0e 94 89 00 	call	0x112	; 0x112 <degrees_to_pulse>
    state->time = MAKE_FIXED(1.0);
  } else {
    state->time += state->speed;
  }
  
  servo_pulse[state->id] = 
     218:	e8 81       	ld	r30, Y
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	e0 50       	subi	r30, 0x00	; 0
     222:	ff 4f       	sbci	r31, 0xFF	; 255
     224:	91 83       	std	Z+1, r25	; 0x01
     226:	80 83       	st	Z, r24
    degrees_to_pulse(servo_current_degrees(state));
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	08 95       	ret

00000232 <servo_motion_seq_init>:

void servo_motion_seq_init(unsigned char id, servo_motion_seq* seq, unsigned int length) {
     232:	fb 01       	movw	r30, r22
     234:	db 01       	movw	r26, r22
     236:	9b 01       	movw	r18, r22
     238:	24 0f       	add	r18, r20
     23a:	35 1f       	adc	r19, r21
  unsigned int i;
  for (i=0; i<length; i++) {
    seq->pattern[i]='0';
     23c:	90 e3       	ldi	r25, 0x30	; 48
    degrees_to_pulse(servo_current_degrees(state));
}

void servo_motion_seq_init(unsigned char id, servo_motion_seq* seq, unsigned int length) {
  unsigned int i;
  for (i=0; i<length; i++) {
     23e:	a2 17       	cp	r26, r18
     240:	b3 07       	cpc	r27, r19
     242:	11 f0       	breq	.+4      	; 0x248 <servo_motion_seq_init+0x16>
    seq->pattern[i]='0';
     244:	9d 93       	st	X+, r25
     246:	fb cf       	rjmp	.-10     	; 0x23e <servo_motion_seq_init+0xc>
  }
  seq->length = length;
     248:	53 87       	std	Z+11, r21	; 0x0b
     24a:	42 87       	std	Z+10, r20	; 0x0a
  seq->position = 0;
     24c:	15 86       	std	Z+13, r1	; 0x0d
     24e:	14 86       	std	Z+12, r1	; 0x0c
  seq->timer = 0;
     250:	11 8a       	std	Z+17, r1	; 0x11
     252:	10 8a       	std	Z+16, r1	; 0x10
  seq->speed = MAKE_FIXED(1.0);
     254:	20 e1       	ldi	r18, 0x10	; 16
     256:	37 e2       	ldi	r19, 0x27	; 39
     258:	37 87       	std	Z+15, r19	; 0x0f
     25a:	26 87       	std	Z+14, r18	; 0x0e
  unsigned int t = ((degrees-SERVO_DEG_MIN)*FIXED)/range;
  return (SERVO_MIN+t*(SERVO_MAX-SERVO_MIN))/FIXED;
} 

void servo_state_init(servo_state *state, unsigned char id) {
  state->id = id;
     25c:	82 8b       	std	Z+18, r24	; 0x12
  state->start_degrees = 0;
     25e:	14 8a       	std	Z+20, r1	; 0x14
     260:	13 8a       	std	Z+19, r1	; 0x13
  state->end_degrees = 0;
     262:	16 8a       	std	Z+22, r1	; 0x16
     264:	15 8a       	std	Z+21, r1	; 0x15
  state->time = 0;
     266:	10 8e       	std	Z+24, r1	; 0x18
     268:	17 8a       	std	Z+23, r1	; 0x17
  state->speed = 0;
     26a:	12 8e       	std	Z+26, r1	; 0x1a
     26c:	11 8e       	std	Z+25, r1	; 0x19
     26e:	08 95       	ret

00000270 <servo_motion_seq_pattern>:
  seq->timer = 0;
  seq->speed = MAKE_FIXED(1.0);
  servo_state_init(&seq->servo, id);
}

void servo_motion_seq_pattern(servo_motion_seq* seq, unsigned char *pattern) {
     270:	fc 01       	movw	r30, r24
     272:	22 85       	ldd	r18, Z+10	; 0x0a
     274:	33 85       	ldd	r19, Z+11	; 0x0b
     276:	26 0f       	add	r18, r22
     278:	37 1f       	adc	r19, r23
  unsigned int i;
  for (i=0; i<seq->length; i++) {
     27a:	62 17       	cp	r22, r18
     27c:	73 07       	cpc	r23, r19
     27e:	29 f0       	breq	.+10     	; 0x28a <servo_motion_seq_pattern+0x1a>
    seq->pattern[i]=pattern[i];
     280:	db 01       	movw	r26, r22
     282:	8d 91       	ld	r24, X+
     284:	bd 01       	movw	r22, r26
     286:	81 93       	st	Z+, r24
     288:	f8 cf       	rjmp	.-16     	; 0x27a <servo_motion_seq_pattern+0xa>
  }
}
     28a:	08 95       	ret

0000028c <servo_motion_seq_update>:

void servo_motion_seq_update(servo_motion_seq* seq) {
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
  seq->timer += seq->speed;
     29e:	0e 85       	ldd	r16, Y+14	; 0x0e
     2a0:	1f 85       	ldd	r17, Y+15	; 0x0f
     2a2:	e8 88       	ldd	r14, Y+16	; 0x10
     2a4:	f9 88       	ldd	r15, Y+17	; 0x11
     2a6:	e0 0e       	add	r14, r16
     2a8:	f1 1e       	adc	r15, r17
  if (seq->timer>=MAKE_FIXED(1.0)) {
     2aa:	b7 01       	movw	r22, r14
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 16 08 	call	0x102c	; 0x102c <__floatunsisf>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e4       	ldi	r19, 0x40	; 64
     2b8:	4c e1       	ldi	r20, 0x1C	; 28
     2ba:	56 e4       	ldi	r21, 0x46	; 70
     2bc:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__gesf2>
     2c0:	9e 01       	movw	r18, r28
     2c2:	2e 5e       	subi	r18, 0xEE	; 238
     2c4:	3f 4f       	sbci	r19, 0xFF	; 255
     2c6:	69 01       	movw	r12, r18
     2c8:	87 ff       	sbrs	r24, 7
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <servo_motion_seq_update+0x46>
    seq->pattern[i]=pattern[i];
  }
}

void servo_motion_seq_update(servo_motion_seq* seq) {
  seq->timer += seq->speed;
     2cc:	f9 8a       	std	Y+17, r15	; 0x11
     2ce:	e8 8a       	std	Y+16, r14	; 0x10
     2d0:	4e c0       	rjmp	.+156    	; 0x36e <servo_motion_seq_update+0xe2>
  if (seq->timer>=MAKE_FIXED(1.0)) {
    seq->timer = 0;
     2d2:	19 8a       	std	Y+17, r1	; 0x11
     2d4:	18 8a       	std	Y+16, r1	; 0x10
    seq->position++;
     2d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     2d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	9d 87       	std	Y+13, r25	; 0x0d
     2de:	8c 87       	std	Y+12, r24	; 0x0c
    if (seq->position>=seq->length) seq->position=0;
     2e0:	2a 85       	ldd	r18, Y+10	; 0x0a
     2e2:	3b 85       	ldd	r19, Y+11	; 0x0b
     2e4:	82 17       	cp	r24, r18
     2e6:	93 07       	cpc	r25, r19
     2e8:	10 f0       	brcs	.+4      	; 0x2ee <servo_motion_seq_update+0x62>
     2ea:	1d 86       	std	Y+13, r1	; 0x0d
     2ec:	1c 86       	std	Y+12, r1	; 0x0c

    switch (seq->pattern[seq->position]) {
     2ee:	ec 85       	ldd	r30, Y+12	; 0x0c
     2f0:	fd 85       	ldd	r31, Y+13	; 0x0d
     2f2:	ec 0f       	add	r30, r28
     2f4:	fd 1f       	adc	r31, r29
     2f6:	80 81       	ld	r24, Z
     2f8:	84 34       	cpi	r24, 0x44	; 68
     2fa:	19 f1       	breq	.+70     	; 0x342 <servo_motion_seq_update+0xb6>
     2fc:	88 f4       	brcc	.+34     	; 0x320 <servo_motion_seq_update+0x94>
     2fe:	81 34       	cpi	r24, 0x41	; 65
     300:	41 f1       	breq	.+80     	; 0x352 <servo_motion_seq_update+0xc6>
     302:	30 f4       	brcc	.+12     	; 0x310 <servo_motion_seq_update+0x84>
     304:	80 33       	cpi	r24, 0x30	; 48
     306:	99 f5       	brne	.+102    	; 0x36e <servo_motion_seq_update+0xe2>
    case 'D': servo_modify(&seq->servo, 90, seq->speed); break;
    case 'C': servo_modify(&seq->servo, 68, seq->speed); break;
    case 'B': servo_modify(&seq->servo, 45, seq->speed); break;
    case 'A': servo_modify(&seq->servo, 23, seq->speed); break;
    case '0': servo_modify(&seq->servo, 0, seq->speed); break;
     308:	a8 01       	movw	r20, r16
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	2c c0       	rjmp	.+88     	; 0x368 <servo_motion_seq_update+0xdc>
  if (seq->timer>=MAKE_FIXED(1.0)) {
    seq->timer = 0;
    seq->position++;
    if (seq->position>=seq->length) seq->position=0;

    switch (seq->pattern[seq->position]) {
     310:	82 34       	cpi	r24, 0x42	; 66
     312:	d9 f0       	breq	.+54     	; 0x34a <servo_motion_seq_update+0xbe>
     314:	83 34       	cpi	r24, 0x43	; 67
     316:	59 f5       	brne	.+86     	; 0x36e <servo_motion_seq_update+0xe2>
    case 'D': servo_modify(&seq->servo, 90, seq->speed); break;
    case 'C': servo_modify(&seq->servo, 68, seq->speed); break;
     318:	a8 01       	movw	r20, r16
     31a:	64 e4       	ldi	r22, 0x44	; 68
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	24 c0       	rjmp	.+72     	; 0x368 <servo_motion_seq_update+0xdc>
  if (seq->timer>=MAKE_FIXED(1.0)) {
    seq->timer = 0;
    seq->position++;
    if (seq->position>=seq->length) seq->position=0;

    switch (seq->pattern[seq->position]) {
     320:	82 36       	cpi	r24, 0x62	; 98
     322:	d9 f0       	breq	.+54     	; 0x35a <servo_motion_seq_update+0xce>
     324:	30 f4       	brcc	.+12     	; 0x332 <servo_motion_seq_update+0xa6>
     326:	81 36       	cpi	r24, 0x61	; 97
     328:	11 f5       	brne	.+68     	; 0x36e <servo_motion_seq_update+0xe2>
    case 'D': servo_modify(&seq->servo, 90, seq->speed); break;
    case 'C': servo_modify(&seq->servo, 68, seq->speed); break;
    case 'B': servo_modify(&seq->servo, 45, seq->speed); break;
    case 'A': servo_modify(&seq->servo, 23, seq->speed); break;
    case '0': servo_modify(&seq->servo, 0, seq->speed); break;
    case 'a': servo_modify(&seq->servo, -23, seq->speed); break;
     32a:	a8 01       	movw	r20, r16
     32c:	69 ee       	ldi	r22, 0xE9	; 233
     32e:	7f ef       	ldi	r23, 0xFF	; 255
     330:	1b c0       	rjmp	.+54     	; 0x368 <servo_motion_seq_update+0xdc>
  if (seq->timer>=MAKE_FIXED(1.0)) {
    seq->timer = 0;
    seq->position++;
    if (seq->position>=seq->length) seq->position=0;

    switch (seq->pattern[seq->position]) {
     332:	83 36       	cpi	r24, 0x63	; 99
     334:	b1 f0       	breq	.+44     	; 0x362 <servo_motion_seq_update+0xd6>
     336:	84 36       	cpi	r24, 0x64	; 100
     338:	d1 f4       	brne	.+52     	; 0x36e <servo_motion_seq_update+0xe2>
    case 'A': servo_modify(&seq->servo, 23, seq->speed); break;
    case '0': servo_modify(&seq->servo, 0, seq->speed); break;
    case 'a': servo_modify(&seq->servo, -23, seq->speed); break;
    case 'b': servo_modify(&seq->servo, -45, seq->speed); break;
    case 'c': servo_modify(&seq->servo, -68, seq->speed); break;
    case 'd': servo_modify(&seq->servo, -90, seq->speed); break;
     33a:	a8 01       	movw	r20, r16
     33c:	66 ea       	ldi	r22, 0xA6	; 166
     33e:	7f ef       	ldi	r23, 0xFF	; 255
     340:	13 c0       	rjmp	.+38     	; 0x368 <servo_motion_seq_update+0xdc>
    seq->timer = 0;
    seq->position++;
    if (seq->position>=seq->length) seq->position=0;

    switch (seq->pattern[seq->position]) {
    case 'D': servo_modify(&seq->servo, 90, seq->speed); break;
     342:	a8 01       	movw	r20, r16
     344:	6a e5       	ldi	r22, 0x5A	; 90
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	0f c0       	rjmp	.+30     	; 0x368 <servo_motion_seq_update+0xdc>
    case 'C': servo_modify(&seq->servo, 68, seq->speed); break;
    case 'B': servo_modify(&seq->servo, 45, seq->speed); break;
     34a:	a8 01       	movw	r20, r16
     34c:	6d e2       	ldi	r22, 0x2D	; 45
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	0b c0       	rjmp	.+22     	; 0x368 <servo_motion_seq_update+0xdc>
    case 'A': servo_modify(&seq->servo, 23, seq->speed); break;
     352:	a8 01       	movw	r20, r16
     354:	67 e1       	ldi	r22, 0x17	; 23
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	07 c0       	rjmp	.+14     	; 0x368 <servo_motion_seq_update+0xdc>
    case '0': servo_modify(&seq->servo, 0, seq->speed); break;
    case 'a': servo_modify(&seq->servo, -23, seq->speed); break;
    case 'b': servo_modify(&seq->servo, -45, seq->speed); break;
     35a:	a8 01       	movw	r20, r16
     35c:	63 ed       	ldi	r22, 0xD3	; 211
     35e:	7f ef       	ldi	r23, 0xFF	; 255
     360:	03 c0       	rjmp	.+6      	; 0x368 <servo_motion_seq_update+0xdc>
    case 'c': servo_modify(&seq->servo, -68, seq->speed); break;
     362:	a8 01       	movw	r20, r16
     364:	6c eb       	ldi	r22, 0xBC	; 188
     366:	7f ef       	ldi	r23, 0xFF	; 255
    case 'd': servo_modify(&seq->servo, -90, seq->speed); break;
     368:	c6 01       	movw	r24, r12
     36a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <servo_modify>
    }
  }
  servo_update(&seq->servo);
     36e:	c6 01       	movw	r24, r12
}
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
    case 'b': servo_modify(&seq->servo, -45, seq->speed); break;
    case 'c': servo_modify(&seq->servo, -68, seq->speed); break;
    case 'd': servo_modify(&seq->servo, -90, seq->speed); break;
    }
  }
  servo_update(&seq->servo);
     380:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <servo_update>

00000384 <spi_init>:
//
// spi_init implementation.
//
void spi_init(byte config)
{
  if ((config >> MSTR) & 0x01)
     384:	84 ff       	sbrs	r24, 4
     386:	02 c0       	rjmp	.+4      	; 0x38c <spi_init+0x8>
    DDRB = (1 << DDB5) | (1 << DDB3) | (1 << DDB2);
     388:	9c e2       	ldi	r25, 0x2C	; 44
     38a:	01 c0       	rjmp	.+2      	; 0x38e <spi_init+0xa>
  else
    DDRB = (1 << DDB4);
     38c:	90 e1       	ldi	r25, 0x10	; 16
     38e:	94 b9       	out	0x04, r25	; 4

  SPCR = config | (1 << SPE);
     390:	98 2f       	mov	r25, r24
     392:	90 64       	ori	r25, 0x40	; 64
     394:	9c bd       	out	0x2c, r25	; 44

  if ((config >> SPIE) & 0x01)
     396:	87 ff       	sbrs	r24, 7
     398:	01 c0       	rjmp	.+2      	; 0x39c <spi_init+0x18>
    sei();
     39a:	78 94       	sei
     39c:	08 95       	ret

0000039e <spi_start>:
//
// spi_start implementation.
//
void spi_start(void)
{
  PORTB &= ~_BV(PORTB2);
     39e:	2a 98       	cbi	0x05, 2	; 5
     3a0:	08 95       	ret

000003a2 <spi_end>:
//
// spi_end implementation.
//
void spi_end(void)
{
  PORTB |= _BV(PORTB2);
     3a2:	2a 9a       	sbi	0x05, 2	; 5
     3a4:	08 95       	ret

000003a6 <spi_transfer>:
// spi_transfer implementation.
//
byte spi_transfer(byte data)
{
  // Load data into the buffer.
  SPDR = data;
     3a6:	8e bd       	out	0x2e, r24	; 46

  // Wait until transmission complete.
  while (!(SPSR & _BV(SPIF)));
     3a8:	0d b4       	in	r0, 0x2d	; 45
     3aa:	07 fe       	sbrs	r0, 7
     3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <spi_transfer+0x2>

  // Return received data.
  return SPDR;
     3ae:	8e b5       	in	r24, 0x2e	; 46
}
     3b0:	08 95       	ret

000003b2 <nRF24L01p_status_fetch>:
//
// nRF24L01p_status_fetch
//
void nRF24L01p_status_fetch(void)
{
  spi_start();
     3b2:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  nRF24L01p_status = spi_transfer(nRF24L01p_SPI_NOP);
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
     3bc:	80 93 12 01 	sts	0x0112, r24
  spi_end();
     3c0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <spi_end>

000003c4 <nRF24L01p_status_rx_ready>:
//
// nRF24L01p_status_rx_ready implementation.
//
bool nRF24L01p_status_rx_ready(void)
{
  return nRF24L01p_status & nRF24L01p_MASK_STATUS_RX_DR;
     3c4:	80 91 12 01 	lds	r24, 0x0112
}
     3c8:	86 fb       	bst	r24, 6
     3ca:	88 27       	eor	r24, r24
     3cc:	80 f9       	bld	r24, 0
     3ce:	08 95       	ret

000003d0 <nRF24L01p_status_tx_sent>:
//
// nRF24L01p_status_tx_sent implementation.
//
bool nRF24L01p_status_tx_sent(void)
{
  return nRF24L01p_status & nRF24L01p_MASK_STATUS_TX_DS;
     3d0:	80 91 12 01 	lds	r24, 0x0112
}
     3d4:	85 fb       	bst	r24, 5
     3d6:	88 27       	eor	r24, r24
     3d8:	80 f9       	bld	r24, 0
     3da:	08 95       	ret

000003dc <nRF24L01p_status_max_retries>:
//
// nRF24L01p_status_max_retries implementation.
//
bool nRF24L01p_status_max_retries(void)
{
  return nRF24L01p_status & nRF24L01p_MASK_STATUS_MAX_RT;
     3dc:	80 91 12 01 	lds	r24, 0x0112
}
     3e0:	82 95       	swap	r24
     3e2:	81 70       	andi	r24, 0x01	; 1
     3e4:	08 95       	ret

000003e6 <nRF24L01p_status_pipe_ready>:
//
// nRF24L01p_status_pipe_ready implementation.
//
byte nRF24L01p_status_pipe_ready(void)
{
  return (nRF24L01p_status & nRF24L01p_MASK_STATUS_RX_P_NO) >> 1;
     3e6:	80 91 12 01 	lds	r24, 0x0112
     3ea:	8e 70       	andi	r24, 0x0E	; 14
}
     3ec:	86 95       	lsr	r24
     3ee:	08 95       	ret

000003f0 <nRF24L01p_status_tx_full>:
//
// nRF24L01p_status_tx_full implementation.
//
bool nRF24L01p_status_tx_full(void)
{
  return nRF24L01p_status & nRF24L01p_MASK_STATUS_TX_FULL;
     3f0:	80 91 12 01 	lds	r24, 0x0112
}
     3f4:	81 70       	andi	r24, 0x01	; 1
     3f6:	08 95       	ret

000003f8 <nRF24L01p_tx_fifo_write>:

//
// nRF24L01p_tx_fifo_write implementation.
//
int nRF24L01p_tx_fifo_write(const byte *payload, byte size)
{
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	08 2f       	mov	r16, r24
     40e:	16 2f       	mov	r17, r22
  spi_start();
     410:	99 83       	std	Y+1, r25	; 0x01
     412:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_W_TX_PAYLOAD);
     416:	80 ea       	ldi	r24, 0xA0	; 160
     418:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
     41c:	f0 2e       	mov	r15, r16
  for (byte i = 0; i < size; i++)
     41e:	c0 2e       	mov	r12, r16
     420:	99 81       	ldd	r25, Y+1	; 0x01
     422:	d9 2e       	mov	r13, r25
     424:	8c 2d       	mov	r24, r12
     426:	8f 19       	sub	r24, r15
     428:	81 17       	cp	r24, r17
     42a:	30 f4       	brcc	.+12     	; 0x438 <nRF24L01p_tx_fifo_write+0x40>
    spi_transfer(*payload++);
     42c:	f6 01       	movw	r30, r12
     42e:	81 91       	ld	r24, Z+
     430:	6f 01       	movw	r12, r30
     432:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
     436:	f6 cf       	rjmp	.-20     	; 0x424 <nRF24L01p_tx_fifo_write+0x2c>
  spi_end();
     438:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <spi_end>

  return size; // TODO: catch FIFO full IRQ.
}
     43c:	81 2f       	mov	r24, r17
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	08 95       	ret

00000452 <nRF24L01p_tx_fifo_flush>:
//
// nRF24L01p_tx_fifo_flush implementation.
//
void nRF24L01p_tx_fifo_flush(void)
{
  spi_start();
     452:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_FLUSH_TX);
     456:	81 ee       	ldi	r24, 0xE1	; 225
     458:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
  spi_end();
     45c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <spi_end>

00000460 <nRF24L01p_rx_fifo_read>:

//
// nRF24L01p_rx_fifo_read implementation.
//
int nRF24L01p_rx_fifo_read(byte *payload, byte size)
{
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	1f 92       	push	r1
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	08 2f       	mov	r16, r24
     476:	16 2f       	mov	r17, r22
  spi_start();
     478:	99 83       	std	Y+1, r25	; 0x01
     47a:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_R_RX_PAYLOAD);
     47e:	81 e6       	ldi	r24, 0x61	; 97
     480:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
     484:	f0 2e       	mov	r15, r16
  for (byte i = 0; i < size; i++)
     486:	c0 2e       	mov	r12, r16
     488:	99 81       	ldd	r25, Y+1	; 0x01
     48a:	d9 2e       	mov	r13, r25
     48c:	8c 2d       	mov	r24, r12
     48e:	8f 19       	sub	r24, r15
     490:	81 17       	cp	r24, r17
     492:	38 f4       	brcc	.+14     	; 0x4a2 <nRF24L01p_rx_fifo_read+0x42>
    *payload++ = spi_transfer(nRF24L01p_SPI_NOP);
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
     49a:	f6 01       	movw	r30, r12
     49c:	81 93       	st	Z+, r24
     49e:	6f 01       	movw	r12, r30
     4a0:	f5 cf       	rjmp	.-22     	; 0x48c <nRF24L01p_rx_fifo_read+0x2c>
  spi_end();
     4a2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <spi_end>

  return size;
}
     4a6:	81 2f       	mov	r24, r17
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	08 95       	ret

000004bc <nRF24L01p_rx_fifo_flush>:
//
// nRF24L01p_rx_fifo_flush implementation.
//
void nRF24L01p_rx_fifo_flush(void)
{
  spi_start();
     4bc:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_FLUSH_RX);
     4c0:	82 ee       	ldi	r24, 0xE2	; 226
     4c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
  spi_end();
     4c6:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <spi_end>

000004ca <nRF24L01p_read_status>:
//
// nRF24L01p_read_status implementation.
//
int nRF24L01p_read_status(byte pipe)
{
  return nRF24L01p_rx_pipes[pipe].remaining == 0;
     4ca:	9e e0       	ldi	r25, 0x0E	; 14
     4cc:	89 9f       	mul	r24, r25
     4ce:	f0 01       	movw	r30, r0
     4d0:	11 24       	eor	r1, r1
     4d2:	e1 5e       	subi	r30, 0xE1	; 225
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	24 85       	ldd	r18, Z+12	; 0x0c
     4dc:	35 85       	ldd	r19, Z+13	; 0x0d
     4de:	23 2b       	or	r18, r19
     4e0:	11 f0       	breq	.+4      	; 0x4e6 <nRF24L01p_read_status+0x1c>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
}
     4e6:	08 95       	ret

000004e8 <nRF24L01p_write_status>:
//
// nRF24L01p_write_status implementation.
//
int nRF24L01p_write_status(void)
{
  return nRF24L01p_tx_pipe.remaining == 0;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	20 91 7e 01 	lds	r18, 0x017E
     4f0:	30 91 7f 01 	lds	r19, 0x017F
     4f4:	23 2b       	or	r18, r19
     4f6:	11 f0       	breq	.+4      	; 0x4fc <nRF24L01p_write_status+0x14>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
}
     4fc:	08 95       	ret

000004fe <nRF24L01p_config_pipe>:
// nRF24L01p_config_pipe implementation.
//
int nRF24L01p_config_pipe(byte pipe,
                          long long unsigned int address,
                          byte payload_width)
{
     4fe:	ef 92       	push	r14
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
  nRF24L01p_rx_pipes[pipe].address = address;
     504:	9e e0       	ldi	r25, 0x0E	; 14
     506:	89 9f       	mul	r24, r25
     508:	d0 01       	movw	r26, r0
     50a:	11 24       	eor	r1, r1
     50c:	a1 5e       	subi	r26, 0xE1	; 225
     50e:	be 4f       	sbci	r27, 0xFE	; 254
     510:	fd 01       	movw	r30, r26
     512:	31 96       	adiw	r30, 0x01	; 1
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	0c 93       	st	X, r16
     518:	11 97       	sbiw	r26, 0x01	; 1
     51a:	11 83       	std	Z+1, r17	; 0x01
     51c:	22 83       	std	Z+2, r18	; 0x02
     51e:	33 83       	std	Z+3, r19	; 0x03
     520:	44 83       	std	Z+4, r20	; 0x04
     522:	55 83       	std	Z+5, r21	; 0x05
     524:	66 83       	std	Z+6, r22	; 0x06
     526:	77 83       	std	Z+7, r23	; 0x07
  nRF24L01p_rx_pipes[pipe].payload_width = payload_width;
     528:	19 96       	adiw	r26, 0x09	; 9
     52a:	ec 92       	st	X, r14
     52c:	19 97       	sbiw	r26, 0x09	; 9
  nRF24L01p_rx_pipes[pipe].configured = TRUE;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	8c 93       	st	X, r24

  return 0;
}
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ef 90       	pop	r14
     53c:	08 95       	ret

0000053e <nRF24L01p_enable>:
// nRF24L01p_enable implementation.
//
void nRF24L01p_enable(void)
{
  // Pull CE high.
  PORTB |= _BV(PORTB1);
     53e:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <nRF24L01p_enable+0x6>
     548:	00 c0       	rjmp	.+0      	; 0x54a <nRF24L01p_enable+0xc>
     54a:	00 00       	nop
     54c:	08 95       	ret

0000054e <nRF24L01p_disable>:
// nRF24L01p_disable implementation.
//
void nRF24L01p_disable(void)
{
  // Pull CE high.
  PORTB &= ~_BV(PORTB1);
     54e:	29 98       	cbi	0x05, 1	; 5
     550:	08 95       	ret

00000552 <nRF24L01p_get_register8>:

//
// nRF24L01p_get_register8 implementation.
//
byte nRF24L01p_get_register8(byte address)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	1f 92       	push	r1
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
  spi_start();
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_R_REGISTER |
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	8f 71       	andi	r24, 0x1F	; 31
     566:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
               (address & nRF24L01p_SPI_RW_REGISTER_MASK));
  byte response = spi_transfer(nRF24L01p_SPI_NOP);
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
  spi_end();
     570:	89 83       	std	Y+1, r24	; 0x01
     572:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <spi_end>

  return response;
}
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	0f 90       	pop	r0
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <nRF24L01p_get_payload_width>:
//
// nRF24L01p_get_payload_width implementation.
//
byte nRF24L01p_get_payload_width(byte reg)
{
  if (!(reg == nRF24L01p_REGISTER_RX_PW_P0 ||
     580:	9f ee       	ldi	r25, 0xEF	; 239
     582:	98 0f       	add	r25, r24
     584:	96 30       	cpi	r25, 0x06	; 6
     586:	10 f4       	brcc	.+4      	; 0x58c <nRF24L01p_get_payload_width+0xc>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return 0;

  return nRF24L01p_get_register8(reg);
     588:	0c 94 a9 02 	jmp	0x552	; 0x552 <nRF24L01p_get_register8>
}
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	08 95       	ret

00000590 <nRF24L01p_process_rx_payload>:

//
// private nRF24L01p_process_rx_payload implementation.
//
void nRF24L01p_process_rx_payload(byte pipe)
{
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	c8 2f       	mov	r28, r24
  // TODO: This is kinda hacky.
  byte payload_width = nRF24L01p_get_payload_width(nRF24L01p_REGISTER_RX_PW_P0 + pipe);
     5a0:	81 e1       	ldi	r24, 0x11	; 17
     5a2:	8c 0f       	add	r24, r28
     5a4:	0e 94 c0 02 	call	0x580	; 0x580 <nRF24L01p_get_payload_width>
     5a8:	d8 2e       	mov	r13, r24

  if (nRF24L01p_rx_pipes[pipe].remaining == 0)
     5aa:	8e e0       	ldi	r24, 0x0E	; 14
     5ac:	c8 9f       	mul	r28, r24
     5ae:	e0 01       	movw	r28, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	c1 5e       	subi	r28, 0xE1	; 225
     5b4:	de 4f       	sbci	r29, 0xFE	; 254
     5b6:	ec 84       	ldd	r14, Y+12	; 0x0c
     5b8:	fd 84       	ldd	r15, Y+13	; 0x0d
     5ba:	e1 14       	cp	r14, r1
     5bc:	f1 04       	cpc	r15, r1
     5be:	b1 f4       	brne	.+44     	; 0x5ec <nRF24L01p_process_rx_payload+0x5c>
  {
    // TODO: If this is really what I want to do, this
    //       should be nRF24L01p_rx_fifo_drop. But I
    //       would love to figure out a way to not do this.
    spi_start();
     5c0:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
    spi_transfer(nRF24L01p_SPI_R_RX_PAYLOAD);
     5c4:	81 e6       	ldi	r24, 0x61	; 97
     5c6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
    for (byte i = 0; i < payload_width; i++)
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	cd 15       	cp	r28, r13
     5ce:	29 f0       	breq	.+10     	; 0x5da <nRF24L01p_process_rx_payload+0x4a>
      spi_transfer(nRF24L01p_SPI_NOP);
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
    // TODO: If this is really what I want to do, this
    //       should be nRF24L01p_rx_fifo_drop. But I
    //       would love to figure out a way to not do this.
    spi_start();
    spi_transfer(nRF24L01p_SPI_R_RX_PAYLOAD);
    for (byte i = 0; i < payload_width; i++)
     5d6:	cf 5f       	subi	r28, 0xFF	; 255
     5d8:	f9 cf       	rjmp	.-14     	; 0x5cc <nRF24L01p_process_rx_payload+0x3c>
      nRF24L01p_rx_fifo_read(nRF24L01p_rx_pipes[pipe].data, payload_width);
      nRF24L01p_rx_pipes[pipe].data = nRF24L01p_rx_pipes[pipe].data + payload_width;
      nRF24L01p_rx_pipes[pipe].remaining = nRF24L01p_rx_pipes[pipe].remaining - payload_width;
    }
  }
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
    //       would love to figure out a way to not do this.
    spi_start();
    spi_transfer(nRF24L01p_SPI_R_RX_PAYLOAD);
    for (byte i = 0; i < payload_width; i++)
      spi_transfer(nRF24L01p_SPI_NOP);
    spi_end();
     5e8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <spi_end>
  else
  {
    // TODO: Move this logic into nRF24L01p_rx_fifo_read.
    //       nRF24L01p_rx_fifo_read could guarantee count size
    //       data.
    if (nRF24L01p_rx_pipes[pipe].remaining < payload_width)
     5ec:	0d 2d       	mov	r16, r13
     5ee:	10 e0       	ldi	r17, 0x00	; 0
     5f0:	e0 16       	cp	r14, r16
     5f2:	f1 06       	cpc	r15, r17
     5f4:	98 f4       	brcc	.+38     	; 0x61c <nRF24L01p_process_rx_payload+0x8c>
    {
      byte *payload = malloc(payload_width);
     5f6:	c8 01       	movw	r24, r16
     5f8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <malloc>
     5fc:	8c 01       	movw	r16, r24
      nRF24L01p_rx_fifo_read(payload, payload_width);
     5fe:	6d 2d       	mov	r22, r13
     600:	0e 94 30 02 	call	0x460	; 0x460 <nRF24L01p_rx_fifo_read>
      memcpy(nRF24L01p_rx_pipes[pipe].data, payload, nRF24L01p_rx_pipes[pipe].remaining);
     604:	a7 01       	movw	r20, r14
     606:	b8 01       	movw	r22, r16
     608:	8a 85       	ldd	r24, Y+10	; 0x0a
     60a:	9b 85       	ldd	r25, Y+11	; 0x0b
     60c:	0e 94 01 0a 	call	0x1402	; 0x1402 <memcpy>
      free(payload);
     610:	c8 01       	movw	r24, r16
     612:	0e 94 72 09 	call	0x12e4	; 0x12e4 <free>
      nRF24L01p_rx_pipes[pipe].remaining = 0;
     616:	1d 86       	std	Y+13, r1	; 0x0d
     618:	1c 86       	std	Y+12, r1	; 0x0c
     61a:	10 c0       	rjmp	.+32     	; 0x63c <nRF24L01p_process_rx_payload+0xac>
    }
    else
    {
      nRF24L01p_rx_fifo_read(nRF24L01p_rx_pipes[pipe].data, payload_width);
     61c:	ea 84       	ldd	r14, Y+10	; 0x0a
     61e:	fb 84       	ldd	r15, Y+11	; 0x0b
     620:	6d 2d       	mov	r22, r13
     622:	c7 01       	movw	r24, r14
     624:	0e 94 30 02 	call	0x460	; 0x460 <nRF24L01p_rx_fifo_read>
      nRF24L01p_rx_pipes[pipe].data = nRF24L01p_rx_pipes[pipe].data + payload_width;
     628:	e0 0e       	add	r14, r16
     62a:	f1 1e       	adc	r15, r17
     62c:	fb 86       	std	Y+11, r15	; 0x0b
     62e:	ea 86       	std	Y+10, r14	; 0x0a
      nRF24L01p_rx_pipes[pipe].remaining = nRF24L01p_rx_pipes[pipe].remaining - payload_width;
     630:	8c 85       	ldd	r24, Y+12	; 0x0c
     632:	9d 85       	ldd	r25, Y+13	; 0x0d
     634:	80 1b       	sub	r24, r16
     636:	91 0b       	sbc	r25, r17
     638:	9d 87       	std	Y+13, r25	; 0x0d
     63a:	8c 87       	std	Y+12, r24	; 0x0c
    }
  }
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	08 95       	ret

0000064c <nRF24L01p_tx_fifo_is_reuse>:
//
// nRF24L01p_tx_fifo_is_reuse
//
bool nRF24L01p_tx_fifo_is_reuse(void)
{
  return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
     64c:	87 e1       	ldi	r24, 0x17	; 23
     64e:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
         nRF24L01p_MASK_FIFO_STATUS_TX_REUSE;
}
     652:	86 fb       	bst	r24, 6
     654:	88 27       	eor	r24, r24
     656:	80 f9       	bld	r24, 0
     658:	08 95       	ret

0000065a <nRF24L01p_tx_fifo_is_full>:
//
// nRF24L01p_tx_fifo_is_full
//
bool nRF24L01p_tx_fifo_is_full(void)
{
  return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
     65a:	87 e1       	ldi	r24, 0x17	; 23
     65c:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
         nRF24L01p_MASK_FIFO_STATUS_TX_FULL;
}
     660:	85 fb       	bst	r24, 5
     662:	88 27       	eor	r24, r24
     664:	80 f9       	bld	r24, 0
     666:	08 95       	ret

00000668 <nRF24L01p_tx_fifo_is_empty>:
//
// nRF24L01p_tx_fifo_is_empty
//
bool nRF24L01p_tx_fifo_is_empty(void)
{
  return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
     668:	87 e1       	ldi	r24, 0x17	; 23
     66a:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
         nRF24L01p_MASK_FIFO_STATUS_TX_EMPTY;
}
     66e:	82 95       	swap	r24
     670:	81 70       	andi	r24, 0x01	; 1
     672:	08 95       	ret

00000674 <nRF24L01p_rx_fifo_is_full>:
//
// nRF24L01p_rx_fifo_is_full
//
bool nRF24L01p_rx_fifo_is_full(void)
{
  return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
     674:	87 e1       	ldi	r24, 0x17	; 23
     676:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
         nRF24L01p_MASK_FIFO_STATUS_RX_FULL;
}
     67a:	86 95       	lsr	r24
     67c:	81 70       	andi	r24, 0x01	; 1
     67e:	08 95       	ret

00000680 <nRF24L01p_rx_fifo_is_empty>:
//
// nRF24L01p_rx_fifo_is_empty
//
bool nRF24L01p_rx_fifo_is_empty(void)
{
  return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
     680:	87 e1       	ldi	r24, 0x17	; 23
     682:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
         nRF24L01p_MASK_FIFO_STATUS_RX_EMPTY;
}
     686:	81 70       	andi	r24, 0x01	; 1
     688:	08 95       	ret

0000068a <nRF24L01p_packets_lost>:
//
// nRF24L01p_packets_lost implementation.
//
byte nRF24L01p_packets_lost(void)
{
  return (nRF24L01p_get_register8(nRF24L01p_REGISTER_OBSERVE_TX) &
     68a:	88 e0       	ldi	r24, 0x08	; 8
     68c:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
         nRF24L01p_MASK_OBSERVE_TX_PLOS_CNT) >> 4;
}
     690:	82 95       	swap	r24
     692:	8f 70       	andi	r24, 0x0F	; 15
     694:	08 95       	ret

00000696 <nRF24L01p_packets_retransmitted>:
//
// nRF24L01p_packets_retransmitted implementation.
//
byte nRF24L01p_packets_retransmitted(void)
{
  return nRF24L01p_get_register8(nRF24L01p_REGISTER_OBSERVE_TX) &
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
         nRF24L01p_MASK_OBSERVE_TX_ARC_CNT;
}
     69c:	8f 70       	andi	r24, 0x0F	; 15
     69e:	08 95       	ret

000006a0 <nRF24L01p_set_register8>:

//
// nRF24L01p_set_register8 implementation.
//
int nRF24L01p_set_register8(byte address, byte data)
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	18 2f       	mov	r17, r24
  if (address >= 0x18 && address <= 0x1B)
     6ae:	88 ee       	ldi	r24, 0xE8	; 232
     6b0:	81 0f       	add	r24, r17
     6b2:	84 30       	cpi	r24, 0x04	; 4
     6b4:	88 f0       	brcs	.+34     	; 0x6d8 <nRF24L01p_set_register8+0x38>
    return -1;

  spi_start();
     6b6:	69 83       	std	Y+1, r22	; 0x01
     6b8:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_W_REGISTER |
     6bc:	81 2f       	mov	r24, r17
     6be:	8f 71       	andi	r24, 0x1F	; 31
     6c0:	80 62       	ori	r24, 0x20	; 32
     6c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
               (address & nRF24L01p_SPI_RW_REGISTER_MASK));
  spi_transfer(data);
     6c6:	69 81       	ldd	r22, Y+1	; 0x01
     6c8:	86 2f       	mov	r24, r22
     6ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
  spi_end();
     6ce:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <spi_end>

  return 0;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <nRF24L01p_set_register8+0x3c>
// nRF24L01p_set_register8 implementation.
//
int nRF24L01p_set_register8(byte address, byte data)
{
  if (address >= 0x18 && address <= 0x1B)
    return -1;
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	9f ef       	ldi	r25, 0xFF	; 255
               (address & nRF24L01p_SPI_RW_REGISTER_MASK));
  spi_transfer(data);
  spi_end();

  return 0;
}
     6dc:	0f 90       	pop	r0
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	08 95       	ret

000006e6 <nRF24L01p_set_register8_bits>:

//
// nRF24L01p_set_register8_bits implementation.
//
int nRF24L01p_set_register8_bits(byte address, byte mask, byte value)
{
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <nRF24L01p_set_register8_bits+0x8>
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	18 2f       	mov	r17, r24
  byte reg = nRF24L01p_get_register8(address);
     6f4:	4a 83       	std	Y+2, r20	; 0x02
     6f6:	69 83       	std	Y+1, r22	; 0x01
     6f8:	0e 94 a9 02 	call	0x552	; 0x552 <nRF24L01p_get_register8>
  reg = (reg & ~mask) | (value & mask);
     6fc:	69 81       	ldd	r22, Y+1	; 0x01
     6fe:	96 2f       	mov	r25, r22
     700:	90 95       	com	r25
     702:	98 23       	and	r25, r24
     704:	4a 81       	ldd	r20, Y+2	; 0x02
     706:	64 23       	and	r22, r20
     708:	96 2b       	or	r25, r22
  return nRF24L01p_set_register8(address, reg);
     70a:	69 2f       	mov	r22, r25
     70c:	81 2f       	mov	r24, r17
}
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
//
int nRF24L01p_set_register8_bits(byte address, byte mask, byte value)
{
  byte reg = nRF24L01p_get_register8(address);
  reg = (reg & ~mask) | (value & mask);
  return nRF24L01p_set_register8(address, reg);
     718:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <nRF24L01p_set_register8>

0000071c <nRF24L01p_config_rx_dr_interrupt>:
//
// nRF24L01p_config_rx_dr_interrupt implementation.
//
int nRF24L01p_config_rx_dr_interrupt(bool value)
{
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	48 27       	eor	r20, r24
     720:	41 95       	neg	r20
     722:	60 e4       	ldi	r22, 0x40	; 64
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               nRF24L01p_MASK_CONFIG_MASK_RX_DR,
                               value ? 0x00 : 0xFF);
  return 0;
}
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	08 95       	ret

00000730 <nRF24L01p_config_tx_ds_interrupt>:
//
// nRF24L01p_config_tx_ds_interrupt implementation.
//
int nRF24L01p_config_tx_ds_interrupt(bool value)
{
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	48 27       	eor	r20, r24
     734:	41 95       	neg	r20
     736:	60 e2       	ldi	r22, 0x20	; 32
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               nRF24L01p_MASK_CONFIG_MASK_TX_DS,
                               value ? 0x00 : 0xFF);
  return 0;
}
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	08 95       	ret

00000744 <nRF24L01p_config_max_rt_interrupt>:
//
// nRF24L01p_config_max_rt_interrupt implementation.
//
int nRF24L01p_config_max_rt_interrupt(bool value)
{
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	48 27       	eor	r20, r24
     748:	41 95       	neg	r20
     74a:	60 e1       	ldi	r22, 0x10	; 16
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               nRF24L01p_MASK_CONFIG_MASK_MAX_RT,
                               value ? 0x00 : 0xFF);
  return 0;
}
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	08 95       	ret

00000758 <nRF24L01p_config_crc>:
//
// nRF24L01p_config_crc implementation.
//
int nRF24L01p_config_crc(byte value)
{
  if (!(value == nRF24L01p_VALUE_CONFIG_CRC_ENABLE ||
     758:	98 2f       	mov	r25, r24
     75a:	97 7f       	andi	r25, 0xF7	; 247
     75c:	41 f4       	brne	.+16     	; 0x76e <nRF24L01p_config_crc+0x16>
        value == nRF24L01p_VALUE_CONFIG_CRC_DISABLE))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
     75e:	48 2f       	mov	r20, r24
     760:	68 e0       	ldi	r22, 0x08	; 8
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               nRF24L01p_MASK_CONFIG_EN_CRC,
                               value);

  return 0;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	08 95       	ret
//
int nRF24L01p_config_crc(byte value)
{
  if (!(value == nRF24L01p_VALUE_CONFIG_CRC_ENABLE ||
        value == nRF24L01p_VALUE_CONFIG_CRC_DISABLE))
    return -1;
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	9f ef       	ldi	r25, 0xFF	; 255
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
                               nRF24L01p_MASK_CONFIG_EN_CRC,
                               value);

  return 0;
}
     772:	08 95       	ret

00000774 <nRF24L01p_config_crc_count>:
//
// nRF24L01p_config_crc_count implementation.
//
int nRF24L01p_config_crc_count(byte value)
{
  if (!(value == nRF24L01p_VALUE_CONFIG_CRCO_1 ||
     774:	98 2f       	mov	r25, r24
     776:	9b 7f       	andi	r25, 0xFB	; 251
     778:	41 f4       	brne	.+16     	; 0x78a <nRF24L01p_config_crc_count+0x16>
        value == nRF24L01p_VALUE_CONFIG_CRCO_2))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
     77a:	48 2f       	mov	r20, r24
     77c:	64 e0       	ldi	r22, 0x04	; 4
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               nRF24L01p_MASK_CONFIG_CRCO,
                               value);

  return 0;
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	08 95       	ret
//
int nRF24L01p_config_crc_count(byte value)
{
  if (!(value == nRF24L01p_VALUE_CONFIG_CRCO_1 ||
        value == nRF24L01p_VALUE_CONFIG_CRCO_2))
    return -1;
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	9f ef       	ldi	r25, 0xFF	; 255
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
                               nRF24L01p_MASK_CONFIG_CRCO,
                               value);

  return 0;
}
     78e:	08 95       	ret

00000790 <nRF24L01p_config_power>:

//
// nRF24L01p_config_power implementation.
//
int nRF24L01p_config_power(byte value)
{
     790:	cf 93       	push	r28
     792:	c8 2f       	mov	r28, r24
  if (!(value == nRF24L01p_VALUE_CONFIG_PWR_UP ||
     794:	8d 7f       	andi	r24, 0xFD	; 253
     796:	69 f4       	brne	.+26     	; 0x7b2 <nRF24L01p_config_power+0x22>
        value == nRF24L01p_VALUE_CONFIG_PWR_DOWN))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
     798:	4c 2f       	mov	r20, r28
     79a:	62 e0       	ldi	r22, 0x02	; 2
     79c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_CONFIG_PWR_UP,
                              value);

  if (value == nRF24L01p_VALUE_CONFIG_PWR_UP)
     7a0:	c2 30       	cpi	r28, 0x02	; 2
     7a2:	51 f4       	brne	.+20     	; 0x7b8 <nRF24L01p_config_power+0x28>
     7a4:	8f e6       	ldi	r24, 0x6F	; 111
     7a6:	97 e1       	ldi	r25, 0x17	; 23
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <nRF24L01p_config_power+0x18>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <nRF24L01p_config_power+0x1e>
     7ae:	00 00       	nop
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <nRF24L01p_config_power+0x28>
//
int nRF24L01p_config_power(byte value)
{
  if (!(value == nRF24L01p_VALUE_CONFIG_PWR_UP ||
        value == nRF24L01p_VALUE_CONFIG_PWR_DOWN))
    return -1;
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	9f ef       	ldi	r25, 0xFF	; 255
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <nRF24L01p_config_power+0x2c>
                              value);

  if (value == nRF24L01p_VALUE_CONFIG_PWR_UP)
    _delay_us(nRF24L01p_TIMING_TPD2STBY_US);

  return 0;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
}
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <nRF24L01p_config_transceiver_mode>:
//
// nRF24L01p_config_transceiver_mode implementation.
//
int nRF24L01p_config_transceiver_mode(byte value)
{
  if (!(value == nRF24L01p_VALUE_CONFIG_PRIM_TX ||
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	40 f4       	brcc	.+16     	; 0x7d4 <nRF24L01p_config_transceiver_mode+0x14>
        value == nRF24L01p_VALUE_CONFIG_PRIM_RX))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
     7c4:	48 2f       	mov	r20, r24
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_CONFIG_PRIM_RX,
                              value);
  return 0;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	08 95       	ret
//
int nRF24L01p_config_transceiver_mode(byte value)
{
  if (!(value == nRF24L01p_VALUE_CONFIG_PRIM_TX ||
        value == nRF24L01p_VALUE_CONFIG_PRIM_RX))
    return -1;
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
                              nRF24L01p_MASK_CONFIG_PRIM_RX,
                              value);
  return 0;
}
     7d8:	08 95       	ret

000007da <nRF24L01p_config_auto_ack>:
//
// nRF24L01p_config_auto_ack implementation.
//
int nRF24L01p_config_auto_ack(byte mask, bool value)
{
  if (!(mask == nRF24L01p_MASK_EN_AA_ENAA_P0 ||
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	98 0f       	add	r25, r24
     7de:	92 30       	cpi	r25, 0x02	; 2
     7e0:	50 f0       	brcs	.+20     	; 0x7f6 <nRF24L01p_config_auto_ack+0x1c>
        mask == nRF24L01p_MASK_EN_AA_ENAA_P1 ||
     7e2:	84 30       	cpi	r24, 0x04	; 4
     7e4:	41 f0       	breq	.+16     	; 0x7f6 <nRF24L01p_config_auto_ack+0x1c>
        mask == nRF24L01p_MASK_EN_AA_ENAA_P2 ||
     7e6:	88 30       	cpi	r24, 0x08	; 8
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <nRF24L01p_config_auto_ack+0x1c>
        mask == nRF24L01p_MASK_EN_AA_ENAA_P3 ||
     7ea:	80 31       	cpi	r24, 0x10	; 16
     7ec:	21 f0       	breq	.+8      	; 0x7f6 <nRF24L01p_config_auto_ack+0x1c>
        mask == nRF24L01p_MASK_EN_AA_ENAA_P4 ||
     7ee:	80 32       	cpi	r24, 0x20	; 32
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <nRF24L01p_config_auto_ack+0x1c>
//
// nRF24L01p_config_auto_ack implementation.
//
int nRF24L01p_config_auto_ack(byte mask, bool value)
{
  if (!(mask == nRF24L01p_MASK_EN_AA_ENAA_P0 ||
     7f2:	8f 33       	cpi	r24, 0x3F	; 63
     7f4:	49 f4       	brne	.+18     	; 0x808 <nRF24L01p_config_auto_ack+0x2e>
        mask == nRF24L01p_MASK_EN_AA_ENAA_P4 ||
        mask == nRF24L01p_MASK_EN_AA_ENAA_P5 ||
        mask == nRF24L01p_MASK_EN_AA_ENAA_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_AA,
     7f6:	46 2f       	mov	r20, r22
     7f8:	41 95       	neg	r20
     7fa:	68 2f       	mov	r22, r24
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               mask, value ? 0xFF : 0x00);
  return 0;
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	08 95       	ret
        mask == nRF24L01p_MASK_EN_AA_ENAA_P2 ||
        mask == nRF24L01p_MASK_EN_AA_ENAA_P3 ||
        mask == nRF24L01p_MASK_EN_AA_ENAA_P4 ||
        mask == nRF24L01p_MASK_EN_AA_ENAA_P5 ||
        mask == nRF24L01p_MASK_EN_AA_ENAA_ALL))
    return -1;
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_AA,
                               mask, value ? 0xFF : 0x00);
  return 0;
}
     80c:	08 95       	ret

0000080e <nRF24L01p_config_rx>:
//
// nRF24L01p_config_rx implementation.
//
int nRF24L01p_config_rx(byte mask, bool value)
{
  if (!(mask == nRF24L01p_MASK_EN_RXADDR_ERX_P0 ||
     80e:	9f ef       	ldi	r25, 0xFF	; 255
     810:	98 0f       	add	r25, r24
     812:	92 30       	cpi	r25, 0x02	; 2
     814:	50 f0       	brcs	.+20     	; 0x82a <nRF24L01p_config_rx+0x1c>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P1 ||
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	41 f0       	breq	.+16     	; 0x82a <nRF24L01p_config_rx+0x1c>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P2 ||
     81a:	88 30       	cpi	r24, 0x08	; 8
     81c:	31 f0       	breq	.+12     	; 0x82a <nRF24L01p_config_rx+0x1c>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P3 ||
     81e:	80 31       	cpi	r24, 0x10	; 16
     820:	21 f0       	breq	.+8      	; 0x82a <nRF24L01p_config_rx+0x1c>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
     822:	80 32       	cpi	r24, 0x20	; 32
     824:	11 f0       	breq	.+4      	; 0x82a <nRF24L01p_config_rx+0x1c>
//
// nRF24L01p_config_rx implementation.
//
int nRF24L01p_config_rx(byte mask, bool value)
{
  if (!(mask == nRF24L01p_MASK_EN_RXADDR_ERX_P0 ||
     826:	8f 33       	cpi	r24, 0x3F	; 63
     828:	49 f4       	brne	.+18     	; 0x83c <nRF24L01p_config_rx+0x2e>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
     82a:	46 2f       	mov	r20, r22
     82c:	41 95       	neg	r20
     82e:	68 2f       	mov	r22, r24
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               mask, value ? 0xFF : 0x00);

  return 0;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	08 95       	ret
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P2 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P3 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
                               mask, value ? 0xFF : 0x00);

  return 0;
}
     840:	08 95       	ret

00000842 <nRF24L01p_config_address_width>:
//
// nRF24L01p_config_address_width implementation.
//
int nRF24L01p_config_address_width(byte value)
{
  if (!(value == nRF24L01p_VALUE_SETUP_AW_AW_3 ||
     842:	9f ef       	ldi	r25, 0xFF	; 255
     844:	98 0f       	add	r25, r24
     846:	93 30       	cpi	r25, 0x03	; 3
     848:	40 f4       	brcc	.+16     	; 0x85a <nRF24L01p_config_address_width+0x18>
        value == nRF24L01p_VALUE_SETUP_AW_AW_4 ||
        value == nRF24L01p_VALUE_SETUP_AW_AW_5))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_AW,
     84a:	48 2f       	mov	r20, r24
     84c:	63 e0       	ldi	r22, 0x03	; 3
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_SETUP_AW_AW,
                              value);
  return 0;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	08 95       	ret
int nRF24L01p_config_address_width(byte value)
{
  if (!(value == nRF24L01p_VALUE_SETUP_AW_AW_3 ||
        value == nRF24L01p_VALUE_SETUP_AW_AW_4 ||
        value == nRF24L01p_VALUE_SETUP_AW_AW_5))
    return -1;
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_AW,
                              nRF24L01p_MASK_SETUP_AW_AW,
                              value);
  return 0;
}
     85e:	08 95       	ret

00000860 <nRF24L01p_config_retransmit_delay>:
//
// nRF24L01p_config_retransmit_delay implementation.
//
int nRF24L01p_config_retransmit_delay(byte value)
{
  if (value <= 0x0F)
     860:	80 31       	cpi	r24, 0x10	; 16
     862:	40 f0       	brcs	.+16     	; 0x874 <nRF24L01p_config_retransmit_delay+0x14>
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
     864:	48 2f       	mov	r20, r24
     866:	60 ef       	ldi	r22, 0xF0	; 240
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_SETUP_RETR_ARD,
                              value);
  return 0;
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	08 95       	ret
// nRF24L01p_config_retransmit_delay implementation.
//
int nRF24L01p_config_retransmit_delay(byte value)
{
  if (value <= 0x0F)
    return -1;
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
                              nRF24L01p_MASK_SETUP_RETR_ARD,
                              value);
  return 0;
}
     878:	08 95       	ret

0000087a <nRF24L01p_config_retransmit_count>:
//
// nRF24L01p_config_retransmit_count implementation.
//
int nRF24L01p_config_retransmit_count(byte value)
{
  if (value > 0x0F)
     87a:	80 31       	cpi	r24, 0x10	; 16
     87c:	40 f4       	brcc	.+16     	; 0x88e <nRF24L01p_config_retransmit_count+0x14>
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
     87e:	48 2f       	mov	r20, r24
     880:	6f e0       	ldi	r22, 0x0F	; 15
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_SETUP_RETR_ARC,
                              value);
  return 0;
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	08 95       	ret
// nRF24L01p_config_retransmit_count implementation.
//
int nRF24L01p_config_retransmit_count(byte value)
{
  if (value > 0x0F)
    return -1;
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
                              nRF24L01p_MASK_SETUP_RETR_ARC,
                              value);
  return 0;
}
     892:	08 95       	ret

00000894 <nRF24L01p_config_channel>:
//
// nRF24L01p_config_channel implementation.
//
int nRF24L01p_config_channel(byte value)
{
  if (value > 127)
     894:	87 fd       	sbrc	r24, 7
     896:	08 c0       	rjmp	.+16     	; 0x8a8 <nRF24L01p_config_channel+0x14>
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_CH,
     898:	48 2f       	mov	r20, r24
     89a:	6f e7       	ldi	r22, 0x7F	; 127
     89c:	85 e0       	ldi	r24, 0x05	; 5
     89e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_RF_CH_RF_CH,
                              value);
  return 0;
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	08 95       	ret
// nRF24L01p_config_channel implementation.
//
int nRF24L01p_config_channel(byte value)
{
  if (value > 127)
    return -1;
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_CH,
                              nRF24L01p_MASK_RF_CH_RF_CH,
                              value);
  return 0;
}
     8ac:	08 95       	ret

000008ae <nRF24L01p_config_air_data_rate>:
//
// nRF24L01p_config_air_data_rate implementation.
//
int nRF24L01p_config_air_data_rate(byte value)
{
  if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_DR_1Mbps ||
     8ae:	98 2f       	mov	r25, r24
     8b0:	97 7f       	andi	r25, 0xF7	; 247
     8b2:	41 f4       	brne	.+16     	; 0x8c4 <nRF24L01p_config_air_data_rate+0x16>
        value == nRF24L01p_VALUE_RF_SETUP_RF_DR_2Mbps))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
     8b4:	48 2f       	mov	r20, r24
     8b6:	68 e0       	ldi	r22, 0x08	; 8
     8b8:	86 e0       	ldi	r24, 0x06	; 6
     8ba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_RF_SETUP_RF_DR,
                              value);
  return 0;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	08 95       	ret
//
int nRF24L01p_config_air_data_rate(byte value)
{
  if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_DR_1Mbps ||
        value == nRF24L01p_VALUE_RF_SETUP_RF_DR_2Mbps))
    return -1;
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
                              nRF24L01p_MASK_RF_SETUP_RF_DR,
                              value);
  return 0;
}
     8c8:	08 95       	ret

000008ca <nRF24L01p_config_output_power>:
//
// nRF24L01p_config_output_power implementation.
//
int nRF24L01p_config_output_power(byte value)
{
  if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_18dBm ||
     8ca:	98 2f       	mov	r25, r24
     8cc:	99 7f       	andi	r25, 0xF9	; 249
     8ce:	41 f4       	brne	.+16     	; 0x8e0 <nRF24L01p_config_output_power+0x16>
        value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_12dBm ||
        value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_6dBm ||
        value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_0dBm))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
     8d0:	48 2f       	mov	r20, r24
     8d2:	66 e0       	ldi	r22, 0x06	; 6
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                              nRF24L01p_MASK_RF_SETUP_RF_PWR,
                              value);
  return 0;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 95       	ret
{
  if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_18dBm ||
        value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_12dBm ||
        value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_6dBm ||
        value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_0dBm))
    return -1;
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	9f ef       	ldi	r25, 0xFF	; 255

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
                              nRF24L01p_MASK_RF_SETUP_RF_PWR,
                              value);
  return 0;
}
     8e4:	08 95       	ret

000008e6 <nRF24L01p_config_payload_width>:

//
// nRF24L01p_config_payload_width implementation.
//
int nRF24L01p_config_payload_width(byte reg, byte width)
{
     8e6:	46 2f       	mov	r20, r22
  if (!(reg == nRF24L01p_REGISTER_RX_PW_P0 ||
     8e8:	9f ee       	ldi	r25, 0xEF	; 239
     8ea:	98 0f       	add	r25, r24
     8ec:	96 30       	cpi	r25, 0x06	; 6
     8ee:	30 f4       	brcc	.+12     	; 0x8fc <nRF24L01p_config_payload_width+0x16>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;

  nRF24L01p_set_register8_bits(reg,
     8f0:	6f e3       	ldi	r22, 0x3F	; 63
     8f2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
                               nRF24L01p_MASK_RX_PW,
                               width);

  return 0;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	08 95       	ret
        reg == nRF24L01p_REGISTER_RX_PW_P1 ||
        reg == nRF24L01p_REGISTER_RX_PW_P2 ||
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	9f ef       	ldi	r25, 0xFF	; 255
  nRF24L01p_set_register8_bits(reg,
                               nRF24L01p_MASK_RX_PW,
                               width);

  return 0;
}
     900:	08 95       	ret

00000902 <nRF24L01p_status_rx_ready_clear>:
//
// nRF24L01p_status_rx_ready_clear implementation.
//
void nRF24L01p_status_rx_ready_clear(void)
{
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
     902:	4f ef       	ldi	r20, 0xFF	; 255
     904:	60 e4       	ldi	r22, 0x40	; 64
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>

0000090c <nRF24L01p_status_tx_sent_clear>:
//
// nRF24L01p_status_tx_sent_clear implementation.
//
void nRF24L01p_status_tx_sent_clear(void)
{
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
     90c:	4f ef       	ldi	r20, 0xFF	; 255
     90e:	60 e2       	ldi	r22, 0x20	; 32
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>

00000916 <nRF24L01p_process_tx_payload>:

//
// private nRF24L01p_process_tx_payload implementation.
//
void nRF24L01p_process_tx_payload()
{
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
  if (nRF24L01p_tx_pipe.remaining == 0)
     924:	80 91 7e 01 	lds	r24, 0x017E
     928:	90 91 7f 01 	lds	r25, 0x017F
     92c:	89 2b       	or	r24, r25
     92e:	51 f5       	brne	.+84     	; 0x984 <nRF24L01p_process_tx_payload+0x6e>
  {
    // When we are finished sending we disable the device.
    nRF24L01p_disable();
     930:	0e 94 a7 02 	call	0x54e	; 0x54e <nRF24L01p_disable>

    // Turn off the pipe.
    nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, FALSE);
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 07 04 	call	0x80e	; 0x80e <nRF24L01p_config_rx>
     93c:	3f c0       	rjmp	.+126    	; 0x9bc <nRF24L01p_process_tx_payload+0xa6>
  }
  else
  {
    while (!nRF24L01p_tx_fifo_is_full() && nRF24L01p_tx_pipe.remaining != 0)
     93e:	c0 91 7e 01 	lds	r28, 0x017E
     942:	d0 91 7f 01 	lds	r29, 0x017F
     946:	20 97       	sbiw	r28, 0x00	; 0
     948:	b9 f1       	breq	.+110    	; 0x9b8 <nRF24L01p_process_tx_payload+0xa2>
    {
      // TODO: Move this logic into nRF24L01p_rx_fifo_write.
      //       nRF24L01p_rx_fifo_write could guarantee count size
      //       data.
      if (nRF24L01p_tx_pipe.remaining < nRF24L01p_tx_pipe.payload_width)
     94a:	d0 90 7b 01 	lds	r13, 0x017B
     94e:	0d 2d       	mov	r16, r13
     950:	10 e0       	ldi	r17, 0x00	; 0
     952:	c0 17       	cp	r28, r16
     954:	d1 07       	cpc	r29, r17
     956:	d8 f4       	brcc	.+54     	; 0x98e <nRF24L01p_process_tx_payload+0x78>
      {
        byte *payload = malloc(nRF24L01p_tx_pipe.payload_width);
     958:	c8 01       	movw	r24, r16
     95a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <malloc>
     95e:	8c 01       	movw	r16, r24
        memcpy(payload, nRF24L01p_tx_pipe.data, nRF24L01p_tx_pipe.remaining);
     960:	60 91 7c 01 	lds	r22, 0x017C
     964:	70 91 7d 01 	lds	r23, 0x017D
     968:	ae 01       	movw	r20, r28
     96a:	0e 94 01 0a 	call	0x1402	; 0x1402 <memcpy>
        nRF24L01p_tx_fifo_write(payload, nRF24L01p_tx_pipe.payload_width);
     96e:	6d 2d       	mov	r22, r13
     970:	c8 01       	movw	r24, r16
     972:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <nRF24L01p_tx_fifo_write>
        free(payload);
     976:	c8 01       	movw	r24, r16
     978:	0e 94 72 09 	call	0x12e4	; 0x12e4 <free>
        nRF24L01p_tx_pipe.remaining = 0;
     97c:	10 92 7f 01 	sts	0x017F, r1
     980:	10 92 7e 01 	sts	0x017E, r1
    // Turn off the pipe.
    nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, FALSE);
  }
  else
  {
    while (!nRF24L01p_tx_fifo_is_full() && nRF24L01p_tx_pipe.remaining != 0)
     984:	0e 94 2d 03 	call	0x65a	; 0x65a <nRF24L01p_tx_fifo_is_full>
     988:	88 23       	and	r24, r24
     98a:	c9 f2       	breq	.-78     	; 0x93e <nRF24L01p_process_tx_payload+0x28>
     98c:	15 c0       	rjmp	.+42     	; 0x9b8 <nRF24L01p_process_tx_payload+0xa2>
        free(payload);
        nRF24L01p_tx_pipe.remaining = 0;
      }
      else
      {
        nRF24L01p_tx_fifo_write(nRF24L01p_tx_pipe.data, nRF24L01p_tx_pipe.payload_width);
     98e:	e0 90 7c 01 	lds	r14, 0x017C
     992:	f0 90 7d 01 	lds	r15, 0x017D
     996:	6d 2d       	mov	r22, r13
     998:	c7 01       	movw	r24, r14
     99a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <nRF24L01p_tx_fifo_write>
        nRF24L01p_tx_pipe.data = nRF24L01p_tx_pipe.data + nRF24L01p_tx_pipe.payload_width;
     99e:	e0 0e       	add	r14, r16
     9a0:	f1 1e       	adc	r15, r17
     9a2:	f0 92 7d 01 	sts	0x017D, r15
     9a6:	e0 92 7c 01 	sts	0x017C, r14
        nRF24L01p_tx_pipe.remaining = nRF24L01p_tx_pipe.remaining - nRF24L01p_tx_pipe.payload_width;
     9aa:	c0 1b       	sub	r28, r16
     9ac:	d1 0b       	sbc	r29, r17
     9ae:	d0 93 7f 01 	sts	0x017F, r29
     9b2:	c0 93 7e 01 	sts	0x017E, r28
     9b6:	e6 cf       	rjmp	.-52     	; 0x984 <nRF24L01p_process_tx_payload+0x6e>
    // Enable the device. It's important to do this after filling the
    // FIFO so we don't get a TX sent interrupt in the middle of this
    // function when we call it from outside of an interrupt service
    // routine. All calls to nRF24L01p_process_tx_payload outside an
    // ISR MUST have the device disabled.
    nRF24L01p_enable();
     9b8:	0e 94 9f 02 	call	0x53e	; 0x53e <nRF24L01p_enable>
  }

  nRF24L01p_status_tx_sent_clear();
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
    // routine. All calls to nRF24L01p_process_tx_payload outside an
    // ISR MUST have the device disabled.
    nRF24L01p_enable();
  }

  nRF24L01p_status_tx_sent_clear();
     9ca:	0c 94 86 04 	jmp	0x90c	; 0x90c <nRF24L01p_status_tx_sent_clear>

000009ce <nRF24L01p_status_max_retries_clear>:
//
// nRF24L01p_status_max_retries_clear implementation.
//
void nRF24L01p_status_max_retries_clear(void)
{
  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
     9ce:	4f ef       	ldi	r20, 0xFF	; 255
     9d0:	60 e1       	ldi	r22, 0x10	; 16
     9d2:	87 e0       	ldi	r24, 0x07	; 7
     9d4:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>

000009d8 <__vector_1>:

// IRQ SERVICE HANDLER
//////////////////////

ISR (INT0_vect)
{
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	2f 93       	push	r18
     9e4:	3f 93       	push	r19
     9e6:	4f 93       	push	r20
     9e8:	5f 93       	push	r21
     9ea:	6f 93       	push	r22
     9ec:	7f 93       	push	r23
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
     9f6:	cf 93       	push	r28
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
  nRF24L01p_status_fetch();
     9fc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <nRF24L01p_status_fetch>

  if (nRF24L01p_status_tx_sent())
     a00:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <nRF24L01p_status_tx_sent>
     a04:	81 11       	cpse	r24, r1
  {
    nRF24L01p_process_tx_payload();
     a06:	0e 94 8b 04 	call	0x916	; 0x916 <nRF24L01p_process_tx_payload>
  }

  if (nRF24L01p_status_rx_ready())
     a0a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nRF24L01p_status_rx_ready>
     a0e:	81 11       	cpse	r24, r1
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <__vector_1+0x50>
    }
  }

  // TODO: Implement advice from Appendix E for automatic
  //       channel switching using carrier detect.
  if (nRF24L01p_status_max_retries())
     a12:	0e 94 ee 01 	call	0x3dc	; 0x3dc <nRF24L01p_status_max_retries>
     a16:	88 23       	and	r24, r24
     a18:	c1 f0       	breq	.+48     	; 0xa4a <__vector_1+0x72>
  {
    byte lost = nRF24L01p_packets_lost();
     a1a:	0e 94 45 03 	call	0x68a	; 0x68a <nRF24L01p_packets_lost>

    nRF24L01p_tx_fifo_flush();
     a1e:	0e 94 29 02 	call	0x452	; 0x452 <nRF24L01p_tx_fifo_flush>
    nRF24L01p_status_max_retries_clear();
     a22:	0e 94 e7 04 	call	0x9ce	; 0x9ce <nRF24L01p_status_max_retries_clear>
     a26:	11 c0       	rjmp	.+34     	; 0xa4a <__vector_1+0x72>
    //       since I'm 99% sure we can't trust updated
    //       pipe numbers in the same interrupt anyway.

    while (!nRF24L01p_rx_fifo_is_empty())
    {
      PORTC=0x01;
     a28:	c1 e0       	ldi	r28, 0x01	; 1
    // TODO: This whole thing should just be
    //       nRF24L01p_process_rx_payload(pipe)
    //       since I'm 99% sure we can't trust updated
    //       pipe numbers in the same interrupt anyway.

    while (!nRF24L01p_rx_fifo_is_empty())
     a2a:	0e 94 40 03 	call	0x680	; 0x680 <nRF24L01p_rx_fifo_is_empty>
     a2e:	81 11       	cpse	r24, r1
     a30:	f0 cf       	rjmp	.-32     	; 0xa12 <__vector_1+0x3a>
    {
      PORTC=0x01;
     a32:	c8 b9       	out	0x08, r28	; 8
      nRF24L01p_status_fetch();
     a34:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <nRF24L01p_status_fetch>
      byte pipe = nRF24L01p_status_pipe_ready();
     a38:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <nRF24L01p_status_pipe_ready>
      if (pipe <= 5) nRF24L01p_process_rx_payload(pipe);
     a3c:	86 30       	cpi	r24, 0x06	; 6
     a3e:	10 f4       	brcc	.+4      	; 0xa44 <__vector_1+0x6c>
     a40:	0e 94 c8 02 	call	0x590	; 0x590 <nRF24L01p_process_rx_payload>
      nRF24L01p_status_rx_ready_clear();
     a44:	0e 94 81 04 	call	0x902	; 0x902 <nRF24L01p_status_rx_ready_clear>
     a48:	f0 cf       	rjmp	.-32     	; 0xa2a <__vector_1+0x52>
  // TODO: Think this case through.
  if (nRF24L01p_status_tx_full())
  {

  }
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	cf 91       	pop	r28
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <nRF24L01p_init>:
// nRF24L01p_init implementation.
//
int nRF24L01p_init(int ce, int irq)
{
  // Start up the SPI bus.
  spi_init(SPI_MASTER);
     a6e:	80 e1       	ldi	r24, 0x10	; 16
     a70:	0e 94 c2 01 	call	0x384	; 0x384 <spi_init>

  // Set CE for output.
  DDRB |= _BV(DDB1);
     a74:	21 9a       	sbi	0x04, 1	; 4

  // Enable the CRC and set it to use 1 bit.
  nRF24L01p_config_crc(nRF24L01p_VALUE_CONFIG_CRC_ENABLE);
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	0e 94 ac 03 	call	0x758	; 0x758 <nRF24L01p_config_crc>
  nRF24L01p_config_crc_count(nRF24L01p_VALUE_CONFIG_CRCO_2);
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	0e 94 ba 03 	call	0x774	; 0x774 <nRF24L01p_config_crc_count>

  // Configure address width.
  nRF24L01p_config_address_width(nRF24L01p_VALUE_SETUP_AW_AW_5);
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	0e 94 21 04 	call	0x842	; 0x842 <nRF24L01p_config_address_width>

  // Set all pipes in EN_RXADDR to disabled.
  nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_ALL, FALSE);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	8f e3       	ldi	r24, 0x3F	; 63
     a8c:	0e 94 07 04 	call	0x80e	; 0x80e <nRF24L01p_config_rx>

  // Configure RF channel.
  nRF24L01p_config_channel(100);
     a90:	84 e6       	ldi	r24, 0x64	; 100
     a92:	0e 94 4a 04 	call	0x894	; 0x894 <nRF24L01p_config_channel>

  // Configure air data rate.
  nRF24L01p_config_air_data_rate(nRF24L01p_VALUE_RF_SETUP_RF_DR_1Mbps);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 57 04 	call	0x8ae	; 0x8ae <nRF24L01p_config_air_data_rate>

  // Configure output power.
  nRF24L01p_config_output_power(nRF24L01p_VALUE_RF_SETUP_RF_PWR_0dBm);
     a9c:	86 e0       	ldi	r24, 0x06	; 6
     a9e:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01p_config_output_power>

  // Enable auto acknowledgment.
  nRF24L01p_config_auto_ack(nRF24L01p_MASK_EN_AA_ENAA_ALL, FALSE);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	8f e3       	ldi	r24, 0x3F	; 63
     aa6:	0e 94 ed 03 	call	0x7da	; 0x7da <nRF24L01p_config_auto_ack>

  // Configure retransmit.
  nRF24L01p_config_retransmit_count(nRF24L01p_VALUE_SETUP_RETR_ARC_3);
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	0e 94 3d 04 	call	0x87a	; 0x87a <nRF24L01p_config_retransmit_count>
  nRF24L01p_config_retransmit_delay(nRF24L01p_VALUE_SETUP_RETR_ARD_250);

  // Flush the FIFOs
  nRF24L01p_tx_fifo_flush();
     ab0:	0e 94 29 02 	call	0x452	; 0x452 <nRF24L01p_tx_fifo_flush>
  nRF24L01p_rx_fifo_flush();
     ab4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <nRF24L01p_rx_fifo_flush>

  // Clear the interrupts.
  nRF24L01p_status_rx_ready_clear();
     ab8:	0e 94 81 04 	call	0x902	; 0x902 <nRF24L01p_status_rx_ready_clear>
  nRF24L01p_status_tx_sent_clear();
     abc:	0e 94 86 04 	call	0x90c	; 0x90c <nRF24L01p_status_tx_sent_clear>
  nRF24L01p_status_max_retries_clear();
     ac0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <nRF24L01p_status_max_retries_clear>

  // Enable external interrupt 0.
  // TODO: Make this configurable.
  EIMSK |= (1 << INT0);
     ac4:	e8 9a       	sbi	0x1d, 0	; 29
  EICRA = (EICRA & ~(1 << ISC00 | 1 << ISC01)) | 0x02;
     ac6:	e9 e6       	ldi	r30, 0x69	; 105
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	8c 7f       	andi	r24, 0xFC	; 252
     ace:	82 60       	ori	r24, 0x02	; 2
     ad0:	80 83       	st	Z, r24

  // Enable interrupts.
  sei();
     ad2:	78 94       	sei

  // Power up.
  nRF24L01p_config_power(nRF24L01p_VALUE_CONFIG_PWR_UP);
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	0e 94 c8 03 	call	0x790	; 0x790 <nRF24L01p_config_power>

  // TODO: Plz.
  return 0;
}
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	08 95       	ret

00000ae0 <nRF24L01p_get_register40>:

//
// nRF24L01p_get_register40 implementation.
//
long long unsigned int nRF24L01p_get_register40(byte address)
{
     ae0:	6f 92       	push	r6
     ae2:	7f 92       	push	r7
     ae4:	9f 92       	push	r9
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	1f 92       	push	r1
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
  spi_start();
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_R_REGISTER |
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	8f 71       	andi	r24, 0x1F	; 31
     b0a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
     b0e:	61 2c       	mov	r6, r1
     b10:	71 2c       	mov	r7, r1
               (address & nRF24L01p_SPI_RW_REGISTER_MASK));
  long long unsigned int response = 0;
     b12:	91 2c       	mov	r9, r1
     b14:	a1 2c       	mov	r10, r1
     b16:	b1 2c       	mov	r11, r1
     b18:	c1 2c       	mov	r12, r1
     b1a:	d1 2c       	mov	r13, r1
     b1c:	e1 2c       	mov	r14, r1
     b1e:	f1 2c       	mov	r15, r1
     b20:	10 e0       	ldi	r17, 0x00	; 0
  for (byte i = 0; i < 5; i++)
  {
    long long unsigned int chunk = spi_transfer(nRF24L01p_SPI_NOP);
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
    response |= chunk << (8 * i);
     b28:	28 2f       	mov	r18, r24
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	06 2d       	mov	r16, r6
     b3a:	0e 94 a3 08 	call	0x1146	; 0x1146 <__ashldi3>
     b3e:	92 2a       	or	r9, r18
     b40:	a3 2a       	or	r10, r19
     b42:	b4 2a       	or	r11, r20
     b44:	c5 2a       	or	r12, r21
     b46:	d6 2a       	or	r13, r22
     b48:	e7 2a       	or	r14, r23
     b4a:	f8 2a       	or	r15, r24
     b4c:	19 2b       	or	r17, r25
     b4e:	88 e0       	ldi	r24, 0x08	; 8
     b50:	68 0e       	add	r6, r24
     b52:	71 1c       	adc	r7, r1
{
  spi_start();
  spi_transfer(nRF24L01p_SPI_R_REGISTER |
               (address & nRF24L01p_SPI_RW_REGISTER_MASK));
  long long unsigned int response = 0;
  for (byte i = 0; i < 5; i++)
     b54:	e8 e2       	ldi	r30, 0x28	; 40
     b56:	6e 16       	cp	r6, r30
     b58:	71 04       	cpc	r7, r1
     b5a:	19 f7       	brne	.-58     	; 0xb22 <nRF24L01p_get_register40+0x42>
  {
    long long unsigned int chunk = spi_transfer(nRF24L01p_SPI_NOP);
    response |= chunk << (8 * i);
  }
  spi_end();
     b5c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <spi_end>

  return response;
}
     b60:	29 2d       	mov	r18, r9
     b62:	3a 2d       	mov	r19, r10
     b64:	4b 2d       	mov	r20, r11
     b66:	5c 2d       	mov	r21, r12
     b68:	6d 2d       	mov	r22, r13
     b6a:	7e 2d       	mov	r23, r14
     b6c:	8f 2d       	mov	r24, r15
     b6e:	91 2f       	mov	r25, r17
     b70:	0f 90       	pop	r0
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	7f 90       	pop	r7
     b8a:	6f 90       	pop	r6
     b8c:	08 95       	ret

00000b8e <nRF24L01p_get_address>:
//
// nRF24L01p_get_address implementation.
//
long long unsigned int nRF24L01p_get_address(byte reg)
{
  if (!(reg == nRF24L01p_REGISTER_RX_ADDR_P0 ||
     b8e:	96 ef       	ldi	r25, 0xF6	; 246
     b90:	98 0f       	add	r25, r24
     b92:	97 30       	cpi	r25, 0x07	; 7
     b94:	10 f4       	brcc	.+4      	; 0xb9a <nRF24L01p_get_address+0xc>
        reg == nRF24L01p_REGISTER_TX_ADDR))
    return 0;

  // TODO: This is broken, need to get 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  return nRF24L01p_get_register40(reg);
     b96:	0c 94 70 05 	jmp	0xae0	; 0xae0 <nRF24L01p_get_register40>
}
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	08 95       	ret

00000bac <nRF24L01p_set_register40>:

//
// nRF24L01p_set_register40 implementation.
//
int nRF24L01p_set_register40(byte address, long long unsigned int data)
{
     bac:	af 92       	push	r10
     bae:	bf 92       	push	r11
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <nRF24L01p_set_register40+0x16>
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	69 01       	movw	r12, r18
     bc8:	7a 01       	movw	r14, r20
     bca:	a6 2e       	mov	r10, r22
  if (address >= 0x18 && address <= 0x1B)
     bcc:	28 ee       	ldi	r18, 0xE8	; 232
     bce:	28 0f       	add	r18, r24
     bd0:	24 30       	cpi	r18, 0x04	; 4
     bd2:	18 f1       	brcs	.+70     	; 0xc1a <nRF24L01p_set_register40+0x6e>
    return -1;

  spi_start();
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	7a 83       	std	Y+2, r23	; 0x02
     bd8:	0e 94 cf 01 	call	0x39e	; 0x39e <spi_start>
  spi_transfer(nRF24L01p_SPI_W_REGISTER |
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	8f 71       	andi	r24, 0x1F	; 31
     be0:	80 62       	ori	r24, 0x20	; 32
     be2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
     be6:	85 e0       	ldi	r24, 0x05	; 5
     be8:	b8 2e       	mov	r11, r24
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
               (address & nRF24L01p_SPI_RW_REGISTER_MASK));
  for (byte i = 0; i < 5; i++)
  {
    spi_transfer(data & 0xFF);
     bec:	80 2f       	mov	r24, r16
     bee:	9a 83       	std	Y+2, r25	; 0x02
     bf0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <spi_transfer>
    data >>= 8;
     bf4:	98 01       	movw	r18, r16
     bf6:	a6 01       	movw	r20, r12
     bf8:	b7 01       	movw	r22, r14
     bfa:	8a 2d       	mov	r24, r10
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	08 e0       	ldi	r16, 0x08	; 8
     c00:	0e 94 be 08 	call	0x117c	; 0x117c <__lshrdi3>
     c04:	89 01       	movw	r16, r18
     c06:	6a 01       	movw	r12, r20
     c08:	7b 01       	movw	r14, r22
     c0a:	a8 2e       	mov	r10, r24
     c0c:	ba 94       	dec	r11
    return -1;

  spi_start();
  spi_transfer(nRF24L01p_SPI_W_REGISTER |
               (address & nRF24L01p_SPI_RW_REGISTER_MASK));
  for (byte i = 0; i < 5; i++)
     c0e:	71 f7       	brne	.-36     	; 0xbec <nRF24L01p_set_register40+0x40>
  {
    spi_transfer(data & 0xFF);
    data >>= 8;
  }
  spi_end();
     c10:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <spi_end>

  return 0;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <nRF24L01p_set_register40+0x72>
// nRF24L01p_set_register40 implementation.
//
int nRF24L01p_set_register40(byte address, long long unsigned int data)
{
  if (address >= 0x18 && address <= 0x1B)
    return -1;
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	9f ef       	ldi	r25, 0xFF	; 255
    data >>= 8;
  }
  spi_end();

  return 0;
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	08 95       	ret

00000c38 <nRF24L01p_config_address>:

//
// nRF24L01p_config_address implementation.
//
int nRF24L01p_config_address(byte reg, long long unsigned int address)
{
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
  if (!(reg == nRF24L01p_REGISTER_RX_ADDR_P0 ||
     c3c:	96 ef       	ldi	r25, 0xF6	; 246
     c3e:	98 0f       	add	r25, r24
     c40:	97 30       	cpi	r25, 0x07	; 7
     c42:	28 f4       	brcc	.+10     	; 0xc4e <nRF24L01p_config_address+0x16>

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     c44:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>

  return 0;
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <nRF24L01p_config_address+0x1a>
        reg == nRF24L01p_REGISTER_RX_ADDR_P2 ||
        reg == nRF24L01p_REGISTER_RX_ADDR_P3 ||
        reg == nRF24L01p_REGISTER_RX_ADDR_P4 ||
        reg == nRF24L01p_REGISTER_RX_ADDR_P5 ||
        reg == nRF24L01p_REGISTER_TX_ADDR))
    return -1;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	9f ef       	ldi	r25, 0xFF	; 255
  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);

  return 0;
}
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <nRF24L01p_read>:

//
// nRF24L01p_read implementation.
//
int nRF24L01p_read(byte *restrict dst, size_t count, byte pipe)
{
     c58:	8f 92       	push	r8
     c5a:	9f 92       	push	r9
     c5c:	af 92       	push	r10
     c5e:	bf 92       	push	r11
     c60:	cf 92       	push	r12
     c62:	df 92       	push	r13
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	1f 92       	push	r1
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	6c 01       	movw	r12, r24
     c78:	7b 01       	movw	r14, r22
  if (!nRF24L01p_rx_pipes[pipe].configured)
     c7a:	a4 2e       	mov	r10, r20
     c7c:	b1 2c       	mov	r11, r1
     c7e:	8e e0       	ldi	r24, 0x0E	; 14
     c80:	48 9f       	mul	r20, r24
     c82:	40 01       	movw	r8, r0
     c84:	11 24       	eor	r1, r1
     c86:	d4 01       	movw	r26, r8
     c88:	a1 5e       	subi	r26, 0xE1	; 225
     c8a:	be 4f       	sbci	r27, 0xFE	; 254
     c8c:	4d 01       	movw	r8, r26
     c8e:	8c 91       	ld	r24, X
     c90:	88 23       	and	r24, r24
     c92:	09 f4       	brne	.+2      	; 0xc96 <nRF24L01p_read+0x3e>
     c94:	c4 c0       	rjmp	.+392    	; 0xe1e <nRF24L01p_read+0x1c6>
    return -1;

  if (!nRF24L01p_read_status(pipe))
     c96:	1c 96       	adiw	r26, 0x0c	; 12
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	1d 97       	sbiw	r26, 0x0d	; 13
     c9e:	89 2b       	or	r24, r25
     ca0:	09 f0       	breq	.+2      	; 0xca4 <nRF24L01p_read+0x4c>
     ca2:	c0 c0       	rjmp	.+384    	; 0xe24 <nRF24L01p_read+0x1cc>
    return -2;

  // TODO: Think through calling read, while already reading.
  nRF24L01p_disable();
     ca4:	49 83       	std	Y+1, r20	; 0x01
     ca6:	0e 94 a7 02 	call	0x54e	; 0x54e <nRF24L01p_disable>

  int ret = 0;
  switch (pipe)
     caa:	49 81       	ldd	r20, Y+1	; 0x01
     cac:	42 30       	cpi	r20, 0x02	; 2
     cae:	09 f4       	brne	.+2      	; 0xcb2 <nRF24L01p_read+0x5a>
     cb0:	59 c0       	rjmp	.+178    	; 0xd64 <nRF24L01p_read+0x10c>
     cb2:	f0 f4       	brcc	.+60     	; 0xcf0 <nRF24L01p_read+0x98>
     cb4:	44 23       	and	r20, r20
     cb6:	e9 f1       	breq	.+122    	; 0xd32 <nRF24L01p_read+0xda>
     cb8:	41 30       	cpi	r20, 0x01	; 1
     cba:	09 f0       	breq	.+2      	; 0xcbe <nRF24L01p_read+0x66>
     cbc:	b6 c0       	rjmp	.+364    	; 0xe2a <nRF24L01p_read+0x1d2>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
     cbe:	4f ef       	ldi	r20, 0xFF	; 255
     cc0:	62 e0       	ldi	r22, 0x02	; 2
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P0, nRF24L01p_rx_pipes[pipe].address);
      ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P0, nRF24L01p_rx_pipes[pipe].payload_width);
      break;
    case 1:
      ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P1, TRUE);
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P1, nRF24L01p_rx_pipes[pipe].address);
     cc8:	f4 01       	movw	r30, r8
     cca:	31 96       	adiw	r30, 0x01	; 1

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     ccc:	d4 01       	movw	r26, r8
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	0c 91       	ld	r16, X
     cd2:	11 81       	ldd	r17, Z+1	; 0x01
     cd4:	22 81       	ldd	r18, Z+2	; 0x02
     cd6:	33 81       	ldd	r19, Z+3	; 0x03
     cd8:	44 81       	ldd	r20, Z+4	; 0x04
     cda:	55 81       	ldd	r21, Z+5	; 0x05
     cdc:	66 81       	ldd	r22, Z+6	; 0x06
     cde:	77 81       	ldd	r23, Z+7	; 0x07
     ce0:	8b e0       	ldi	r24, 0x0B	; 11
     ce2:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;

  nRF24L01p_set_register8_bits(reg,
     ce6:	f4 01       	movw	r30, r8
     ce8:	41 85       	ldd	r20, Z+9	; 0x09
     cea:	6f e3       	ldi	r22, 0x3F	; 63
     cec:	82 e1       	ldi	r24, 0x12	; 18
     cee:	84 c0       	rjmp	.+264    	; 0xdf8 <nRF24L01p_read+0x1a0>

  // TODO: Think through calling read, while already reading.
  nRF24L01p_disable();

  int ret = 0;
  switch (pipe)
     cf0:	44 30       	cpi	r20, 0x04	; 4
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <nRF24L01p_read+0x9e>
     cf4:	69 c0       	rjmp	.+210    	; 0xdc8 <nRF24L01p_read+0x170>
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <nRF24L01p_read+0xa2>
     cf8:	4e c0       	rjmp	.+156    	; 0xd96 <nRF24L01p_read+0x13e>
     cfa:	45 30       	cpi	r20, 0x05	; 5
     cfc:	09 f0       	breq	.+2      	; 0xd00 <nRF24L01p_read+0xa8>
     cfe:	95 c0       	rjmp	.+298    	; 0xe2a <nRF24L01p_read+0x1d2>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
     d00:	4f ef       	ldi	r20, 0xFF	; 255
     d02:	60 e2       	ldi	r22, 0x20	; 32
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P4, nRF24L01p_rx_pipes[pipe].address);
      ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P4, nRF24L01p_rx_pipes[pipe].payload_width);
      break;
    case 5:
      ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P5, TRUE);
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P5, nRF24L01p_rx_pipes[pipe].address);
     d0a:	f4 01       	movw	r30, r8
     d0c:	31 96       	adiw	r30, 0x01	; 1

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     d0e:	d4 01       	movw	r26, r8
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	0c 91       	ld	r16, X
     d14:	11 81       	ldd	r17, Z+1	; 0x01
     d16:	22 81       	ldd	r18, Z+2	; 0x02
     d18:	33 81       	ldd	r19, Z+3	; 0x03
     d1a:	44 81       	ldd	r20, Z+4	; 0x04
     d1c:	55 81       	ldd	r21, Z+5	; 0x05
     d1e:	66 81       	ldd	r22, Z+6	; 0x06
     d20:	77 81       	ldd	r23, Z+7	; 0x07
     d22:	8f e0       	ldi	r24, 0x0F	; 15
     d24:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;

  nRF24L01p_set_register8_bits(reg,
     d28:	f4 01       	movw	r30, r8
     d2a:	41 85       	ldd	r20, Z+9	; 0x09
     d2c:	6f e3       	ldi	r22, 0x3F	; 63
     d2e:	86 e1       	ldi	r24, 0x16	; 22
     d30:	63 c0       	rjmp	.+198    	; 0xdf8 <nRF24L01p_read+0x1a0>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
     d32:	4f ef       	ldi	r20, 0xFF	; 255
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
  int ret = 0;
  switch (pipe)
  {
    case 0:
      ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, TRUE);
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P0, nRF24L01p_rx_pipes[pipe].address);
     d3c:	f4 01       	movw	r30, r8
     d3e:	31 96       	adiw	r30, 0x01	; 1

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     d40:	d4 01       	movw	r26, r8
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	0c 91       	ld	r16, X
     d46:	11 81       	ldd	r17, Z+1	; 0x01
     d48:	22 81       	ldd	r18, Z+2	; 0x02
     d4a:	33 81       	ldd	r19, Z+3	; 0x03
     d4c:	44 81       	ldd	r20, Z+4	; 0x04
     d4e:	55 81       	ldd	r21, Z+5	; 0x05
     d50:	66 81       	ldd	r22, Z+6	; 0x06
     d52:	77 81       	ldd	r23, Z+7	; 0x07
     d54:	8a e0       	ldi	r24, 0x0A	; 10
     d56:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;

  nRF24L01p_set_register8_bits(reg,
     d5a:	f4 01       	movw	r30, r8
     d5c:	41 85       	ldd	r20, Z+9	; 0x09
     d5e:	6f e3       	ldi	r22, 0x3F	; 63
     d60:	81 e1       	ldi	r24, 0x11	; 17
     d62:	4a c0       	rjmp	.+148    	; 0xdf8 <nRF24L01p_read+0x1a0>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
     d64:	4f ef       	ldi	r20, 0xFF	; 255
     d66:	64 e0       	ldi	r22, 0x04	; 4
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P1, nRF24L01p_rx_pipes[pipe].address);
      ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P1, nRF24L01p_rx_pipes[pipe].payload_width);
      break;
    case 2:
      ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P2, TRUE);
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P2, nRF24L01p_rx_pipes[pipe].address);
     d6e:	f4 01       	movw	r30, r8
     d70:	31 96       	adiw	r30, 0x01	; 1

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     d72:	d4 01       	movw	r26, r8
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	0c 91       	ld	r16, X
     d78:	11 81       	ldd	r17, Z+1	; 0x01
     d7a:	22 81       	ldd	r18, Z+2	; 0x02
     d7c:	33 81       	ldd	r19, Z+3	; 0x03
     d7e:	44 81       	ldd	r20, Z+4	; 0x04
     d80:	55 81       	ldd	r21, Z+5	; 0x05
     d82:	66 81       	ldd	r22, Z+6	; 0x06
     d84:	77 81       	ldd	r23, Z+7	; 0x07
     d86:	8c e0       	ldi	r24, 0x0C	; 12
     d88:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;

  nRF24L01p_set_register8_bits(reg,
     d8c:	f4 01       	movw	r30, r8
     d8e:	41 85       	ldd	r20, Z+9	; 0x09
     d90:	6f e3       	ldi	r22, 0x3F	; 63
     d92:	83 e1       	ldi	r24, 0x13	; 19
     d94:	31 c0       	rjmp	.+98     	; 0xdf8 <nRF24L01p_read+0x1a0>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
     d96:	4f ef       	ldi	r20, 0xFF	; 255
     d98:	68 e0       	ldi	r22, 0x08	; 8
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P2, nRF24L01p_rx_pipes[pipe].address);
      ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P2, nRF24L01p_rx_pipes[pipe].payload_width);
      break;
    case 3:
      ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P3, TRUE);
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P3, nRF24L01p_rx_pipes[pipe].address);
     da0:	f4 01       	movw	r30, r8
     da2:	31 96       	adiw	r30, 0x01	; 1

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     da4:	d4 01       	movw	r26, r8
     da6:	11 96       	adiw	r26, 0x01	; 1
     da8:	0c 91       	ld	r16, X
     daa:	11 81       	ldd	r17, Z+1	; 0x01
     dac:	22 81       	ldd	r18, Z+2	; 0x02
     dae:	33 81       	ldd	r19, Z+3	; 0x03
     db0:	44 81       	ldd	r20, Z+4	; 0x04
     db2:	55 81       	ldd	r21, Z+5	; 0x05
     db4:	66 81       	ldd	r22, Z+6	; 0x06
     db6:	77 81       	ldd	r23, Z+7	; 0x07
     db8:	8d e0       	ldi	r24, 0x0D	; 13
     dba:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;

  nRF24L01p_set_register8_bits(reg,
     dbe:	f4 01       	movw	r30, r8
     dc0:	41 85       	ldd	r20, Z+9	; 0x09
     dc2:	6f e3       	ldi	r22, 0x3F	; 63
     dc4:	84 e1       	ldi	r24, 0x14	; 20
     dc6:	18 c0       	rjmp	.+48     	; 0xdf8 <nRF24L01p_read+0x1a0>
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
        mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
    return -1;

  nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
     dc8:	4f ef       	ldi	r20, 0xFF	; 255
     dca:	60 e1       	ldi	r22, 0x10	; 16
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P3, nRF24L01p_rx_pipes[pipe].address);
      ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P3, nRF24L01p_rx_pipes[pipe].payload_width);
      break;
    case 4:
      ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P4, TRUE);
      ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P4, nRF24L01p_rx_pipes[pipe].address);
     dd2:	f4 01       	movw	r30, r8
     dd4:	31 96       	adiw	r30, 0x01	; 1

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     dd6:	d4 01       	movw	r26, r8
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	0c 91       	ld	r16, X
     ddc:	11 81       	ldd	r17, Z+1	; 0x01
     dde:	22 81       	ldd	r18, Z+2	; 0x02
     de0:	33 81       	ldd	r19, Z+3	; 0x03
     de2:	44 81       	ldd	r20, Z+4	; 0x04
     de4:	55 81       	ldd	r21, Z+5	; 0x05
     de6:	66 81       	ldd	r22, Z+6	; 0x06
     de8:	77 81       	ldd	r23, Z+7	; 0x07
     dea:	8e e0       	ldi	r24, 0x0E	; 14
     dec:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>
        reg == nRF24L01p_REGISTER_RX_PW_P3 ||
        reg == nRF24L01p_REGISTER_RX_PW_P4 ||
        reg == nRF24L01p_REGISTER_RX_PW_P5))
    return -1;

  nRF24L01p_set_register8_bits(reg,
     df0:	f4 01       	movw	r30, r8
     df2:	41 85       	ldd	r20, Z+9	; 0x09
     df4:	6f e3       	ldi	r22, 0x3F	; 63
     df6:	85 e1       	ldi	r24, 0x15	; 21
     df8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01p_set_register8_bits>
  }

  if (ret != 0)
    return -3;

  nRF24L01p_rx_pipes[pipe].data = dst;
     dfc:	8e e0       	ldi	r24, 0x0E	; 14
     dfe:	8a 9d       	mul	r24, r10
     e00:	f0 01       	movw	r30, r0
     e02:	8b 9d       	mul	r24, r11
     e04:	f0 0d       	add	r31, r0
     e06:	11 24       	eor	r1, r1
     e08:	e1 5e       	subi	r30, 0xE1	; 225
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	d3 86       	std	Z+11, r13	; 0x0b
     e0e:	c2 86       	std	Z+10, r12	; 0x0a
  nRF24L01p_rx_pipes[pipe].remaining = count;
     e10:	f5 86       	std	Z+13, r15	; 0x0d
     e12:	e4 86       	std	Z+12, r14	; 0x0c

  // Start receiving if we weren't already.
  nRF24L01p_enable();
     e14:	0e 94 9f 02 	call	0x53e	; 0x53e <nRF24L01p_enable>

  return 0;
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	08 c0       	rjmp	.+16     	; 0xe2e <nRF24L01p_read+0x1d6>
// nRF24L01p_read implementation.
//
int nRF24L01p_read(byte *restrict dst, size_t count, byte pipe)
{
  if (!nRF24L01p_rx_pipes[pipe].configured)
    return -1;
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	9f ef       	ldi	r25, 0xFF	; 255
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <nRF24L01p_read+0x1d6>

  if (!nRF24L01p_read_status(pipe))
    return -2;
     e24:	8e ef       	ldi	r24, 0xFE	; 254
     e26:	9f ef       	ldi	r25, 0xFF	; 255
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <nRF24L01p_read+0x1d6>
    default:
      ret = -1;
  }

  if (ret != 0)
    return -3;
     e2a:	8d ef       	ldi	r24, 0xFD	; 253
     e2c:	9f ef       	ldi	r25, 0xFF	; 255

  // Start receiving if we weren't already.
  nRF24L01p_enable();

  return 0;
}
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	08 95       	ret

00000e4a <nRF24L01p_write>:

//
// nRF24L01p_write implementation.
//
int nRF24L01p_write(const byte *restrict src, size_t count, byte pipe)
{
     e4a:	5f 92       	push	r5
     e4c:	6f 92       	push	r6
     e4e:	7f 92       	push	r7
     e50:	8f 92       	push	r8
     e52:	9f 92       	push	r9
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	7c 01       	movw	r14, r24
     e6a:	eb 01       	movw	r28, r22
  if (!nRF24L01p_rx_pipes[pipe].configured)
     e6c:	8e e0       	ldi	r24, 0x0E	; 14
     e6e:	48 9f       	mul	r20, r24
     e70:	d0 01       	movw	r26, r0
     e72:	11 24       	eor	r1, r1
     e74:	a1 5e       	subi	r26, 0xE1	; 225
     e76:	be 4f       	sbci	r27, 0xFE	; 254
     e78:	8c 91       	ld	r24, X
     e7a:	88 23       	and	r24, r24
     e7c:	09 f4       	brne	.+2      	; 0xe80 <nRF24L01p_write+0x36>
     e7e:	49 c0       	rjmp	.+146    	; 0xf12 <nRF24L01p_write+0xc8>
    return -1;

  if (!nRF24L01p_write_status())
     e80:	80 91 7e 01 	lds	r24, 0x017E
     e84:	90 91 7f 01 	lds	r25, 0x017F
     e88:	89 2b       	or	r24, r25
     e8a:	09 f0       	breq	.+2      	; 0xe8e <nRF24L01p_write+0x44>
     e8c:	45 c0       	rjmp	.+138    	; 0xf18 <nRF24L01p_write+0xce>
    return -2;

  // TODO: Dynamic width.

  nRF24L01p_tx_pipe.address = nRF24L01p_rx_pipes[pipe].address;
     e8e:	fd 01       	movw	r30, r26
     e90:	31 96       	adiw	r30, 0x01	; 1
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	6c 90       	ld	r6, X
     e96:	11 97       	sbiw	r26, 0x01	; 1
     e98:	71 80       	ldd	r7, Z+1	; 0x01
     e9a:	82 80       	ldd	r8, Z+2	; 0x02
     e9c:	93 80       	ldd	r9, Z+3	; 0x03
     e9e:	a4 80       	ldd	r10, Z+4	; 0x04
     ea0:	b5 80       	ldd	r11, Z+5	; 0x05
     ea2:	c6 80       	ldd	r12, Z+6	; 0x06
     ea4:	d7 80       	ldd	r13, Z+7	; 0x07
     ea6:	60 92 73 01 	sts	0x0173, r6
     eaa:	70 92 74 01 	sts	0x0174, r7
     eae:	80 92 75 01 	sts	0x0175, r8
     eb2:	90 92 76 01 	sts	0x0176, r9
     eb6:	a0 92 77 01 	sts	0x0177, r10
     eba:	b0 92 78 01 	sts	0x0178, r11
     ebe:	c0 92 79 01 	sts	0x0179, r12
     ec2:	d0 92 7a 01 	sts	0x017A, r13
  nRF24L01p_tx_pipe.payload_width = nRF24L01p_rx_pipes[pipe].payload_width;
     ec6:	19 96       	adiw	r26, 0x09	; 9
     ec8:	5c 90       	ld	r5, X
     eca:	50 92 7b 01 	sts	0x017B, r5

  // Datasheet says to always use RX_ADDR_P0
  nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, TRUE);
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	0e 94 07 04 	call	0x80e	; 0x80e <nRF24L01p_config_rx>

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     ed6:	83 01       	movw	r16, r6
     ed8:	94 01       	movw	r18, r8
     eda:	a5 01       	movw	r20, r10
     edc:	b6 01       	movw	r22, r12
     ede:	8a e0       	ldi	r24, 0x0A	; 10
     ee0:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>

  // Datasheet says to always use RX_ADDR_P0
  nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, TRUE);
  nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P0,
                           nRF24L01p_tx_pipe.address);
  nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_ADDR_P0,
     ee4:	65 2d       	mov	r22, r5
     ee6:	8a e0       	ldi	r24, 0x0A	; 10
     ee8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <nRF24L01p_config_payload_width>

  // TODO: error checking for bad addresses.

  // TODO: This is broken, need to set 8 bit registers for
  // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
  nRF24L01p_set_register40(reg, address);
     eec:	94 01       	movw	r18, r8
     eee:	a5 01       	movw	r20, r10
     ef0:	b6 01       	movw	r22, r12
     ef2:	80 e1       	ldi	r24, 0x10	; 16
     ef4:	0e 94 d6 05 	call	0xbac	; 0xbac <nRF24L01p_set_register40>
                                 nRF24L01p_tx_pipe.payload_width);

  nRF24L01p_config_address(nRF24L01p_REGISTER_TX_ADDR,
                           nRF24L01p_tx_pipe.address);

  nRF24L01p_tx_pipe.data = src;
     ef8:	f0 92 7d 01 	sts	0x017D, r15
     efc:	e0 92 7c 01 	sts	0x017C, r14
  nRF24L01p_tx_pipe.remaining = count;
     f00:	d0 93 7f 01 	sts	0x017F, r29
     f04:	c0 93 7e 01 	sts	0x017E, r28

  // Fill TX FIFO, then start transmitting.
  nRF24L01p_process_tx_payload();
     f08:	0e 94 8b 04 	call	0x916	; 0x916 <nRF24L01p_process_tx_payload>

  return 0;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <nRF24L01p_write+0xd2>
// nRF24L01p_write implementation.
//
int nRF24L01p_write(const byte *restrict src, size_t count, byte pipe)
{
  if (!nRF24L01p_rx_pipes[pipe].configured)
    return -1;
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <nRF24L01p_write+0xd2>

  if (!nRF24L01p_write_status())
    return -2;
     f18:	8e ef       	ldi	r24, 0xFE	; 254
     f1a:	9f ef       	ldi	r25, 0xFF	; 255

  // Fill TX FIFO, then start transmitting.
  nRF24L01p_process_tx_payload();

  return 0;
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	08 95       	ret

00000f3c <main>:
#include <servo.h>
#include <nrf24l01.h>

#define UPDATE_FREQ_HZ 10.0

int main (void) {
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	eb 97       	sbiw	r28, 0x3b	; 59
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	8f ee       	ldi	r24, 0xEF	; 239
     f52:	90 ea       	ldi	r25, 0xA0	; 160
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <main+0x18>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <main+0x1e>
     f5a:	00 00       	nop
  _delay_us(nRF24L01p_TIMING_INITIAL_US);
  nRF24L01p_init(0, 0);
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 37 05 	call	0xa6e	; 0xa6e <nRF24L01p_init>
  nRF24L01p_config_pipe(nRF24L01p_PIPE_0, 0xA7A7A7A7A7, 32);
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	e8 2e       	mov	r14, r24
     f6c:	07 ea       	ldi	r16, 0xA7	; 167
     f6e:	17 ea       	ldi	r17, 0xA7	; 167
     f70:	27 ea       	ldi	r18, 0xA7	; 167
     f72:	37 ea       	ldi	r19, 0xA7	; 167
     f74:	47 ea       	ldi	r20, 0xA7	; 167
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <nRF24L01p_config_pipe>
  nRF24L01p_config_channel(100);
     f82:	84 e6       	ldi	r24, 0x64	; 100
     f84:	0e 94 4a 04 	call	0x894	; 0x894 <nRF24L01p_config_channel>
  nRF24L01p_config_transceiver_mode(nRF24L01p_VALUE_CONFIG_PRIM_RX);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <nRF24L01p_config_transceiver_mode>

  DDRB |= 0x01;
     f8e:	20 9a       	sbi	0x04, 0	; 4
  PORTB |= 0x01;
     f90:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f92:	9f ef       	ldi	r25, 0xFF	; 255
     f94:	23 ed       	ldi	r18, 0xD3	; 211
     f96:	80 e3       	ldi	r24, 0x30	; 48
     f98:	91 50       	subi	r25, 0x01	; 1
     f9a:	20 40       	sbci	r18, 0x00	; 0
     f9c:	80 40       	sbci	r24, 0x00	; 0
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <main+0x5c>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <main+0x66>
     fa2:	00 00       	nop
  _delay_ms(1000);
  PORTB &= ~0x01;
     fa4:	28 98       	cbi	0x05, 0	; 5

  servo_motion_seq seq;
  servo_motion_seq_init(0, &seq, 4);
     fa6:	44 e0       	ldi	r20, 0x04	; 4
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	be 01       	movw	r22, r28
     fac:	6f 5d       	subi	r22, 0xDF	; 223
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 19 01 	call	0x232	; 0x232 <servo_motion_seq_init>
  seq.speed=MAKE_FIXED(1/UPDATE_FREQ_HZ);
     fb6:	88 ee       	ldi	r24, 0xE8	; 232
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	98 ab       	std	Y+48, r25	; 0x30
     fbc:	8f a7       	std	Y+47, r24	; 0x2f
  servo_motion_seq_pattern(&seq, "0AaA");
     fbe:	69 e1       	ldi	r22, 0x19	; 25
     fc0:	71 e0       	ldi	r23, 0x01	; 1
     fc2:	ce 01       	movw	r24, r28
     fc4:	81 96       	adiw	r24, 0x21	; 33
     fc6:	0e 94 38 01 	call	0x270	; 0x270 <servo_motion_seq_pattern>

  unsigned char message[32];

  for(;;) {
    servo_motion_seq_update(&seq);
     fca:	ce 01       	movw	r24, r28
     fcc:	81 96       	adiw	r24, 0x21	; 33
     fce:	0e 94 46 01 	call	0x28c	; 0x28c <servo_motion_seq_update>

    if (nRF24L01p_read_status(nRF24L01p_PIPE_0))
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 65 02 	call	0x4ca	; 0x4ca <nRF24L01p_read_status>
     fd8:	89 2b       	or	r24, r25
     fda:	f1 f0       	breq	.+60     	; 0x1018 <main+0xdc>
    {
      nRF24L01p_read(message, 32, nRF24L01p_PIPE_0);
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	60 e2       	ldi	r22, 0x20	; 32
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	ce 01       	movw	r24, r28
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	0e 94 2c 06 	call	0xc58	; 0xc58 <nRF24L01p_read>
      
      if (message[0]=='H' && 
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	88 34       	cpi	r24, 0x48	; 72
     fee:	a1 f4       	brne	.+40     	; 0x1018 <main+0xdc>
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	85 34       	cpi	r24, 0x45	; 69
     ff4:	89 f4       	brne	.+34     	; 0x1018 <main+0xdc>
	  message[1]=='E' && 
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	8c 34       	cpi	r24, 0x4C	; 76
     ffa:	71 f4       	brne	.+28     	; 0x1018 <main+0xdc>
	  message[2]=='L' && 
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	8f 34       	cpi	r24, 0x4F	; 79
    1000:	59 f4       	brne	.+22     	; 0x1018 <main+0xdc>
	  message[3]=='O') {
	PORTB |= 0x01;
    1002:	28 9a       	sbi	0x05, 0	; 5
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	21 ee       	ldi	r18, 0xE1	; 225
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	20 40       	sbci	r18, 0x00	; 0
    100e:	80 40       	sbci	r24, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <main+0xce>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <main+0xd8>
    1014:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~0x01;
    1016:	28 98       	cbi	0x05, 0	; 5
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	21 ee       	ldi	r18, 0xE1	; 225
    101c:	84 e0       	ldi	r24, 0x04	; 4
    101e:	91 50       	subi	r25, 0x01	; 1
    1020:	20 40       	sbci	r18, 0x00	; 0
    1022:	80 40       	sbci	r24, 0x00	; 0
    1024:	e1 f7       	brne	.-8      	; 0x101e <main+0xe2>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <main+0xec>
    1028:	00 00       	nop
    102a:	cf cf       	rjmp	.-98     	; 0xfca <main+0x8e>

0000102c <__floatunsisf>:
    102c:	e8 94       	clt
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <__floatsisf+0x12>

00001030 <__floatsisf>:
    1030:	97 fb       	bst	r25, 7
    1032:	3e f4       	brtc	.+14     	; 0x1042 <__floatsisf+0x12>
    1034:	90 95       	com	r25
    1036:	80 95       	com	r24
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 4f       	sbci	r24, 0xFF	; 255
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	99 23       	and	r25, r25
    1044:	a9 f0       	breq	.+42     	; 0x1070 <__floatsisf+0x40>
    1046:	f9 2f       	mov	r31, r25
    1048:	96 e9       	ldi	r25, 0x96	; 150
    104a:	bb 27       	eor	r27, r27
    104c:	93 95       	inc	r25
    104e:	f6 95       	lsr	r31
    1050:	87 95       	ror	r24
    1052:	77 95       	ror	r23
    1054:	67 95       	ror	r22
    1056:	b7 95       	ror	r27
    1058:	f1 11       	cpse	r31, r1
    105a:	f8 cf       	rjmp	.-16     	; 0x104c <__floatsisf+0x1c>
    105c:	fa f4       	brpl	.+62     	; 0x109c <__floatsisf+0x6c>
    105e:	bb 0f       	add	r27, r27
    1060:	11 f4       	brne	.+4      	; 0x1066 <__floatsisf+0x36>
    1062:	60 ff       	sbrs	r22, 0
    1064:	1b c0       	rjmp	.+54     	; 0x109c <__floatsisf+0x6c>
    1066:	6f 5f       	subi	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	16 c0       	rjmp	.+44     	; 0x109c <__floatsisf+0x6c>
    1070:	88 23       	and	r24, r24
    1072:	11 f0       	breq	.+4      	; 0x1078 <__floatsisf+0x48>
    1074:	96 e9       	ldi	r25, 0x96	; 150
    1076:	11 c0       	rjmp	.+34     	; 0x109a <__floatsisf+0x6a>
    1078:	77 23       	and	r23, r23
    107a:	21 f0       	breq	.+8      	; 0x1084 <__floatsisf+0x54>
    107c:	9e e8       	ldi	r25, 0x8E	; 142
    107e:	87 2f       	mov	r24, r23
    1080:	76 2f       	mov	r23, r22
    1082:	05 c0       	rjmp	.+10     	; 0x108e <__floatsisf+0x5e>
    1084:	66 23       	and	r22, r22
    1086:	71 f0       	breq	.+28     	; 0x10a4 <__floatsisf+0x74>
    1088:	96 e8       	ldi	r25, 0x86	; 134
    108a:	86 2f       	mov	r24, r22
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	2a f0       	brmi	.+10     	; 0x109c <__floatsisf+0x6c>
    1092:	9a 95       	dec	r25
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	da f7       	brpl	.-10     	; 0x1092 <__floatsisf+0x62>
    109c:	88 0f       	add	r24, r24
    109e:	96 95       	lsr	r25
    10a0:	87 95       	ror	r24
    10a2:	97 f9       	bld	r25, 7
    10a4:	08 95       	ret

000010a6 <__gesf2>:
    10a6:	03 d0       	rcall	.+6      	; 0x10ae <__fp_cmp>
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <__gesf2+0x6>
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__fp_cmp>:
    10ae:	99 0f       	add	r25, r25
    10b0:	00 08       	sbc	r0, r0
    10b2:	55 0f       	add	r21, r21
    10b4:	aa 0b       	sbc	r26, r26
    10b6:	e0 e8       	ldi	r30, 0x80	; 128
    10b8:	fe ef       	ldi	r31, 0xFE	; 254
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	e8 07       	cpc	r30, r24
    10c0:	f9 07       	cpc	r31, r25
    10c2:	c0 f0       	brcs	.+48     	; 0x10f4 <__fp_cmp+0x46>
    10c4:	12 16       	cp	r1, r18
    10c6:	13 06       	cpc	r1, r19
    10c8:	e4 07       	cpc	r30, r20
    10ca:	f5 07       	cpc	r31, r21
    10cc:	98 f0       	brcs	.+38     	; 0x10f4 <__fp_cmp+0x46>
    10ce:	62 1b       	sub	r22, r18
    10d0:	73 0b       	sbc	r23, r19
    10d2:	84 0b       	sbc	r24, r20
    10d4:	95 0b       	sbc	r25, r21
    10d6:	39 f4       	brne	.+14     	; 0x10e6 <__fp_cmp+0x38>
    10d8:	0a 26       	eor	r0, r26
    10da:	61 f0       	breq	.+24     	; 0x10f4 <__fp_cmp+0x46>
    10dc:	23 2b       	or	r18, r19
    10de:	24 2b       	or	r18, r20
    10e0:	25 2b       	or	r18, r21
    10e2:	21 f4       	brne	.+8      	; 0x10ec <__fp_cmp+0x3e>
    10e4:	08 95       	ret
    10e6:	0a 26       	eor	r0, r26
    10e8:	09 f4       	brne	.+2      	; 0x10ec <__fp_cmp+0x3e>
    10ea:	a1 40       	sbci	r26, 0x01	; 1
    10ec:	a6 95       	lsr	r26
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	81 1d       	adc	r24, r1
    10f2:	81 1d       	adc	r24, r1
    10f4:	08 95       	ret

000010f6 <__udivmodhi4>:
    10f6:	aa 1b       	sub	r26, r26
    10f8:	bb 1b       	sub	r27, r27
    10fa:	51 e1       	ldi	r21, 0x11	; 17
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <__udivmodhi4_ep>

000010fe <__udivmodhi4_loop>:
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	a6 17       	cp	r26, r22
    1104:	b7 07       	cpc	r27, r23
    1106:	10 f0       	brcs	.+4      	; 0x110c <__udivmodhi4_ep>
    1108:	a6 1b       	sub	r26, r22
    110a:	b7 0b       	sbc	r27, r23

0000110c <__udivmodhi4_ep>:
    110c:	88 1f       	adc	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	5a 95       	dec	r21
    1112:	a9 f7       	brne	.-22     	; 0x10fe <__udivmodhi4_loop>
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	08 95       	ret

0000111e <__divmodhi4>:
    111e:	97 fb       	bst	r25, 7
    1120:	07 2e       	mov	r0, r23
    1122:	16 f4       	brtc	.+4      	; 0x1128 <__divmodhi4+0xa>
    1124:	00 94       	com	r0
    1126:	07 d0       	rcall	.+14     	; 0x1136 <__divmodhi4_neg1>
    1128:	77 fd       	sbrc	r23, 7
    112a:	09 d0       	rcall	.+18     	; 0x113e <__divmodhi4_neg2>
    112c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodhi4>
    1130:	07 fc       	sbrc	r0, 7
    1132:	05 d0       	rcall	.+10     	; 0x113e <__divmodhi4_neg2>
    1134:	3e f4       	brtc	.+14     	; 0x1144 <__divmodhi4_exit>

00001136 <__divmodhi4_neg1>:
    1136:	90 95       	com	r25
    1138:	81 95       	neg	r24
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	08 95       	ret

0000113e <__divmodhi4_neg2>:
    113e:	70 95       	com	r23
    1140:	61 95       	neg	r22
    1142:	7f 4f       	sbci	r23, 0xFF	; 255

00001144 <__divmodhi4_exit>:
    1144:	08 95       	ret

00001146 <__ashldi3>:
    1146:	0f 93       	push	r16
    1148:	08 30       	cpi	r16, 0x08	; 8
    114a:	90 f0       	brcs	.+36     	; 0x1170 <__ashldi3+0x2a>
    114c:	98 2f       	mov	r25, r24
    114e:	87 2f       	mov	r24, r23
    1150:	76 2f       	mov	r23, r22
    1152:	65 2f       	mov	r22, r21
    1154:	54 2f       	mov	r21, r20
    1156:	43 2f       	mov	r20, r19
    1158:	32 2f       	mov	r19, r18
    115a:	22 27       	eor	r18, r18
    115c:	08 50       	subi	r16, 0x08	; 8
    115e:	f4 cf       	rjmp	.-24     	; 0x1148 <__ashldi3+0x2>
    1160:	22 0f       	add	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	44 1f       	adc	r20, r20
    1166:	55 1f       	adc	r21, r21
    1168:	66 1f       	adc	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	88 1f       	adc	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 95       	dec	r16
    1172:	b2 f7       	brpl	.-20     	; 0x1160 <__ashldi3+0x1a>
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <__ashrdi3>:
    1178:	97 fb       	bst	r25, 7
    117a:	10 f8       	bld	r1, 0

0000117c <__lshrdi3>:
    117c:	16 94       	lsr	r1
    117e:	00 08       	sbc	r0, r0
    1180:	0f 93       	push	r16
    1182:	08 30       	cpi	r16, 0x08	; 8
    1184:	98 f0       	brcs	.+38     	; 0x11ac <__lshrdi3+0x30>
    1186:	08 50       	subi	r16, 0x08	; 8
    1188:	23 2f       	mov	r18, r19
    118a:	34 2f       	mov	r19, r20
    118c:	45 2f       	mov	r20, r21
    118e:	56 2f       	mov	r21, r22
    1190:	67 2f       	mov	r22, r23
    1192:	78 2f       	mov	r23, r24
    1194:	89 2f       	mov	r24, r25
    1196:	90 2d       	mov	r25, r0
    1198:	f4 cf       	rjmp	.-24     	; 0x1182 <__lshrdi3+0x6>
    119a:	05 94       	asr	r0
    119c:	97 95       	ror	r25
    119e:	87 95       	ror	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	57 95       	ror	r21
    11a6:	47 95       	ror	r20
    11a8:	37 95       	ror	r19
    11aa:	27 95       	ror	r18
    11ac:	0a 95       	dec	r16
    11ae:	aa f7       	brpl	.-22     	; 0x119a <__lshrdi3+0x1e>
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <malloc>:
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	91 05       	cpc	r25, r1
    11bc:	10 f4       	brcc	.+4      	; 0x11c2 <malloc+0xe>
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	e0 91 82 01 	lds	r30, 0x0182
    11c6:	f0 91 83 01 	lds	r31, 0x0183
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	30 97       	sbiw	r30, 0x00	; 0
    11d4:	39 f1       	breq	.+78     	; 0x1224 <malloc+0x70>
    11d6:	40 81       	ld	r20, Z
    11d8:	51 81       	ldd	r21, Z+1	; 0x01
    11da:	48 17       	cp	r20, r24
    11dc:	59 07       	cpc	r21, r25
    11de:	b8 f0       	brcs	.+46     	; 0x120e <malloc+0x5a>
    11e0:	48 17       	cp	r20, r24
    11e2:	59 07       	cpc	r21, r25
    11e4:	71 f4       	brne	.+28     	; 0x1202 <malloc+0x4e>
    11e6:	82 81       	ldd	r24, Z+2	; 0x02
    11e8:	93 81       	ldd	r25, Z+3	; 0x03
    11ea:	10 97       	sbiw	r26, 0x00	; 0
    11ec:	29 f0       	breq	.+10     	; 0x11f8 <malloc+0x44>
    11ee:	13 96       	adiw	r26, 0x03	; 3
    11f0:	9c 93       	st	X, r25
    11f2:	8e 93       	st	-X, r24
    11f4:	12 97       	sbiw	r26, 0x02	; 2
    11f6:	2c c0       	rjmp	.+88     	; 0x1250 <malloc+0x9c>
    11f8:	90 93 83 01 	sts	0x0183, r25
    11fc:	80 93 82 01 	sts	0x0182, r24
    1200:	27 c0       	rjmp	.+78     	; 0x1250 <malloc+0x9c>
    1202:	21 15       	cp	r18, r1
    1204:	31 05       	cpc	r19, r1
    1206:	31 f0       	breq	.+12     	; 0x1214 <malloc+0x60>
    1208:	42 17       	cp	r20, r18
    120a:	53 07       	cpc	r21, r19
    120c:	18 f0       	brcs	.+6      	; 0x1214 <malloc+0x60>
    120e:	a9 01       	movw	r20, r18
    1210:	db 01       	movw	r26, r22
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <malloc+0x62>
    1214:	ef 01       	movw	r28, r30
    1216:	9a 01       	movw	r18, r20
    1218:	bd 01       	movw	r22, r26
    121a:	df 01       	movw	r26, r30
    121c:	02 80       	ldd	r0, Z+2	; 0x02
    121e:	f3 81       	ldd	r31, Z+3	; 0x03
    1220:	e0 2d       	mov	r30, r0
    1222:	d7 cf       	rjmp	.-82     	; 0x11d2 <malloc+0x1e>
    1224:	21 15       	cp	r18, r1
    1226:	31 05       	cpc	r19, r1
    1228:	f9 f0       	breq	.+62     	; 0x1268 <malloc+0xb4>
    122a:	28 1b       	sub	r18, r24
    122c:	39 0b       	sbc	r19, r25
    122e:	24 30       	cpi	r18, 0x04	; 4
    1230:	31 05       	cpc	r19, r1
    1232:	80 f4       	brcc	.+32     	; 0x1254 <malloc+0xa0>
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	9b 81       	ldd	r25, Y+3	; 0x03
    1238:	61 15       	cp	r22, r1
    123a:	71 05       	cpc	r23, r1
    123c:	21 f0       	breq	.+8      	; 0x1246 <malloc+0x92>
    123e:	fb 01       	movw	r30, r22
    1240:	93 83       	std	Z+3, r25	; 0x03
    1242:	82 83       	std	Z+2, r24	; 0x02
    1244:	04 c0       	rjmp	.+8      	; 0x124e <malloc+0x9a>
    1246:	90 93 83 01 	sts	0x0183, r25
    124a:	80 93 82 01 	sts	0x0182, r24
    124e:	fe 01       	movw	r30, r28
    1250:	32 96       	adiw	r30, 0x02	; 2
    1252:	44 c0       	rjmp	.+136    	; 0x12dc <malloc+0x128>
    1254:	fe 01       	movw	r30, r28
    1256:	e2 0f       	add	r30, r18
    1258:	f3 1f       	adc	r31, r19
    125a:	81 93       	st	Z+, r24
    125c:	91 93       	st	Z+, r25
    125e:	22 50       	subi	r18, 0x02	; 2
    1260:	31 09       	sbc	r19, r1
    1262:	39 83       	std	Y+1, r19	; 0x01
    1264:	28 83       	st	Y, r18
    1266:	3a c0       	rjmp	.+116    	; 0x12dc <malloc+0x128>
    1268:	20 91 80 01 	lds	r18, 0x0180
    126c:	30 91 81 01 	lds	r19, 0x0181
    1270:	23 2b       	or	r18, r19
    1272:	41 f4       	brne	.+16     	; 0x1284 <malloc+0xd0>
    1274:	20 91 15 01 	lds	r18, 0x0115
    1278:	30 91 16 01 	lds	r19, 0x0116
    127c:	30 93 81 01 	sts	0x0181, r19
    1280:	20 93 80 01 	sts	0x0180, r18
    1284:	20 91 13 01 	lds	r18, 0x0113
    1288:	30 91 14 01 	lds	r19, 0x0114
    128c:	21 15       	cp	r18, r1
    128e:	31 05       	cpc	r19, r1
    1290:	41 f4       	brne	.+16     	; 0x12a2 <malloc+0xee>
    1292:	2d b7       	in	r18, 0x3d	; 61
    1294:	3e b7       	in	r19, 0x3e	; 62
    1296:	40 91 17 01 	lds	r20, 0x0117
    129a:	50 91 18 01 	lds	r21, 0x0118
    129e:	24 1b       	sub	r18, r20
    12a0:	35 0b       	sbc	r19, r21
    12a2:	e0 91 80 01 	lds	r30, 0x0180
    12a6:	f0 91 81 01 	lds	r31, 0x0181
    12aa:	e2 17       	cp	r30, r18
    12ac:	f3 07       	cpc	r31, r19
    12ae:	a0 f4       	brcc	.+40     	; 0x12d8 <malloc+0x124>
    12b0:	2e 1b       	sub	r18, r30
    12b2:	3f 0b       	sbc	r19, r31
    12b4:	28 17       	cp	r18, r24
    12b6:	39 07       	cpc	r19, r25
    12b8:	78 f0       	brcs	.+30     	; 0x12d8 <malloc+0x124>
    12ba:	ac 01       	movw	r20, r24
    12bc:	4e 5f       	subi	r20, 0xFE	; 254
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	24 17       	cp	r18, r20
    12c2:	35 07       	cpc	r19, r21
    12c4:	48 f0       	brcs	.+18     	; 0x12d8 <malloc+0x124>
    12c6:	4e 0f       	add	r20, r30
    12c8:	5f 1f       	adc	r21, r31
    12ca:	50 93 81 01 	sts	0x0181, r21
    12ce:	40 93 80 01 	sts	0x0180, r20
    12d2:	81 93       	st	Z+, r24
    12d4:	91 93       	st	Z+, r25
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <malloc+0x128>
    12d8:	e0 e0       	ldi	r30, 0x00	; 0
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	cf 01       	movw	r24, r30
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <free>:
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	09 f4       	brne	.+2      	; 0x12ee <free+0xa>
    12ec:	87 c0       	rjmp	.+270    	; 0x13fc <free+0x118>
    12ee:	fc 01       	movw	r30, r24
    12f0:	32 97       	sbiw	r30, 0x02	; 2
    12f2:	13 82       	std	Z+3, r1	; 0x03
    12f4:	12 82       	std	Z+2, r1	; 0x02
    12f6:	c0 91 82 01 	lds	r28, 0x0182
    12fa:	d0 91 83 01 	lds	r29, 0x0183
    12fe:	20 97       	sbiw	r28, 0x00	; 0
    1300:	81 f4       	brne	.+32     	; 0x1322 <free+0x3e>
    1302:	20 81       	ld	r18, Z
    1304:	31 81       	ldd	r19, Z+1	; 0x01
    1306:	28 0f       	add	r18, r24
    1308:	39 1f       	adc	r19, r25
    130a:	80 91 80 01 	lds	r24, 0x0180
    130e:	90 91 81 01 	lds	r25, 0x0181
    1312:	82 17       	cp	r24, r18
    1314:	93 07       	cpc	r25, r19
    1316:	79 f5       	brne	.+94     	; 0x1376 <free+0x92>
    1318:	f0 93 81 01 	sts	0x0181, r31
    131c:	e0 93 80 01 	sts	0x0180, r30
    1320:	6d c0       	rjmp	.+218    	; 0x13fc <free+0x118>
    1322:	de 01       	movw	r26, r28
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	ae 17       	cp	r26, r30
    132a:	bf 07       	cpc	r27, r31
    132c:	50 f4       	brcc	.+20     	; 0x1342 <free+0x5e>
    132e:	12 96       	adiw	r26, 0x02	; 2
    1330:	4d 91       	ld	r20, X+
    1332:	5c 91       	ld	r21, X
    1334:	13 97       	sbiw	r26, 0x03	; 3
    1336:	9d 01       	movw	r18, r26
    1338:	41 15       	cp	r20, r1
    133a:	51 05       	cpc	r21, r1
    133c:	09 f1       	breq	.+66     	; 0x1380 <free+0x9c>
    133e:	da 01       	movw	r26, r20
    1340:	f3 cf       	rjmp	.-26     	; 0x1328 <free+0x44>
    1342:	b3 83       	std	Z+3, r27	; 0x03
    1344:	a2 83       	std	Z+2, r26	; 0x02
    1346:	40 81       	ld	r20, Z
    1348:	51 81       	ldd	r21, Z+1	; 0x01
    134a:	84 0f       	add	r24, r20
    134c:	95 1f       	adc	r25, r21
    134e:	8a 17       	cp	r24, r26
    1350:	9b 07       	cpc	r25, r27
    1352:	71 f4       	brne	.+28     	; 0x1370 <free+0x8c>
    1354:	8d 91       	ld	r24, X+
    1356:	9c 91       	ld	r25, X
    1358:	11 97       	sbiw	r26, 0x01	; 1
    135a:	84 0f       	add	r24, r20
    135c:	95 1f       	adc	r25, r21
    135e:	02 96       	adiw	r24, 0x02	; 2
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	80 83       	st	Z, r24
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	8d 91       	ld	r24, X+
    1368:	9c 91       	ld	r25, X
    136a:	13 97       	sbiw	r26, 0x03	; 3
    136c:	93 83       	std	Z+3, r25	; 0x03
    136e:	82 83       	std	Z+2, r24	; 0x02
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	29 f4       	brne	.+10     	; 0x1380 <free+0x9c>
    1376:	f0 93 83 01 	sts	0x0183, r31
    137a:	e0 93 82 01 	sts	0x0182, r30
    137e:	3e c0       	rjmp	.+124    	; 0x13fc <free+0x118>
    1380:	d9 01       	movw	r26, r18
    1382:	13 96       	adiw	r26, 0x03	; 3
    1384:	fc 93       	st	X, r31
    1386:	ee 93       	st	-X, r30
    1388:	12 97       	sbiw	r26, 0x02	; 2
    138a:	4d 91       	ld	r20, X+
    138c:	5d 91       	ld	r21, X+
    138e:	a4 0f       	add	r26, r20
    1390:	b5 1f       	adc	r27, r21
    1392:	ea 17       	cp	r30, r26
    1394:	fb 07       	cpc	r31, r27
    1396:	79 f4       	brne	.+30     	; 0x13b6 <free+0xd2>
    1398:	80 81       	ld	r24, Z
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	84 0f       	add	r24, r20
    139e:	95 1f       	adc	r25, r21
    13a0:	02 96       	adiw	r24, 0x02	; 2
    13a2:	d9 01       	movw	r26, r18
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	9c 93       	st	X, r25
    13a8:	8e 93       	st	-X, r24
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	13 96       	adiw	r26, 0x03	; 3
    13b0:	9c 93       	st	X, r25
    13b2:	8e 93       	st	-X, r24
    13b4:	12 97       	sbiw	r26, 0x02	; 2
    13b6:	e0 e0       	ldi	r30, 0x00	; 0
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <free+0xe4>
    13c2:	fe 01       	movw	r30, r28
    13c4:	ec 01       	movw	r28, r24
    13c6:	f9 cf       	rjmp	.-14     	; 0x13ba <free+0xd6>
    13c8:	ce 01       	movw	r24, r28
    13ca:	02 96       	adiw	r24, 0x02	; 2
    13cc:	28 81       	ld	r18, Y
    13ce:	39 81       	ldd	r19, Y+1	; 0x01
    13d0:	82 0f       	add	r24, r18
    13d2:	93 1f       	adc	r25, r19
    13d4:	20 91 80 01 	lds	r18, 0x0180
    13d8:	30 91 81 01 	lds	r19, 0x0181
    13dc:	28 17       	cp	r18, r24
    13de:	39 07       	cpc	r19, r25
    13e0:	69 f4       	brne	.+26     	; 0x13fc <free+0x118>
    13e2:	30 97       	sbiw	r30, 0x00	; 0
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <free+0x10c>
    13e6:	10 92 83 01 	sts	0x0183, r1
    13ea:	10 92 82 01 	sts	0x0182, r1
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <free+0x110>
    13f0:	13 82       	std	Z+3, r1	; 0x03
    13f2:	12 82       	std	Z+2, r1	; 0x02
    13f4:	d0 93 81 01 	sts	0x0181, r29
    13f8:	c0 93 80 01 	sts	0x0180, r28
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <memcpy>:
    1402:	fb 01       	movw	r30, r22
    1404:	dc 01       	movw	r26, r24
    1406:	02 c0       	rjmp	.+4      	; 0x140c <memcpy+0xa>
    1408:	01 90       	ld	r0, Z+
    140a:	0d 92       	st	X+, r0
    140c:	41 50       	subi	r20, 0x01	; 1
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	d8 f7       	brcc	.-10     	; 0x1408 <memcpy+0x6>
    1412:	08 95       	ret

00001414 <_exit>:
    1414:	f8 94       	cli

00001416 <__stop_program>:
    1416:	ff cf       	rjmp	.-2      	; 0x1416 <__stop_program>
