   1               		.file	"nrf24l01.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	spi_init
  12               	spi_init:
  13               	.LFB6:
  14               		.file 1 "../libs/nrf24l01.c"
   1:../libs/nrf24l01.c **** // nrf24l01 code based on the work of https://github.com/nixpulvis/avrm
   2:../libs/nrf24l01.c **** 
   3:../libs/nrf24l01.c **** #include "nrf24l01.h"
   4:../libs/nrf24l01.c **** 
   5:../libs/nrf24l01.c **** //
   6:../libs/nrf24l01.c **** // spi_init implementation.
   7:../libs/nrf24l01.c **** //
   8:../libs/nrf24l01.c **** void spi_init(byte config)
   9:../libs/nrf24l01.c **** {
  15               		.loc 1 9 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  10:../libs/nrf24l01.c ****   if ((config >> MSTR) & 0x01)
  22               		.loc 1 10 0
  23 0000 84FF      		sbrs r24,4
  24 0002 00C0      		rjmp .L2
  11:../libs/nrf24l01.c ****     DDRB = (1 << DDB5) | (1 << DDB3) | (1 << DDB2);
  25               		.loc 1 11 0
  26 0004 9CE2      		ldi r25,lo8(44)
  27 0006 00C0      		rjmp .L8
  28               	.L2:
  12:../libs/nrf24l01.c ****   else
  13:../libs/nrf24l01.c ****     DDRB = (1 << DDB4);
  29               		.loc 1 13 0
  30 0008 90E1      		ldi r25,lo8(16)
  31               	.L8:
  32 000a 94B9      		out 0x4,r25
  14:../libs/nrf24l01.c **** 
  15:../libs/nrf24l01.c ****   SPCR = config | (1 << SPE);
  33               		.loc 1 15 0
  34 000c 982F      		mov r25,r24
  35 000e 9064      		ori r25,lo8(64)
  36 0010 9CBD      		out 0x2c,r25
  16:../libs/nrf24l01.c **** 
  17:../libs/nrf24l01.c ****   if ((config >> SPIE) & 0x01)
  37               		.loc 1 17 0
  38 0012 87FF      		sbrs r24,7
  39 0014 00C0      		rjmp .L1
  18:../libs/nrf24l01.c ****     sei();
  40               		.loc 1 18 0
  41               	/* #APP */
  42               	 ;  18 "../libs/nrf24l01.c" 1
  43 0016 7894      		sei
  44               	 ;  0 "" 2
  45               	/* #NOAPP */
  46               	.L1:
  47 0018 0895      		ret
  48               		.cfi_endproc
  49               	.LFE6:
  51               	.global	spi_start
  53               	spi_start:
  54               	.LFB7:
  19:../libs/nrf24l01.c **** }
  20:../libs/nrf24l01.c **** 
  21:../libs/nrf24l01.c **** 
  22:../libs/nrf24l01.c **** //
  23:../libs/nrf24l01.c **** // spi_start implementation.
  24:../libs/nrf24l01.c **** //
  25:../libs/nrf24l01.c **** void spi_start(void)
  26:../libs/nrf24l01.c **** {
  55               		.loc 1 26 0
  56               		.cfi_startproc
  57               	/* prologue: function */
  58               	/* frame size = 0 */
  59               	/* stack size = 0 */
  60               	.L__stack_usage = 0
  27:../libs/nrf24l01.c ****   PORTB &= ~_BV(PORTB2);
  61               		.loc 1 27 0
  62 001a 2A98      		cbi 0x5,2
  63 001c 0895      		ret
  64               		.cfi_endproc
  65               	.LFE7:
  67               	.global	spi_end
  69               	spi_end:
  70               	.LFB8:
  28:../libs/nrf24l01.c **** }
  29:../libs/nrf24l01.c **** 
  30:../libs/nrf24l01.c **** 
  31:../libs/nrf24l01.c **** //
  32:../libs/nrf24l01.c **** // spi_end implementation.
  33:../libs/nrf24l01.c **** //
  34:../libs/nrf24l01.c **** void spi_end(void)
  35:../libs/nrf24l01.c **** {
  71               		.loc 1 35 0
  72               		.cfi_startproc
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 0 */
  76               	.L__stack_usage = 0
  36:../libs/nrf24l01.c ****   PORTB |= _BV(PORTB2);
  77               		.loc 1 36 0
  78 001e 2A9A      		sbi 0x5,2
  79 0020 0895      		ret
  80               		.cfi_endproc
  81               	.LFE8:
  83               	.global	spi_transfer
  85               	spi_transfer:
  86               	.LFB9:
  37:../libs/nrf24l01.c **** }
  38:../libs/nrf24l01.c **** 
  39:../libs/nrf24l01.c **** 
  40:../libs/nrf24l01.c **** //
  41:../libs/nrf24l01.c **** // spi_transfer implementation.
  42:../libs/nrf24l01.c **** //
  43:../libs/nrf24l01.c **** byte spi_transfer(byte data)
  44:../libs/nrf24l01.c **** {
  87               		.loc 1 44 0
  88               		.cfi_startproc
  89               	.LVL1:
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  45:../libs/nrf24l01.c ****   // Load data into the buffer.
  46:../libs/nrf24l01.c ****   SPDR = data;
  94               		.loc 1 46 0
  95 0022 8EBD      		out 0x2e,r24
  96               	.L14:
  47:../libs/nrf24l01.c **** 
  48:../libs/nrf24l01.c ****   // Wait until transmission complete.
  49:../libs/nrf24l01.c ****   while (!(SPSR & _BV(SPIF)));
  97               		.loc 1 49 0 discriminator 1
  98 0024 0DB4      		in __tmp_reg__,0x2d
  99 0026 07FE      		sbrs __tmp_reg__,7
 100 0028 00C0      		rjmp .L14
  50:../libs/nrf24l01.c **** 
  51:../libs/nrf24l01.c ****   // Return received data.
  52:../libs/nrf24l01.c ****   return SPDR;
 101               		.loc 1 52 0
 102 002a 8EB5      		in r24,0x2e
 103               	.LVL2:
  53:../libs/nrf24l01.c **** }
 104               		.loc 1 53 0
 105 002c 0895      		ret
 106               		.cfi_endproc
 107               	.LFE9:
 109               	.global	nRF24L01p_status_fetch
 111               	nRF24L01p_status_fetch:
 112               	.LFB33:
  54:../libs/nrf24l01.c **** 
  55:../libs/nrf24l01.c **** //
  56:../libs/nrf24l01.c **** // nRF24L01p_init implementation.
  57:../libs/nrf24l01.c **** //
  58:../libs/nrf24l01.c **** int nRF24L01p_init(int ce, int irq)
  59:../libs/nrf24l01.c **** {
  60:../libs/nrf24l01.c ****   // Start up the SPI bus.
  61:../libs/nrf24l01.c ****   spi_init(SPI_MASTER);
  62:../libs/nrf24l01.c **** 
  63:../libs/nrf24l01.c ****   // Set CE for output.
  64:../libs/nrf24l01.c ****   DDRB |= _BV(DDB1);
  65:../libs/nrf24l01.c **** 
  66:../libs/nrf24l01.c ****   // Enable the CRC and set it to use 1 bit.
  67:../libs/nrf24l01.c ****   nRF24L01p_config_crc(nRF24L01p_VALUE_CONFIG_CRC_ENABLE);
  68:../libs/nrf24l01.c ****   nRF24L01p_config_crc_count(nRF24L01p_VALUE_CONFIG_CRCO_2);
  69:../libs/nrf24l01.c **** 
  70:../libs/nrf24l01.c ****   // Configure address width.
  71:../libs/nrf24l01.c ****   nRF24L01p_config_address_width(nRF24L01p_VALUE_SETUP_AW_AW_5);
  72:../libs/nrf24l01.c **** 
  73:../libs/nrf24l01.c ****   // Set all pipes in EN_RXADDR to disabled.
  74:../libs/nrf24l01.c ****   nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_ALL, FALSE);
  75:../libs/nrf24l01.c **** 
  76:../libs/nrf24l01.c ****   // Configure RF channel.
  77:../libs/nrf24l01.c ****   nRF24L01p_config_channel(100);
  78:../libs/nrf24l01.c **** 
  79:../libs/nrf24l01.c ****   // Configure air data rate.
  80:../libs/nrf24l01.c ****   nRF24L01p_config_air_data_rate(nRF24L01p_VALUE_RF_SETUP_RF_DR_1Mbps);
  81:../libs/nrf24l01.c **** 
  82:../libs/nrf24l01.c ****   // Configure output power.
  83:../libs/nrf24l01.c ****   nRF24L01p_config_output_power(nRF24L01p_VALUE_RF_SETUP_RF_PWR_0dBm);
  84:../libs/nrf24l01.c **** 
  85:../libs/nrf24l01.c ****   // Enable auto acknowledgment.
  86:../libs/nrf24l01.c ****   nRF24L01p_config_auto_ack(nRF24L01p_MASK_EN_AA_ENAA_ALL, FALSE);
  87:../libs/nrf24l01.c **** 
  88:../libs/nrf24l01.c ****   // Configure retransmit.
  89:../libs/nrf24l01.c ****   nRF24L01p_config_retransmit_count(nRF24L01p_VALUE_SETUP_RETR_ARC_3);
  90:../libs/nrf24l01.c ****   nRF24L01p_config_retransmit_delay(nRF24L01p_VALUE_SETUP_RETR_ARD_250);
  91:../libs/nrf24l01.c **** 
  92:../libs/nrf24l01.c ****   // Flush the FIFOs
  93:../libs/nrf24l01.c ****   nRF24L01p_tx_fifo_flush();
  94:../libs/nrf24l01.c ****   nRF24L01p_rx_fifo_flush();
  95:../libs/nrf24l01.c **** 
  96:../libs/nrf24l01.c ****   // Clear the interrupts.
  97:../libs/nrf24l01.c ****   nRF24L01p_status_rx_ready_clear();
  98:../libs/nrf24l01.c ****   nRF24L01p_status_tx_sent_clear();
  99:../libs/nrf24l01.c ****   nRF24L01p_status_max_retries_clear();
 100:../libs/nrf24l01.c **** 
 101:../libs/nrf24l01.c ****   // Enable external interrupt 0.
 102:../libs/nrf24l01.c ****   // TODO: Make this configurable.
 103:../libs/nrf24l01.c ****   EIMSK |= (1 << INT0);
 104:../libs/nrf24l01.c ****   EICRA = (EICRA & ~(1 << ISC00 | 1 << ISC01)) | 0x02;
 105:../libs/nrf24l01.c **** 
 106:../libs/nrf24l01.c ****   // Enable interrupts.
 107:../libs/nrf24l01.c ****   sei();
 108:../libs/nrf24l01.c **** 
 109:../libs/nrf24l01.c ****   // Power up.
 110:../libs/nrf24l01.c ****   nRF24L01p_config_power(nRF24L01p_VALUE_CONFIG_PWR_UP);
 111:../libs/nrf24l01.c **** 
 112:../libs/nrf24l01.c ****   // TODO: Plz.
 113:../libs/nrf24l01.c ****   return 0;
 114:../libs/nrf24l01.c **** }
 115:../libs/nrf24l01.c **** 
 116:../libs/nrf24l01.c **** // PIPE BUFFERS
 117:../libs/nrf24l01.c **** ///////////////
 118:../libs/nrf24l01.c **** 
 119:../libs/nrf24l01.c **** // RX pipe.
 120:../libs/nrf24l01.c **** struct nRF24L01p_RX_PIPE
 121:../libs/nrf24l01.c **** {
 122:../libs/nrf24l01.c ****   bool configured;
 123:../libs/nrf24l01.c ****   long long unsigned int address;
 124:../libs/nrf24l01.c ****   byte payload_width;
 125:../libs/nrf24l01.c ****   byte *data;
 126:../libs/nrf24l01.c ****   size_t remaining;
 127:../libs/nrf24l01.c **** };
 128:../libs/nrf24l01.c **** 
 129:../libs/nrf24l01.c **** // TX pipe.
 130:../libs/nrf24l01.c **** struct nRF24L01p_TX_PIPE
 131:../libs/nrf24l01.c **** {
 132:../libs/nrf24l01.c ****   long long unsigned int address;
 133:../libs/nrf24l01.c ****   byte payload_width;
 134:../libs/nrf24l01.c ****   const byte *data;
 135:../libs/nrf24l01.c ****   size_t remaining;
 136:../libs/nrf24l01.c **** };
 137:../libs/nrf24l01.c **** 
 138:../libs/nrf24l01.c **** // TODO: These are getting big, need to make dynamic.
 139:../libs/nrf24l01.c **** 
 140:../libs/nrf24l01.c **** // Global pipes.
 141:../libs/nrf24l01.c **** static struct nRF24L01p_TX_PIPE nRF24L01p_tx_pipe =
 142:../libs/nrf24l01.c **** { .address = 0, .payload_width = 0,
 143:../libs/nrf24l01.c ****   .data = NULL, .remaining = 0 };
 144:../libs/nrf24l01.c **** 
 145:../libs/nrf24l01.c **** static struct nRF24L01p_RX_PIPE nRF24L01p_rx_pipes[6] =
 146:../libs/nrf24l01.c **** {
 147:../libs/nrf24l01.c ****   { .configured = FALSE, .address = 0, .payload_width = 0,
 148:../libs/nrf24l01.c ****     .data = NULL, .remaining = 0 },
 149:../libs/nrf24l01.c ****   { .configured = FALSE, .address = 0, .payload_width = 0,
 150:../libs/nrf24l01.c ****     .data = NULL, .remaining = 0 },
 151:../libs/nrf24l01.c ****   { .configured = FALSE, .address = 0, .payload_width = 0,
 152:../libs/nrf24l01.c ****     .data = NULL, .remaining = 0 },
 153:../libs/nrf24l01.c ****   { .configured = FALSE, .address = 0, .payload_width = 0,
 154:../libs/nrf24l01.c ****     .data = NULL, .remaining = 0 },
 155:../libs/nrf24l01.c ****   { .configured = FALSE, .address = 0, .payload_width = 0,
 156:../libs/nrf24l01.c ****     .data = NULL, .remaining = 0 },
 157:../libs/nrf24l01.c ****   { .configured = FALSE, .address = 0, .payload_width = 0,
 158:../libs/nrf24l01.c ****     .data = NULL, .remaining = 0 },
 159:../libs/nrf24l01.c **** };
 160:../libs/nrf24l01.c **** 
 161:../libs/nrf24l01.c **** 
 162:../libs/nrf24l01.c **** //
 163:../libs/nrf24l01.c **** // private nRF24L01p_process_tx_payload implementation.
 164:../libs/nrf24l01.c **** //
 165:../libs/nrf24l01.c **** void nRF24L01p_process_tx_payload()
 166:../libs/nrf24l01.c **** {
 167:../libs/nrf24l01.c ****   if (nRF24L01p_tx_pipe.remaining == 0)
 168:../libs/nrf24l01.c ****   {
 169:../libs/nrf24l01.c ****     // When we are finished sending we disable the device.
 170:../libs/nrf24l01.c ****     nRF24L01p_disable();
 171:../libs/nrf24l01.c **** 
 172:../libs/nrf24l01.c ****     // Turn off the pipe.
 173:../libs/nrf24l01.c ****     nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, FALSE);
 174:../libs/nrf24l01.c ****   }
 175:../libs/nrf24l01.c ****   else
 176:../libs/nrf24l01.c ****   {
 177:../libs/nrf24l01.c ****     while (!nRF24L01p_tx_fifo_is_full() && nRF24L01p_tx_pipe.remaining != 0)
 178:../libs/nrf24l01.c ****     {
 179:../libs/nrf24l01.c ****       // TODO: Move this logic into nRF24L01p_rx_fifo_write.
 180:../libs/nrf24l01.c ****       //       nRF24L01p_rx_fifo_write could guarantee count size
 181:../libs/nrf24l01.c ****       //       data.
 182:../libs/nrf24l01.c ****       if (nRF24L01p_tx_pipe.remaining < nRF24L01p_tx_pipe.payload_width)
 183:../libs/nrf24l01.c ****       {
 184:../libs/nrf24l01.c ****         byte *payload = malloc(nRF24L01p_tx_pipe.payload_width);
 185:../libs/nrf24l01.c ****         memcpy(payload, nRF24L01p_tx_pipe.data, nRF24L01p_tx_pipe.remaining);
 186:../libs/nrf24l01.c ****         nRF24L01p_tx_fifo_write(payload, nRF24L01p_tx_pipe.payload_width);
 187:../libs/nrf24l01.c ****         free(payload);
 188:../libs/nrf24l01.c ****         nRF24L01p_tx_pipe.remaining = 0;
 189:../libs/nrf24l01.c ****       }
 190:../libs/nrf24l01.c ****       else
 191:../libs/nrf24l01.c ****       {
 192:../libs/nrf24l01.c ****         nRF24L01p_tx_fifo_write(nRF24L01p_tx_pipe.data, nRF24L01p_tx_pipe.payload_width);
 193:../libs/nrf24l01.c ****         nRF24L01p_tx_pipe.data = nRF24L01p_tx_pipe.data + nRF24L01p_tx_pipe.payload_width;
 194:../libs/nrf24l01.c ****         nRF24L01p_tx_pipe.remaining = nRF24L01p_tx_pipe.remaining - nRF24L01p_tx_pipe.payload_width
 195:../libs/nrf24l01.c ****       }
 196:../libs/nrf24l01.c ****     }
 197:../libs/nrf24l01.c **** 
 198:../libs/nrf24l01.c ****     // Enable the device. It's important to do this after filling the
 199:../libs/nrf24l01.c ****     // FIFO so we don't get a TX sent interrupt in the middle of this
 200:../libs/nrf24l01.c ****     // function when we call it from outside of an interrupt service
 201:../libs/nrf24l01.c ****     // routine. All calls to nRF24L01p_process_tx_payload outside an
 202:../libs/nrf24l01.c ****     // ISR MUST have the device disabled.
 203:../libs/nrf24l01.c ****     nRF24L01p_enable();
 204:../libs/nrf24l01.c ****   }
 205:../libs/nrf24l01.c **** 
 206:../libs/nrf24l01.c ****   nRF24L01p_status_tx_sent_clear();
 207:../libs/nrf24l01.c **** }
 208:../libs/nrf24l01.c **** 
 209:../libs/nrf24l01.c **** 
 210:../libs/nrf24l01.c **** //
 211:../libs/nrf24l01.c **** // private nRF24L01p_process_rx_payload implementation.
 212:../libs/nrf24l01.c **** //
 213:../libs/nrf24l01.c **** void nRF24L01p_process_rx_payload(byte pipe)
 214:../libs/nrf24l01.c **** {
 215:../libs/nrf24l01.c ****   // TODO: This is kinda hacky.
 216:../libs/nrf24l01.c ****   byte payload_width = nRF24L01p_get_payload_width(nRF24L01p_REGISTER_RX_PW_P0 + pipe);
 217:../libs/nrf24l01.c **** 
 218:../libs/nrf24l01.c ****   if (nRF24L01p_rx_pipes[pipe].remaining == 0)
 219:../libs/nrf24l01.c ****   {
 220:../libs/nrf24l01.c ****     // TODO: If this is really what I want to do, this
 221:../libs/nrf24l01.c ****     //       should be nRF24L01p_rx_fifo_drop. But I
 222:../libs/nrf24l01.c ****     //       would love to figure out a way to not do this.
 223:../libs/nrf24l01.c ****     spi_start();
 224:../libs/nrf24l01.c ****     spi_transfer(nRF24L01p_SPI_R_RX_PAYLOAD);
 225:../libs/nrf24l01.c ****     for (byte i = 0; i < payload_width; i++)
 226:../libs/nrf24l01.c ****       spi_transfer(nRF24L01p_SPI_NOP);
 227:../libs/nrf24l01.c ****     spi_end();
 228:../libs/nrf24l01.c ****     // TODO: We need to turn off the pipe here.
 229:../libs/nrf24l01.c ****   }
 230:../libs/nrf24l01.c ****   else
 231:../libs/nrf24l01.c ****   {
 232:../libs/nrf24l01.c ****     // TODO: Move this logic into nRF24L01p_rx_fifo_read.
 233:../libs/nrf24l01.c ****     //       nRF24L01p_rx_fifo_read could guarantee count size
 234:../libs/nrf24l01.c ****     //       data.
 235:../libs/nrf24l01.c ****     if (nRF24L01p_rx_pipes[pipe].remaining < payload_width)
 236:../libs/nrf24l01.c ****     {
 237:../libs/nrf24l01.c ****       byte *payload = malloc(payload_width);
 238:../libs/nrf24l01.c ****       nRF24L01p_rx_fifo_read(payload, payload_width);
 239:../libs/nrf24l01.c ****       memcpy(nRF24L01p_rx_pipes[pipe].data, payload, nRF24L01p_rx_pipes[pipe].remaining);
 240:../libs/nrf24l01.c ****       free(payload);
 241:../libs/nrf24l01.c ****       nRF24L01p_rx_pipes[pipe].remaining = 0;
 242:../libs/nrf24l01.c ****     }
 243:../libs/nrf24l01.c ****     else
 244:../libs/nrf24l01.c ****     {
 245:../libs/nrf24l01.c ****       nRF24L01p_rx_fifo_read(nRF24L01p_rx_pipes[pipe].data, payload_width);
 246:../libs/nrf24l01.c ****       nRF24L01p_rx_pipes[pipe].data = nRF24L01p_rx_pipes[pipe].data + payload_width;
 247:../libs/nrf24l01.c ****       nRF24L01p_rx_pipes[pipe].remaining = nRF24L01p_rx_pipes[pipe].remaining - payload_width;
 248:../libs/nrf24l01.c ****     }
 249:../libs/nrf24l01.c ****   }
 250:../libs/nrf24l01.c **** }
 251:../libs/nrf24l01.c **** 
 252:../libs/nrf24l01.c **** 
 253:../libs/nrf24l01.c **** // IRQ SERVICE HANDLER
 254:../libs/nrf24l01.c **** //////////////////////
 255:../libs/nrf24l01.c **** 
 256:../libs/nrf24l01.c **** ISR (INT0_vect)
 257:../libs/nrf24l01.c **** {
 258:../libs/nrf24l01.c ****   nRF24L01p_status_fetch();
 259:../libs/nrf24l01.c **** 
 260:../libs/nrf24l01.c ****   if (nRF24L01p_status_tx_sent())
 261:../libs/nrf24l01.c ****   {
 262:../libs/nrf24l01.c ****     nRF24L01p_process_tx_payload();
 263:../libs/nrf24l01.c ****   }
 264:../libs/nrf24l01.c **** 
 265:../libs/nrf24l01.c ****   if (nRF24L01p_status_rx_ready())
 266:../libs/nrf24l01.c ****   {
 267:../libs/nrf24l01.c ****     // TODO: This whole thing should just be
 268:../libs/nrf24l01.c ****     //       nRF24L01p_process_rx_payload(pipe)
 269:../libs/nrf24l01.c ****     //       since I'm 99% sure we can't trust updated
 270:../libs/nrf24l01.c ****     //       pipe numbers in the same interrupt anyway.
 271:../libs/nrf24l01.c **** 
 272:../libs/nrf24l01.c ****     while (!nRF24L01p_rx_fifo_is_empty())
 273:../libs/nrf24l01.c ****     {
 274:../libs/nrf24l01.c ****       PORTC=0x01;
 275:../libs/nrf24l01.c ****       nRF24L01p_status_fetch();
 276:../libs/nrf24l01.c ****       byte pipe = nRF24L01p_status_pipe_ready();
 277:../libs/nrf24l01.c ****       if (pipe <= 5) nRF24L01p_process_rx_payload(pipe);
 278:../libs/nrf24l01.c ****       nRF24L01p_status_rx_ready_clear();
 279:../libs/nrf24l01.c ****     }
 280:../libs/nrf24l01.c ****   }
 281:../libs/nrf24l01.c **** 
 282:../libs/nrf24l01.c ****   // TODO: Implement advice from Appendix E for automatic
 283:../libs/nrf24l01.c ****   //       channel switching using carrier detect.
 284:../libs/nrf24l01.c ****   if (nRF24L01p_status_max_retries())
 285:../libs/nrf24l01.c ****   {
 286:../libs/nrf24l01.c ****     byte lost = nRF24L01p_packets_lost();
 287:../libs/nrf24l01.c **** 
 288:../libs/nrf24l01.c ****     nRF24L01p_tx_fifo_flush();
 289:../libs/nrf24l01.c ****     nRF24L01p_status_max_retries_clear();
 290:../libs/nrf24l01.c ****   }
 291:../libs/nrf24l01.c **** 
 292:../libs/nrf24l01.c ****   // TODO: Think this case through.
 293:../libs/nrf24l01.c ****   if (nRF24L01p_status_tx_full())
 294:../libs/nrf24l01.c ****   {
 295:../libs/nrf24l01.c **** 
 296:../libs/nrf24l01.c ****   }
 297:../libs/nrf24l01.c **** }
 298:../libs/nrf24l01.c **** 
 299:../libs/nrf24l01.c **** // Configuration
 300:../libs/nrf24l01.c **** ////////////////
 301:../libs/nrf24l01.c **** 
 302:../libs/nrf24l01.c **** 
 303:../libs/nrf24l01.c **** //
 304:../libs/nrf24l01.c **** // nRF24L01p_config_rx_dr_interrupt implementation.
 305:../libs/nrf24l01.c **** //
 306:../libs/nrf24l01.c **** int nRF24L01p_config_rx_dr_interrupt(bool value)
 307:../libs/nrf24l01.c **** {
 308:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 309:../libs/nrf24l01.c ****                                nRF24L01p_MASK_CONFIG_MASK_RX_DR,
 310:../libs/nrf24l01.c ****                                value ? 0x00 : 0xFF);
 311:../libs/nrf24l01.c ****   return 0;
 312:../libs/nrf24l01.c **** }
 313:../libs/nrf24l01.c **** 
 314:../libs/nrf24l01.c **** 
 315:../libs/nrf24l01.c **** //
 316:../libs/nrf24l01.c **** // nRF24L01p_config_tx_ds_interrupt implementation.
 317:../libs/nrf24l01.c **** //
 318:../libs/nrf24l01.c **** int nRF24L01p_config_tx_ds_interrupt(bool value)
 319:../libs/nrf24l01.c **** {
 320:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 321:../libs/nrf24l01.c ****                                nRF24L01p_MASK_CONFIG_MASK_TX_DS,
 322:../libs/nrf24l01.c ****                                value ? 0x00 : 0xFF);
 323:../libs/nrf24l01.c ****   return 0;
 324:../libs/nrf24l01.c **** }
 325:../libs/nrf24l01.c **** 
 326:../libs/nrf24l01.c **** 
 327:../libs/nrf24l01.c **** //
 328:../libs/nrf24l01.c **** // nRF24L01p_config_max_rt_interrupt implementation.
 329:../libs/nrf24l01.c **** //
 330:../libs/nrf24l01.c **** int nRF24L01p_config_max_rt_interrupt(bool value)
 331:../libs/nrf24l01.c **** {
 332:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 333:../libs/nrf24l01.c ****                                nRF24L01p_MASK_CONFIG_MASK_MAX_RT,
 334:../libs/nrf24l01.c ****                                value ? 0x00 : 0xFF);
 335:../libs/nrf24l01.c ****   return 0;
 336:../libs/nrf24l01.c **** }
 337:../libs/nrf24l01.c **** 
 338:../libs/nrf24l01.c **** 
 339:../libs/nrf24l01.c **** //
 340:../libs/nrf24l01.c **** // nRF24L01p_config_crc implementation.
 341:../libs/nrf24l01.c **** //
 342:../libs/nrf24l01.c **** int nRF24L01p_config_crc(byte value)
 343:../libs/nrf24l01.c **** {
 344:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_CRC_ENABLE ||
 345:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_CONFIG_CRC_DISABLE))
 346:../libs/nrf24l01.c ****     return -1;
 347:../libs/nrf24l01.c **** 
 348:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 349:../libs/nrf24l01.c ****                                nRF24L01p_MASK_CONFIG_EN_CRC,
 350:../libs/nrf24l01.c ****                                value);
 351:../libs/nrf24l01.c **** 
 352:../libs/nrf24l01.c ****   return 0;
 353:../libs/nrf24l01.c **** }
 354:../libs/nrf24l01.c **** 
 355:../libs/nrf24l01.c **** 
 356:../libs/nrf24l01.c **** //
 357:../libs/nrf24l01.c **** // nRF24L01p_config_crc_count implementation.
 358:../libs/nrf24l01.c **** //
 359:../libs/nrf24l01.c **** int nRF24L01p_config_crc_count(byte value)
 360:../libs/nrf24l01.c **** {
 361:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_CRCO_1 ||
 362:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_CONFIG_CRCO_2))
 363:../libs/nrf24l01.c ****     return -1;
 364:../libs/nrf24l01.c **** 
 365:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 366:../libs/nrf24l01.c ****                                nRF24L01p_MASK_CONFIG_CRCO,
 367:../libs/nrf24l01.c ****                                value);
 368:../libs/nrf24l01.c **** 
 369:../libs/nrf24l01.c ****   return 0;
 370:../libs/nrf24l01.c **** }
 371:../libs/nrf24l01.c **** 
 372:../libs/nrf24l01.c **** 
 373:../libs/nrf24l01.c **** //
 374:../libs/nrf24l01.c **** // nRF24L01p_config_power implementation.
 375:../libs/nrf24l01.c **** //
 376:../libs/nrf24l01.c **** int nRF24L01p_config_power(byte value)
 377:../libs/nrf24l01.c **** {
 378:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_PWR_UP ||
 379:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_CONFIG_PWR_DOWN))
 380:../libs/nrf24l01.c ****     return -1;
 381:../libs/nrf24l01.c **** 
 382:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 383:../libs/nrf24l01.c ****                               nRF24L01p_MASK_CONFIG_PWR_UP,
 384:../libs/nrf24l01.c ****                               value);
 385:../libs/nrf24l01.c **** 
 386:../libs/nrf24l01.c ****   if (value == nRF24L01p_VALUE_CONFIG_PWR_UP)
 387:../libs/nrf24l01.c ****     _delay_us(nRF24L01p_TIMING_TPD2STBY_US);
 388:../libs/nrf24l01.c **** 
 389:../libs/nrf24l01.c ****   return 0;
 390:../libs/nrf24l01.c **** }
 391:../libs/nrf24l01.c **** 
 392:../libs/nrf24l01.c **** 
 393:../libs/nrf24l01.c **** //
 394:../libs/nrf24l01.c **** // nRF24L01p_config_transceiver_mode implementation.
 395:../libs/nrf24l01.c **** //
 396:../libs/nrf24l01.c **** int nRF24L01p_config_transceiver_mode(byte value)
 397:../libs/nrf24l01.c **** {
 398:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_PRIM_TX ||
 399:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_CONFIG_PRIM_RX))
 400:../libs/nrf24l01.c ****     return -1;
 401:../libs/nrf24l01.c **** 
 402:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 403:../libs/nrf24l01.c ****                               nRF24L01p_MASK_CONFIG_PRIM_RX,
 404:../libs/nrf24l01.c ****                               value);
 405:../libs/nrf24l01.c ****   return 0;
 406:../libs/nrf24l01.c **** }
 407:../libs/nrf24l01.c **** 
 408:../libs/nrf24l01.c **** 
 409:../libs/nrf24l01.c **** //
 410:../libs/nrf24l01.c **** // nRF24L01p_config_auto_ack implementation.
 411:../libs/nrf24l01.c **** //
 412:../libs/nrf24l01.c **** int nRF24L01p_config_auto_ack(byte mask, bool value)
 413:../libs/nrf24l01.c **** {
 414:../libs/nrf24l01.c ****   if (!(mask == nRF24L01p_MASK_EN_AA_ENAA_P0 ||
 415:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P1 ||
 416:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P2 ||
 417:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P3 ||
 418:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P4 ||
 419:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P5 ||
 420:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_ALL))
 421:../libs/nrf24l01.c ****     return -1;
 422:../libs/nrf24l01.c **** 
 423:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_AA,
 424:../libs/nrf24l01.c ****                                mask, value ? 0xFF : 0x00);
 425:../libs/nrf24l01.c ****   return 0;
 426:../libs/nrf24l01.c **** }
 427:../libs/nrf24l01.c **** 
 428:../libs/nrf24l01.c **** 
 429:../libs/nrf24l01.c **** //
 430:../libs/nrf24l01.c **** // nRF24L01p_config_rx implementation.
 431:../libs/nrf24l01.c **** //
 432:../libs/nrf24l01.c **** int nRF24L01p_config_rx(byte mask, bool value)
 433:../libs/nrf24l01.c **** {
 434:../libs/nrf24l01.c ****   if (!(mask == nRF24L01p_MASK_EN_RXADDR_ERX_P0 ||
 435:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P1 ||
 436:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P2 ||
 437:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P3 ||
 438:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
 439:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P5 ||
 440:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_ALL))
 441:../libs/nrf24l01.c ****     return -1;
 442:../libs/nrf24l01.c **** 
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 444:../libs/nrf24l01.c ****                                mask, value ? 0xFF : 0x00);
 445:../libs/nrf24l01.c **** 
 446:../libs/nrf24l01.c ****   return 0;
 447:../libs/nrf24l01.c **** }
 448:../libs/nrf24l01.c **** 
 449:../libs/nrf24l01.c **** 
 450:../libs/nrf24l01.c **** //
 451:../libs/nrf24l01.c **** // nRF24L01p_config_address_width implementation.
 452:../libs/nrf24l01.c **** //
 453:../libs/nrf24l01.c **** int nRF24L01p_config_address_width(byte value)
 454:../libs/nrf24l01.c **** {
 455:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_SETUP_AW_AW_3 ||
 456:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_SETUP_AW_AW_4 ||
 457:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_SETUP_AW_AW_5))
 458:../libs/nrf24l01.c ****     return -1;
 459:../libs/nrf24l01.c **** 
 460:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_AW,
 461:../libs/nrf24l01.c ****                               nRF24L01p_MASK_SETUP_AW_AW,
 462:../libs/nrf24l01.c ****                               value);
 463:../libs/nrf24l01.c ****   return 0;
 464:../libs/nrf24l01.c **** }
 465:../libs/nrf24l01.c **** 
 466:../libs/nrf24l01.c **** 
 467:../libs/nrf24l01.c **** //
 468:../libs/nrf24l01.c **** // nRF24L01p_config_retransmit_delay implementation.
 469:../libs/nrf24l01.c **** //
 470:../libs/nrf24l01.c **** int nRF24L01p_config_retransmit_delay(byte value)
 471:../libs/nrf24l01.c **** {
 472:../libs/nrf24l01.c ****   if (value <= 0x0F)
 473:../libs/nrf24l01.c ****     return -1;
 474:../libs/nrf24l01.c **** 
 475:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
 476:../libs/nrf24l01.c ****                               nRF24L01p_MASK_SETUP_RETR_ARD,
 477:../libs/nrf24l01.c ****                               value);
 478:../libs/nrf24l01.c ****   return 0;
 479:../libs/nrf24l01.c **** }
 480:../libs/nrf24l01.c **** 
 481:../libs/nrf24l01.c **** 
 482:../libs/nrf24l01.c **** //
 483:../libs/nrf24l01.c **** // nRF24L01p_config_retransmit_count implementation.
 484:../libs/nrf24l01.c **** //
 485:../libs/nrf24l01.c **** int nRF24L01p_config_retransmit_count(byte value)
 486:../libs/nrf24l01.c **** {
 487:../libs/nrf24l01.c ****   if (value > 0x0F)
 488:../libs/nrf24l01.c ****     return -1;
 489:../libs/nrf24l01.c **** 
 490:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
 491:../libs/nrf24l01.c ****                               nRF24L01p_MASK_SETUP_RETR_ARC,
 492:../libs/nrf24l01.c ****                               value);
 493:../libs/nrf24l01.c ****   return 0;
 494:../libs/nrf24l01.c **** }
 495:../libs/nrf24l01.c **** 
 496:../libs/nrf24l01.c **** 
 497:../libs/nrf24l01.c **** //
 498:../libs/nrf24l01.c **** // nRF24L01p_config_channel implementation.
 499:../libs/nrf24l01.c **** //
 500:../libs/nrf24l01.c **** int nRF24L01p_config_channel(byte value)
 501:../libs/nrf24l01.c **** {
 502:../libs/nrf24l01.c ****   if (value > 127)
 503:../libs/nrf24l01.c ****     return -1;
 504:../libs/nrf24l01.c **** 
 505:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_CH,
 506:../libs/nrf24l01.c ****                               nRF24L01p_MASK_RF_CH_RF_CH,
 507:../libs/nrf24l01.c ****                               value);
 508:../libs/nrf24l01.c ****   return 0;
 509:../libs/nrf24l01.c **** }
 510:../libs/nrf24l01.c **** 
 511:../libs/nrf24l01.c **** 
 512:../libs/nrf24l01.c **** //
 513:../libs/nrf24l01.c **** // nRF24L01p_config_air_data_rate implementation.
 514:../libs/nrf24l01.c **** //
 515:../libs/nrf24l01.c **** int nRF24L01p_config_air_data_rate(byte value)
 516:../libs/nrf24l01.c **** {
 517:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_DR_1Mbps ||
 518:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_RF_SETUP_RF_DR_2Mbps))
 519:../libs/nrf24l01.c ****     return -1;
 520:../libs/nrf24l01.c **** 
 521:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
 522:../libs/nrf24l01.c ****                               nRF24L01p_MASK_RF_SETUP_RF_DR,
 523:../libs/nrf24l01.c ****                               value);
 524:../libs/nrf24l01.c ****   return 0;
 525:../libs/nrf24l01.c **** }
 526:../libs/nrf24l01.c **** 
 527:../libs/nrf24l01.c **** 
 528:../libs/nrf24l01.c **** //
 529:../libs/nrf24l01.c **** // nRF24L01p_config_output_power implementation.
 530:../libs/nrf24l01.c **** //
 531:../libs/nrf24l01.c **** int nRF24L01p_config_output_power(byte value)
 532:../libs/nrf24l01.c **** {
 533:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_18dBm ||
 534:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_12dBm ||
 535:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_6dBm ||
 536:../libs/nrf24l01.c ****         value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_0dBm))
 537:../libs/nrf24l01.c ****     return -1;
 538:../libs/nrf24l01.c **** 
 539:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
 540:../libs/nrf24l01.c ****                               nRF24L01p_MASK_RF_SETUP_RF_PWR,
 541:../libs/nrf24l01.c ****                               value);
 542:../libs/nrf24l01.c ****   return 0;
 543:../libs/nrf24l01.c **** }
 544:../libs/nrf24l01.c **** 
 545:../libs/nrf24l01.c **** 
 546:../libs/nrf24l01.c **** //
 547:../libs/nrf24l01.c **** // nRF24L01p_config_address implementation.
 548:../libs/nrf24l01.c **** //
 549:../libs/nrf24l01.c **** int nRF24L01p_config_address(byte reg, long long unsigned int address)
 550:../libs/nrf24l01.c **** {
 551:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_ADDR_P0 ||
 552:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P1 ||
 553:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P2 ||
 554:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P3 ||
 555:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P4 ||
 556:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P5 ||
 557:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_TX_ADDR))
 558:../libs/nrf24l01.c ****     return -1;
 559:../libs/nrf24l01.c **** 
 560:../libs/nrf24l01.c ****   // TODO: error checking for bad addresses.
 561:../libs/nrf24l01.c **** 
 562:../libs/nrf24l01.c ****   // TODO: This is broken, need to set 8 bit registers for
 563:../libs/nrf24l01.c ****   // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 565:../libs/nrf24l01.c **** 
 566:../libs/nrf24l01.c ****   return 0;
 567:../libs/nrf24l01.c **** }
 568:../libs/nrf24l01.c **** 
 569:../libs/nrf24l01.c **** 
 570:../libs/nrf24l01.c **** //
 571:../libs/nrf24l01.c **** // nRF24L01p_get_address implementation.
 572:../libs/nrf24l01.c **** //
 573:../libs/nrf24l01.c **** long long unsigned int nRF24L01p_get_address(byte reg)
 574:../libs/nrf24l01.c **** {
 575:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_ADDR_P0 ||
 576:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P1 ||
 577:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P2 ||
 578:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P3 ||
 579:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P4 ||
 580:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_ADDR_P5 ||
 581:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_TX_ADDR))
 582:../libs/nrf24l01.c ****     return 0;
 583:../libs/nrf24l01.c **** 
 584:../libs/nrf24l01.c ****   // TODO: This is broken, need to get 8 bit registers for
 585:../libs/nrf24l01.c ****   // nRF24L01p_REGISTER_RX_ADDR_P(2-5)
 586:../libs/nrf24l01.c ****   return nRF24L01p_get_register40(reg);
 587:../libs/nrf24l01.c **** }
 588:../libs/nrf24l01.c **** 
 589:../libs/nrf24l01.c **** 
 590:../libs/nrf24l01.c **** //
 591:../libs/nrf24l01.c **** // nRF24L01p_config_payload_width implementation.
 592:../libs/nrf24l01.c **** //
 593:../libs/nrf24l01.c **** int nRF24L01p_config_payload_width(byte reg, byte width)
 594:../libs/nrf24l01.c **** {
 595:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_PW_P0 ||
 596:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P1 ||
 597:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P2 ||
 598:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P3 ||
 599:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P4 ||
 600:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P5))
 601:../libs/nrf24l01.c ****     return -1;
 602:../libs/nrf24l01.c **** 
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 604:../libs/nrf24l01.c ****                                nRF24L01p_MASK_RX_PW,
 605:../libs/nrf24l01.c ****                                width);
 606:../libs/nrf24l01.c **** 
 607:../libs/nrf24l01.c ****   return 0;
 608:../libs/nrf24l01.c **** }
 609:../libs/nrf24l01.c **** 
 610:../libs/nrf24l01.c **** 
 611:../libs/nrf24l01.c **** //
 612:../libs/nrf24l01.c **** // nRF24L01p_get_payload_width implementation.
 613:../libs/nrf24l01.c **** //
 614:../libs/nrf24l01.c **** byte nRF24L01p_get_payload_width(byte reg)
 615:../libs/nrf24l01.c **** {
 616:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_PW_P0 ||
 617:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P1 ||
 618:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P2 ||
 619:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P3 ||
 620:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P4 ||
 621:../libs/nrf24l01.c ****         reg == nRF24L01p_REGISTER_RX_PW_P5))
 622:../libs/nrf24l01.c ****     return 0;
 623:../libs/nrf24l01.c **** 
 624:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(reg);
 625:../libs/nrf24l01.c **** }
 626:../libs/nrf24l01.c **** 
 627:../libs/nrf24l01.c **** 
 628:../libs/nrf24l01.c **** // STATUS
 629:../libs/nrf24l01.c **** /////////
 630:../libs/nrf24l01.c **** 
 631:../libs/nrf24l01.c **** static byte nRF24L01p_status = 0x0E;
 632:../libs/nrf24l01.c **** 
 633:../libs/nrf24l01.c **** //
 634:../libs/nrf24l01.c **** // nRF24L01p_status_fetch
 635:../libs/nrf24l01.c **** //
 636:../libs/nrf24l01.c **** void nRF24L01p_status_fetch(void)
 637:../libs/nrf24l01.c **** {
 113               		.loc 1 637 0
 114               		.cfi_startproc
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 0 */
 118               	.L__stack_usage = 0
 638:../libs/nrf24l01.c ****   spi_start();
 119               		.loc 1 638 0
 120 002e 0E94 0000 		call spi_start
 121               	.LVL3:
 639:../libs/nrf24l01.c ****   nRF24L01p_status = spi_transfer(nRF24L01p_SPI_NOP);
 122               		.loc 1 639 0
 123 0032 8FEF      		ldi r24,lo8(-1)
 124 0034 0E94 0000 		call spi_transfer
 125               	.LVL4:
 126 0038 8093 0000 		sts nRF24L01p_status,r24
 640:../libs/nrf24l01.c ****   spi_end();
 127               		.loc 1 640 0
 128 003c 0C94 0000 		jmp spi_end
 129               	.LVL5:
 130               		.cfi_endproc
 131               	.LFE33:
 133               	.global	nRF24L01p_status_rx_ready
 135               	nRF24L01p_status_rx_ready:
 136               	.LFB34:
 641:../libs/nrf24l01.c **** }
 642:../libs/nrf24l01.c **** 
 643:../libs/nrf24l01.c **** 
 644:../libs/nrf24l01.c **** //
 645:../libs/nrf24l01.c **** // nRF24L01p_status_rx_ready implementation.
 646:../libs/nrf24l01.c **** //
 647:../libs/nrf24l01.c **** bool nRF24L01p_status_rx_ready(void)
 648:../libs/nrf24l01.c **** {
 137               		.loc 1 648 0
 138               		.cfi_startproc
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
 649:../libs/nrf24l01.c ****   return nRF24L01p_status & nRF24L01p_MASK_STATUS_RX_DR;
 143               		.loc 1 649 0
 144 0040 8091 0000 		lds r24,nRF24L01p_status
 650:../libs/nrf24l01.c **** }
 145               		.loc 1 650 0
 146 0044 86FB      		bst r24,6
 147 0046 8827      		clr r24
 148 0048 80F9      		bld r24,0
 149 004a 0895      		ret
 150               		.cfi_endproc
 151               	.LFE34:
 153               	.global	nRF24L01p_status_tx_sent
 155               	nRF24L01p_status_tx_sent:
 156               	.LFB36:
 651:../libs/nrf24l01.c **** 
 652:../libs/nrf24l01.c **** 
 653:../libs/nrf24l01.c **** //
 654:../libs/nrf24l01.c **** // nRF24L01p_status_rx_ready_clear implementation.
 655:../libs/nrf24l01.c **** //
 656:../libs/nrf24l01.c **** void nRF24L01p_status_rx_ready_clear(void)
 657:../libs/nrf24l01.c **** {
 658:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
 659:../libs/nrf24l01.c ****                                nRF24L01p_MASK_STATUS_RX_DR, 0xFF);
 660:../libs/nrf24l01.c **** }
 661:../libs/nrf24l01.c **** 
 662:../libs/nrf24l01.c **** 
 663:../libs/nrf24l01.c **** //
 664:../libs/nrf24l01.c **** // nRF24L01p_status_tx_sent implementation.
 665:../libs/nrf24l01.c **** //
 666:../libs/nrf24l01.c **** bool nRF24L01p_status_tx_sent(void)
 667:../libs/nrf24l01.c **** {
 157               		.loc 1 667 0
 158               		.cfi_startproc
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 0 */
 162               	.L__stack_usage = 0
 668:../libs/nrf24l01.c ****   return nRF24L01p_status & nRF24L01p_MASK_STATUS_TX_DS;
 163               		.loc 1 668 0
 164 004c 8091 0000 		lds r24,nRF24L01p_status
 669:../libs/nrf24l01.c **** }
 165               		.loc 1 669 0
 166 0050 85FB      		bst r24,5
 167 0052 8827      		clr r24
 168 0054 80F9      		bld r24,0
 169 0056 0895      		ret
 170               		.cfi_endproc
 171               	.LFE36:
 173               	.global	nRF24L01p_status_max_retries
 175               	nRF24L01p_status_max_retries:
 176               	.LFB38:
 670:../libs/nrf24l01.c **** 
 671:../libs/nrf24l01.c **** 
 672:../libs/nrf24l01.c **** //
 673:../libs/nrf24l01.c **** // nRF24L01p_status_tx_sent_clear implementation.
 674:../libs/nrf24l01.c **** //
 675:../libs/nrf24l01.c **** void nRF24L01p_status_tx_sent_clear(void)
 676:../libs/nrf24l01.c **** {
 677:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
 678:../libs/nrf24l01.c ****                                nRF24L01p_MASK_STATUS_TX_DS, 0xFF);
 679:../libs/nrf24l01.c **** }
 680:../libs/nrf24l01.c **** 
 681:../libs/nrf24l01.c **** 
 682:../libs/nrf24l01.c **** //
 683:../libs/nrf24l01.c **** // nRF24L01p_status_max_retries implementation.
 684:../libs/nrf24l01.c **** //
 685:../libs/nrf24l01.c **** bool nRF24L01p_status_max_retries(void)
 686:../libs/nrf24l01.c **** {
 177               		.loc 1 686 0
 178               		.cfi_startproc
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 0 */
 182               	.L__stack_usage = 0
 687:../libs/nrf24l01.c ****   return nRF24L01p_status & nRF24L01p_MASK_STATUS_MAX_RT;
 183               		.loc 1 687 0
 184 0058 8091 0000 		lds r24,nRF24L01p_status
 688:../libs/nrf24l01.c **** }
 185               		.loc 1 688 0
 186 005c 8295      		swap r24
 187 005e 8170      		andi r24,1
 188 0060 0895      		ret
 189               		.cfi_endproc
 190               	.LFE38:
 192               	.global	nRF24L01p_status_pipe_ready
 194               	nRF24L01p_status_pipe_ready:
 195               	.LFB40:
 689:../libs/nrf24l01.c **** 
 690:../libs/nrf24l01.c **** 
 691:../libs/nrf24l01.c **** //
 692:../libs/nrf24l01.c **** // nRF24L01p_status_max_retries_clear implementation.
 693:../libs/nrf24l01.c **** //
 694:../libs/nrf24l01.c **** void nRF24L01p_status_max_retries_clear(void)
 695:../libs/nrf24l01.c **** {
 696:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
 697:../libs/nrf24l01.c ****                                nRF24L01p_MASK_STATUS_MAX_RT, 0xFF);
 698:../libs/nrf24l01.c **** }
 699:../libs/nrf24l01.c **** 
 700:../libs/nrf24l01.c **** 
 701:../libs/nrf24l01.c **** //
 702:../libs/nrf24l01.c **** // nRF24L01p_status_pipe_ready implementation.
 703:../libs/nrf24l01.c **** //
 704:../libs/nrf24l01.c **** byte nRF24L01p_status_pipe_ready(void)
 705:../libs/nrf24l01.c **** {
 196               		.loc 1 705 0
 197               		.cfi_startproc
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
 706:../libs/nrf24l01.c ****   return (nRF24L01p_status & nRF24L01p_MASK_STATUS_RX_P_NO) >> 1;
 202               		.loc 1 706 0
 203 0062 8091 0000 		lds r24,nRF24L01p_status
 204 0066 8E70      		andi r24,lo8(14)
 707:../libs/nrf24l01.c **** }
 205               		.loc 1 707 0
 206 0068 8695      		lsr r24
 207 006a 0895      		ret
 208               		.cfi_endproc
 209               	.LFE40:
 211               	.global	nRF24L01p_status_tx_full
 213               	nRF24L01p_status_tx_full:
 214               	.LFB41:
 708:../libs/nrf24l01.c **** 
 709:../libs/nrf24l01.c **** 
 710:../libs/nrf24l01.c **** //
 711:../libs/nrf24l01.c **** // nRF24L01p_status_tx_full implementation.
 712:../libs/nrf24l01.c **** //
 713:../libs/nrf24l01.c **** bool nRF24L01p_status_tx_full(void)
 714:../libs/nrf24l01.c **** {
 215               		.loc 1 714 0
 216               		.cfi_startproc
 217               	/* prologue: function */
 218               	/* frame size = 0 */
 219               	/* stack size = 0 */
 220               	.L__stack_usage = 0
 715:../libs/nrf24l01.c ****   return nRF24L01p_status & nRF24L01p_MASK_STATUS_TX_FULL;
 221               		.loc 1 715 0
 222 006c 8091 0000 		lds r24,nRF24L01p_status
 716:../libs/nrf24l01.c **** }
 223               		.loc 1 716 0
 224 0070 8170      		andi r24,lo8(1)
 225 0072 0895      		ret
 226               		.cfi_endproc
 227               	.LFE41:
 229               	.global	nRF24L01p_tx_fifo_write
 231               	nRF24L01p_tx_fifo_write:
 232               	.LFB45:
 717:../libs/nrf24l01.c **** 
 718:../libs/nrf24l01.c **** 
 719:../libs/nrf24l01.c **** // FIFO
 720:../libs/nrf24l01.c **** ///////
 721:../libs/nrf24l01.c **** 
 722:../libs/nrf24l01.c **** //
 723:../libs/nrf24l01.c **** // nRF24L01p_tx_fifo_is_reuse
 724:../libs/nrf24l01.c **** //
 725:../libs/nrf24l01.c **** bool nRF24L01p_tx_fifo_is_reuse(void)
 726:../libs/nrf24l01.c **** {
 727:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 728:../libs/nrf24l01.c ****          nRF24L01p_MASK_FIFO_STATUS_TX_REUSE;
 729:../libs/nrf24l01.c **** }
 730:../libs/nrf24l01.c **** 
 731:../libs/nrf24l01.c **** 
 732:../libs/nrf24l01.c **** //
 733:../libs/nrf24l01.c **** // nRF24L01p_tx_fifo_is_full
 734:../libs/nrf24l01.c **** //
 735:../libs/nrf24l01.c **** bool nRF24L01p_tx_fifo_is_full(void)
 736:../libs/nrf24l01.c **** {
 737:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 738:../libs/nrf24l01.c ****          nRF24L01p_MASK_FIFO_STATUS_TX_FULL;
 739:../libs/nrf24l01.c **** }
 740:../libs/nrf24l01.c **** 
 741:../libs/nrf24l01.c **** 
 742:../libs/nrf24l01.c **** //
 743:../libs/nrf24l01.c **** // nRF24L01p_tx_fifo_is_empty
 744:../libs/nrf24l01.c **** //
 745:../libs/nrf24l01.c **** bool nRF24L01p_tx_fifo_is_empty(void)
 746:../libs/nrf24l01.c **** {
 747:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 748:../libs/nrf24l01.c ****          nRF24L01p_MASK_FIFO_STATUS_TX_EMPTY;
 749:../libs/nrf24l01.c **** }
 750:../libs/nrf24l01.c **** 
 751:../libs/nrf24l01.c **** 
 752:../libs/nrf24l01.c **** //
 753:../libs/nrf24l01.c **** // nRF24L01p_tx_fifo_write implementation.
 754:../libs/nrf24l01.c **** //
 755:../libs/nrf24l01.c **** int nRF24L01p_tx_fifo_write(const byte *payload, byte size)
 756:../libs/nrf24l01.c **** {
 233               		.loc 1 756 0
 234               		.cfi_startproc
 235               	.LVL6:
 236 0074 CF92      		push r12
 237               	.LCFI0:
 238               		.cfi_def_cfa_offset 3
 239               		.cfi_offset 12, -2
 240 0076 DF92      		push r13
 241               	.LCFI1:
 242               		.cfi_def_cfa_offset 4
 243               		.cfi_offset 13, -3
 244 0078 FF92      		push r15
 245               	.LCFI2:
 246               		.cfi_def_cfa_offset 5
 247               		.cfi_offset 15, -4
 248 007a 0F93      		push r16
 249               	.LCFI3:
 250               		.cfi_def_cfa_offset 6
 251               		.cfi_offset 16, -5
 252 007c 1F93      		push r17
 253               	.LCFI4:
 254               		.cfi_def_cfa_offset 7
 255               		.cfi_offset 17, -6
 256 007e CF93      		push r28
 257               	.LCFI5:
 258               		.cfi_def_cfa_offset 8
 259               		.cfi_offset 28, -7
 260 0080 DF93      		push r29
 261               	.LCFI6:
 262               		.cfi_def_cfa_offset 9
 263               		.cfi_offset 29, -8
 264 0082 1F92      		push __zero_reg__
 265               	.LCFI7:
 266               		.cfi_def_cfa_offset 10
 267 0084 CDB7      		in r28,__SP_L__
 268 0086 DEB7      		in r29,__SP_H__
 269               	.LCFI8:
 270               		.cfi_def_cfa_register 28
 271               	/* prologue: function */
 272               	/* frame size = 1 */
 273               	/* stack size = 8 */
 274               	.L__stack_usage = 8
 275 0088 082F      		mov r16,r24
 276 008a 162F      		mov r17,r22
 757:../libs/nrf24l01.c ****   spi_start();
 277               		.loc 1 757 0
 278 008c 9983      		std Y+1,r25
 279 008e 0E94 0000 		call spi_start
 280               	.LVL7:
 758:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_W_TX_PAYLOAD);
 281               		.loc 1 758 0
 282 0092 80EA      		ldi r24,lo8(-96)
 283 0094 0E94 0000 		call spi_transfer
 284               	.LVL8:
 285 0098 F02E      		mov r15,r16
 286               	.LBB10:
 759:../libs/nrf24l01.c ****   for (byte i = 0; i < size; i++)
 287               		.loc 1 759 0
 288 009a C02E      		mov r12,r16
 289 009c 9981      		ldd r25,Y+1
 290 009e D92E      		mov r13,r25
 291               	.LVL9:
 292               	.L22:
 293 00a0 8C2D      		mov r24,r12
 294 00a2 8F19      		sub r24,r15
 295               		.loc 1 759 0 is_stmt 0 discriminator 1
 296 00a4 8117      		cp r24,r17
 297 00a6 00F4      		brsh .L24
 298               	.LVL10:
 760:../libs/nrf24l01.c ****     spi_transfer(*payload++);
 299               		.loc 1 760 0 is_stmt 1 discriminator 2
 300 00a8 F601      		movw r30,r12
 301 00aa 8191      		ld r24,Z+
 302               	.LVL11:
 303 00ac 6F01      		movw r12,r30
 304               	.LVL12:
 305 00ae 0E94 0000 		call spi_transfer
 306               	.LVL13:
 307 00b2 00C0      		rjmp .L22
 308               	.L24:
 309               	.LBE10:
 761:../libs/nrf24l01.c ****   spi_end();
 310               		.loc 1 761 0
 311 00b4 0E94 0000 		call spi_end
 312               	.LVL14:
 762:../libs/nrf24l01.c **** 
 763:../libs/nrf24l01.c ****   return size; // TODO: catch FIFO full IRQ.
 764:../libs/nrf24l01.c **** }
 313               		.loc 1 764 0
 314 00b8 812F      		mov r24,r17
 315 00ba 90E0      		ldi r25,0
 316               	/* epilogue start */
 317 00bc 0F90      		pop __tmp_reg__
 318 00be DF91      		pop r29
 319 00c0 CF91      		pop r28
 320 00c2 1F91      		pop r17
 321               	.LVL15:
 322 00c4 0F91      		pop r16
 323 00c6 FF90      		pop r15
 324 00c8 DF90      		pop r13
 325 00ca CF90      		pop r12
 326               	.LVL16:
 327 00cc 0895      		ret
 328               		.cfi_endproc
 329               	.LFE45:
 331               	.global	nRF24L01p_tx_fifo_flush
 333               	nRF24L01p_tx_fifo_flush:
 334               	.LFB46:
 765:../libs/nrf24l01.c **** 
 766:../libs/nrf24l01.c **** 
 767:../libs/nrf24l01.c **** //
 768:../libs/nrf24l01.c **** // nRF24L01p_tx_fifo_flush implementation.
 769:../libs/nrf24l01.c **** //
 770:../libs/nrf24l01.c **** void nRF24L01p_tx_fifo_flush(void)
 771:../libs/nrf24l01.c **** {
 335               		.loc 1 771 0
 336               		.cfi_startproc
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
 772:../libs/nrf24l01.c ****   spi_start();
 341               		.loc 1 772 0
 342 00ce 0E94 0000 		call spi_start
 343               	.LVL17:
 773:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_FLUSH_TX);
 344               		.loc 1 773 0
 345 00d2 81EE      		ldi r24,lo8(-31)
 346 00d4 0E94 0000 		call spi_transfer
 347               	.LVL18:
 774:../libs/nrf24l01.c ****   spi_end();
 348               		.loc 1 774 0
 349 00d8 0C94 0000 		jmp spi_end
 350               	.LVL19:
 351               		.cfi_endproc
 352               	.LFE46:
 354               	.global	nRF24L01p_rx_fifo_read
 356               	nRF24L01p_rx_fifo_read:
 357               	.LFB49:
 775:../libs/nrf24l01.c **** }
 776:../libs/nrf24l01.c **** 
 777:../libs/nrf24l01.c **** 
 778:../libs/nrf24l01.c **** //
 779:../libs/nrf24l01.c **** // nRF24L01p_rx_fifo_is_full
 780:../libs/nrf24l01.c **** //
 781:../libs/nrf24l01.c **** bool nRF24L01p_rx_fifo_is_full(void)
 782:../libs/nrf24l01.c **** {
 783:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 784:../libs/nrf24l01.c ****          nRF24L01p_MASK_FIFO_STATUS_RX_FULL;
 785:../libs/nrf24l01.c **** }
 786:../libs/nrf24l01.c **** 
 787:../libs/nrf24l01.c **** 
 788:../libs/nrf24l01.c **** //
 789:../libs/nrf24l01.c **** // nRF24L01p_rx_fifo_is_empty
 790:../libs/nrf24l01.c **** //
 791:../libs/nrf24l01.c **** bool nRF24L01p_rx_fifo_is_empty(void)
 792:../libs/nrf24l01.c **** {
 793:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 794:../libs/nrf24l01.c ****          nRF24L01p_MASK_FIFO_STATUS_RX_EMPTY;
 795:../libs/nrf24l01.c **** }
 796:../libs/nrf24l01.c **** 
 797:../libs/nrf24l01.c **** 
 798:../libs/nrf24l01.c **** //
 799:../libs/nrf24l01.c **** // nRF24L01p_rx_fifo_read implementation.
 800:../libs/nrf24l01.c **** //
 801:../libs/nrf24l01.c **** int nRF24L01p_rx_fifo_read(byte *payload, byte size)
 802:../libs/nrf24l01.c **** {
 358               		.loc 1 802 0
 359               		.cfi_startproc
 360               	.LVL20:
 361 00dc CF92      		push r12
 362               	.LCFI9:
 363               		.cfi_def_cfa_offset 3
 364               		.cfi_offset 12, -2
 365 00de DF92      		push r13
 366               	.LCFI10:
 367               		.cfi_def_cfa_offset 4
 368               		.cfi_offset 13, -3
 369 00e0 FF92      		push r15
 370               	.LCFI11:
 371               		.cfi_def_cfa_offset 5
 372               		.cfi_offset 15, -4
 373 00e2 0F93      		push r16
 374               	.LCFI12:
 375               		.cfi_def_cfa_offset 6
 376               		.cfi_offset 16, -5
 377 00e4 1F93      		push r17
 378               	.LCFI13:
 379               		.cfi_def_cfa_offset 7
 380               		.cfi_offset 17, -6
 381 00e6 CF93      		push r28
 382               	.LCFI14:
 383               		.cfi_def_cfa_offset 8
 384               		.cfi_offset 28, -7
 385 00e8 DF93      		push r29
 386               	.LCFI15:
 387               		.cfi_def_cfa_offset 9
 388               		.cfi_offset 29, -8
 389 00ea 1F92      		push __zero_reg__
 390               	.LCFI16:
 391               		.cfi_def_cfa_offset 10
 392 00ec CDB7      		in r28,__SP_L__
 393 00ee DEB7      		in r29,__SP_H__
 394               	.LCFI17:
 395               		.cfi_def_cfa_register 28
 396               	/* prologue: function */
 397               	/* frame size = 1 */
 398               	/* stack size = 8 */
 399               	.L__stack_usage = 8
 400 00f0 082F      		mov r16,r24
 401 00f2 162F      		mov r17,r22
 803:../libs/nrf24l01.c ****   spi_start();
 402               		.loc 1 803 0
 403 00f4 9983      		std Y+1,r25
 404 00f6 0E94 0000 		call spi_start
 405               	.LVL21:
 804:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_R_RX_PAYLOAD);
 406               		.loc 1 804 0
 407 00fa 81E6      		ldi r24,lo8(97)
 408 00fc 0E94 0000 		call spi_transfer
 409               	.LVL22:
 410 0100 F02E      		mov r15,r16
 411               	.LBB11:
 805:../libs/nrf24l01.c ****   for (byte i = 0; i < size; i++)
 412               		.loc 1 805 0
 413 0102 C02E      		mov r12,r16
 414 0104 9981      		ldd r25,Y+1
 415 0106 D92E      		mov r13,r25
 416               	.LVL23:
 417               	.L27:
 418 0108 8C2D      		mov r24,r12
 419 010a 8F19      		sub r24,r15
 420               		.loc 1 805 0 is_stmt 0 discriminator 1
 421 010c 8117      		cp r24,r17
 422 010e 00F4      		brsh .L29
 423               	.LVL24:
 806:../libs/nrf24l01.c ****     *payload++ = spi_transfer(nRF24L01p_SPI_NOP);
 424               		.loc 1 806 0 is_stmt 1 discriminator 2
 425 0110 8FEF      		ldi r24,lo8(-1)
 426 0112 0E94 0000 		call spi_transfer
 427               	.LVL25:
 428 0116 F601      		movw r30,r12
 429 0118 8193      		st Z+,r24
 430               	.LVL26:
 431 011a 6F01      		movw r12,r30
 432               	.LVL27:
 433 011c 00C0      		rjmp .L27
 434               	.LVL28:
 435               	.L29:
 436               	.LBE11:
 807:../libs/nrf24l01.c ****   spi_end();
 437               		.loc 1 807 0
 438 011e 0E94 0000 		call spi_end
 439               	.LVL29:
 808:../libs/nrf24l01.c **** 
 809:../libs/nrf24l01.c ****   return size;
 810:../libs/nrf24l01.c **** }
 440               		.loc 1 810 0
 441 0122 812F      		mov r24,r17
 442 0124 90E0      		ldi r25,0
 443               	/* epilogue start */
 444 0126 0F90      		pop __tmp_reg__
 445 0128 DF91      		pop r29
 446 012a CF91      		pop r28
 447 012c 1F91      		pop r17
 448               	.LVL30:
 449 012e 0F91      		pop r16
 450 0130 FF90      		pop r15
 451 0132 DF90      		pop r13
 452 0134 CF90      		pop r12
 453               	.LVL31:
 454 0136 0895      		ret
 455               		.cfi_endproc
 456               	.LFE49:
 458               	.global	nRF24L01p_rx_fifo_flush
 460               	nRF24L01p_rx_fifo_flush:
 461               	.LFB50:
 811:../libs/nrf24l01.c **** 
 812:../libs/nrf24l01.c **** 
 813:../libs/nrf24l01.c **** //
 814:../libs/nrf24l01.c **** // nRF24L01p_rx_fifo_flush implementation.
 815:../libs/nrf24l01.c **** //
 816:../libs/nrf24l01.c **** void nRF24L01p_rx_fifo_flush(void)
 817:../libs/nrf24l01.c **** {
 462               		.loc 1 817 0
 463               		.cfi_startproc
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 818:../libs/nrf24l01.c ****   spi_start();
 468               		.loc 1 818 0
 469 0138 0E94 0000 		call spi_start
 470               	.LVL32:
 819:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_FLUSH_RX);
 471               		.loc 1 819 0
 472 013c 82EE      		ldi r24,lo8(-30)
 473 013e 0E94 0000 		call spi_transfer
 474               	.LVL33:
 820:../libs/nrf24l01.c ****   spi_end();
 475               		.loc 1 820 0
 476 0142 0C94 0000 		jmp spi_end
 477               	.LVL34:
 478               		.cfi_endproc
 479               	.LFE50:
 481               	.global	nRF24L01p_read_status
 483               	nRF24L01p_read_status:
 484               	.LFB54:
 821:../libs/nrf24l01.c **** }
 822:../libs/nrf24l01.c **** 
 823:../libs/nrf24l01.c **** 
 824:../libs/nrf24l01.c **** // OBSERVE
 825:../libs/nrf24l01.c **** //////////
 826:../libs/nrf24l01.c **** 
 827:../libs/nrf24l01.c **** 
 828:../libs/nrf24l01.c **** //
 829:../libs/nrf24l01.c **** // nRF24L01p_packets_lost implementation.
 830:../libs/nrf24l01.c **** //
 831:../libs/nrf24l01.c **** byte nRF24L01p_packets_lost(void)
 832:../libs/nrf24l01.c **** {
 833:../libs/nrf24l01.c ****   return (nRF24L01p_get_register8(nRF24L01p_REGISTER_OBSERVE_TX) &
 834:../libs/nrf24l01.c ****          nRF24L01p_MASK_OBSERVE_TX_PLOS_CNT) >> 4;
 835:../libs/nrf24l01.c **** }
 836:../libs/nrf24l01.c **** 
 837:../libs/nrf24l01.c **** 
 838:../libs/nrf24l01.c **** //
 839:../libs/nrf24l01.c **** // nRF24L01p_packets_retransmitted implementation.
 840:../libs/nrf24l01.c **** //
 841:../libs/nrf24l01.c **** byte nRF24L01p_packets_retransmitted(void)
 842:../libs/nrf24l01.c **** {
 843:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_OBSERVE_TX) &
 844:../libs/nrf24l01.c ****          nRF24L01p_MASK_OBSERVE_TX_ARC_CNT;
 845:../libs/nrf24l01.c **** }
 846:../libs/nrf24l01.c **** 
 847:../libs/nrf24l01.c **** 
 848:../libs/nrf24l01.c **** // IO
 849:../libs/nrf24l01.c **** /////
 850:../libs/nrf24l01.c **** 
 851:../libs/nrf24l01.c **** 
 852:../libs/nrf24l01.c **** //
 853:../libs/nrf24l01.c **** // nRF24L01p_read implementation.
 854:../libs/nrf24l01.c **** //
 855:../libs/nrf24l01.c **** int nRF24L01p_read(byte *restrict dst, size_t count, byte pipe)
 856:../libs/nrf24l01.c **** {
 857:../libs/nrf24l01.c ****   if (!nRF24L01p_rx_pipes[pipe].configured)
 858:../libs/nrf24l01.c ****     return -1;
 859:../libs/nrf24l01.c **** 
 860:../libs/nrf24l01.c ****   if (!nRF24L01p_read_status(pipe))
 861:../libs/nrf24l01.c ****     return -2;
 862:../libs/nrf24l01.c **** 
 863:../libs/nrf24l01.c ****   // TODO: Think through calling read, while already reading.
 864:../libs/nrf24l01.c ****   nRF24L01p_disable();
 865:../libs/nrf24l01.c **** 
 866:../libs/nrf24l01.c ****   int ret = 0;
 867:../libs/nrf24l01.c ****   switch (pipe)
 868:../libs/nrf24l01.c ****   {
 869:../libs/nrf24l01.c ****     case 0:
 870:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, TRUE);
 871:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P0, nRF24L01p_rx_pipes[pipe].addre
 872:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P0, nRF24L01p_rx_pipes[pipe].p
 873:../libs/nrf24l01.c ****       break;
 874:../libs/nrf24l01.c ****     case 1:
 875:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P1, TRUE);
 876:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P1, nRF24L01p_rx_pipes[pipe].addre
 877:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P1, nRF24L01p_rx_pipes[pipe].p
 878:../libs/nrf24l01.c ****       break;
 879:../libs/nrf24l01.c ****     case 2:
 880:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P2, TRUE);
 881:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P2, nRF24L01p_rx_pipes[pipe].addre
 882:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P2, nRF24L01p_rx_pipes[pipe].p
 883:../libs/nrf24l01.c ****       break;
 884:../libs/nrf24l01.c ****     case 3:
 885:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P3, TRUE);
 886:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P3, nRF24L01p_rx_pipes[pipe].addre
 887:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P3, nRF24L01p_rx_pipes[pipe].p
 888:../libs/nrf24l01.c ****       break;
 889:../libs/nrf24l01.c ****     case 4:
 890:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P4, TRUE);
 891:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P4, nRF24L01p_rx_pipes[pipe].addre
 892:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P4, nRF24L01p_rx_pipes[pipe].p
 893:../libs/nrf24l01.c ****       break;
 894:../libs/nrf24l01.c ****     case 5:
 895:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P5, TRUE);
 896:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P5, nRF24L01p_rx_pipes[pipe].addre
 897:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_PW_P5, nRF24L01p_rx_pipes[pipe].p
 898:../libs/nrf24l01.c ****       break;
 899:../libs/nrf24l01.c ****     default:
 900:../libs/nrf24l01.c ****       ret = -1;
 901:../libs/nrf24l01.c ****   }
 902:../libs/nrf24l01.c **** 
 903:../libs/nrf24l01.c ****   if (ret != 0)
 904:../libs/nrf24l01.c ****     return -3;
 905:../libs/nrf24l01.c **** 
 906:../libs/nrf24l01.c ****   nRF24L01p_rx_pipes[pipe].data = dst;
 907:../libs/nrf24l01.c ****   nRF24L01p_rx_pipes[pipe].remaining = count;
 908:../libs/nrf24l01.c **** 
 909:../libs/nrf24l01.c ****   // Start receiving if we weren't already.
 910:../libs/nrf24l01.c ****   nRF24L01p_enable();
 911:../libs/nrf24l01.c **** 
 912:../libs/nrf24l01.c ****   return 0;
 913:../libs/nrf24l01.c **** }
 914:../libs/nrf24l01.c **** 
 915:../libs/nrf24l01.c **** 
 916:../libs/nrf24l01.c **** //
 917:../libs/nrf24l01.c **** // nRF24L01p_read_status implementation.
 918:../libs/nrf24l01.c **** //
 919:../libs/nrf24l01.c **** int nRF24L01p_read_status(byte pipe)
 920:../libs/nrf24l01.c **** {
 485               		.loc 1 920 0
 486               		.cfi_startproc
 487               	.LVL35:
 488               	/* prologue: function */
 489               	/* frame size = 0 */
 490               	/* stack size = 0 */
 491               	.L__stack_usage = 0
 921:../libs/nrf24l01.c ****   return nRF24L01p_rx_pipes[pipe].remaining == 0;
 492               		.loc 1 921 0
 493 0146 9EE0      		ldi r25,lo8(14)
 494 0148 899F      		mul r24,r25
 495 014a F001      		movw r30,r0
 496 014c 1124      		clr __zero_reg__
 497 014e E050      		subi r30,lo8(-(nRF24L01p_rx_pipes))
 498 0150 F040      		sbci r31,hi8(-(nRF24L01p_rx_pipes))
 499 0152 81E0      		ldi r24,lo8(1)
 500 0154 90E0      		ldi r25,0
 501               	.LVL36:
 502 0156 2485      		ldd r18,Z+12
 503 0158 3585      		ldd r19,Z+13
 504 015a 232B      		or r18,r19
 505 015c 01F0      		breq .L32
 506 015e 80E0      		ldi r24,0
 507 0160 90E0      		ldi r25,0
 508               	.L32:
 922:../libs/nrf24l01.c **** }
 509               		.loc 1 922 0
 510 0162 0895      		ret
 511               		.cfi_endproc
 512               	.LFE54:
 514               	.global	nRF24L01p_write_status
 516               	nRF24L01p_write_status:
 517               	.LFB56:
 923:../libs/nrf24l01.c **** 
 924:../libs/nrf24l01.c **** 
 925:../libs/nrf24l01.c **** //
 926:../libs/nrf24l01.c **** // nRF24L01p_write implementation.
 927:../libs/nrf24l01.c **** //
 928:../libs/nrf24l01.c **** int nRF24L01p_write(const byte *restrict src, size_t count, byte pipe)
 929:../libs/nrf24l01.c **** {
 930:../libs/nrf24l01.c ****   if (!nRF24L01p_rx_pipes[pipe].configured)
 931:../libs/nrf24l01.c ****     return -1;
 932:../libs/nrf24l01.c **** 
 933:../libs/nrf24l01.c ****   if (!nRF24L01p_write_status())
 934:../libs/nrf24l01.c ****     return -2;
 935:../libs/nrf24l01.c **** 
 936:../libs/nrf24l01.c ****   // TODO: Dynamic width.
 937:../libs/nrf24l01.c **** 
 938:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.address = nRF24L01p_rx_pipes[pipe].address;
 939:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.payload_width = nRF24L01p_rx_pipes[pipe].payload_width;
 940:../libs/nrf24l01.c **** 
 941:../libs/nrf24l01.c ****   // Datasheet says to always use RX_ADDR_P0
 942:../libs/nrf24l01.c ****   nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, TRUE);
 943:../libs/nrf24l01.c ****   nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P0,
 944:../libs/nrf24l01.c ****                            nRF24L01p_tx_pipe.address);
 945:../libs/nrf24l01.c ****   nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_ADDR_P0,
 946:../libs/nrf24l01.c ****                                  nRF24L01p_tx_pipe.payload_width);
 947:../libs/nrf24l01.c **** 
 948:../libs/nrf24l01.c ****   nRF24L01p_config_address(nRF24L01p_REGISTER_TX_ADDR,
 949:../libs/nrf24l01.c ****                            nRF24L01p_tx_pipe.address);
 950:../libs/nrf24l01.c **** 
 951:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.data = src;
 952:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.remaining = count;
 953:../libs/nrf24l01.c **** 
 954:../libs/nrf24l01.c ****   // Fill TX FIFO, then start transmitting.
 955:../libs/nrf24l01.c ****   nRF24L01p_process_tx_payload();
 956:../libs/nrf24l01.c **** 
 957:../libs/nrf24l01.c ****   return 0;
 958:../libs/nrf24l01.c **** }
 959:../libs/nrf24l01.c **** 
 960:../libs/nrf24l01.c **** 
 961:../libs/nrf24l01.c **** //
 962:../libs/nrf24l01.c **** // nRF24L01p_write_status implementation.
 963:../libs/nrf24l01.c **** //
 964:../libs/nrf24l01.c **** int nRF24L01p_write_status(void)
 965:../libs/nrf24l01.c **** {
 518               		.loc 1 965 0
 519               		.cfi_startproc
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 0 */
 523               	.L__stack_usage = 0
 966:../libs/nrf24l01.c ****   return nRF24L01p_tx_pipe.remaining == 0;
 524               		.loc 1 966 0
 525 0164 81E0      		ldi r24,lo8(1)
 526 0166 90E0      		ldi r25,0
 527 0168 2091 0000 		lds r18,nRF24L01p_tx_pipe+11
 528 016c 3091 0000 		lds r19,nRF24L01p_tx_pipe+11+1
 529 0170 232B      		or r18,r19
 530 0172 01F0      		breq .L37
 531 0174 80E0      		ldi r24,0
 532 0176 90E0      		ldi r25,0
 533               	.L37:
 967:../libs/nrf24l01.c **** }
 534               		.loc 1 967 0
 535 0178 0895      		ret
 536               		.cfi_endproc
 537               	.LFE56:
 539               	.global	nRF24L01p_config_pipe
 541               	nRF24L01p_config_pipe:
 542               	.LFB57:
 968:../libs/nrf24l01.c **** 
 969:../libs/nrf24l01.c **** 
 970:../libs/nrf24l01.c **** // PIPE FUNCTIONS
 971:../libs/nrf24l01.c **** /////////////////
 972:../libs/nrf24l01.c **** 
 973:../libs/nrf24l01.c **** 
 974:../libs/nrf24l01.c **** //
 975:../libs/nrf24l01.c **** // nRF24L01p_config_pipe implementation.
 976:../libs/nrf24l01.c **** //
 977:../libs/nrf24l01.c **** int nRF24L01p_config_pipe(byte pipe,
 978:../libs/nrf24l01.c ****                           long long unsigned int address,
 979:../libs/nrf24l01.c ****                           byte payload_width)
 980:../libs/nrf24l01.c **** {
 543               		.loc 1 980 0
 544               		.cfi_startproc
 545               	.LVL37:
 546 017a EF92      		push r14
 547               	.LCFI18:
 548               		.cfi_def_cfa_offset 3
 549               		.cfi_offset 14, -2
 550 017c 0F93      		push r16
 551               	.LCFI19:
 552               		.cfi_def_cfa_offset 4
 553               		.cfi_offset 16, -3
 554 017e 1F93      		push r17
 555               	.LCFI20:
 556               		.cfi_def_cfa_offset 5
 557               		.cfi_offset 17, -4
 558               	/* prologue: function */
 559               	/* frame size = 0 */
 560               	/* stack size = 3 */
 561               	.L__stack_usage = 3
 981:../libs/nrf24l01.c ****   nRF24L01p_rx_pipes[pipe].address = address;
 562               		.loc 1 981 0
 563 0180 9EE0      		ldi r25,lo8(14)
 564 0182 899F      		mul r24,r25
 565 0184 D001      		movw r26,r0
 566 0186 1124      		clr __zero_reg__
 567 0188 A050      		subi r26,lo8(-(nRF24L01p_rx_pipes))
 568 018a B040      		sbci r27,hi8(-(nRF24L01p_rx_pipes))
 569 018c FD01      		movw r30,r26
 570 018e 3196      		adiw r30,1
 571 0190 1196      		adiw r26,1
 572 0192 0C93      		st X,r16
 573 0194 1197      		sbiw r26,1
 574 0196 1183      		std Z+1,r17
 575 0198 2283      		std Z+2,r18
 576 019a 3383      		std Z+3,r19
 577 019c 4483      		std Z+4,r20
 578 019e 5583      		std Z+5,r21
 579 01a0 6683      		std Z+6,r22
 580 01a2 7783      		std Z+7,r23
 982:../libs/nrf24l01.c ****   nRF24L01p_rx_pipes[pipe].payload_width = payload_width;
 581               		.loc 1 982 0
 582 01a4 1996      		adiw r26,9
 583 01a6 EC92      		st X,r14
 584 01a8 1997      		sbiw r26,9
 983:../libs/nrf24l01.c ****   nRF24L01p_rx_pipes[pipe].configured = TRUE;
 585               		.loc 1 983 0
 586 01aa 81E0      		ldi r24,lo8(1)
 587               	.LVL38:
 588 01ac 8C93      		st X,r24
 984:../libs/nrf24l01.c **** 
 985:../libs/nrf24l01.c ****   return 0;
 986:../libs/nrf24l01.c **** }
 589               		.loc 1 986 0
 590 01ae 80E0      		ldi r24,0
 591 01b0 90E0      		ldi r25,0
 592               	/* epilogue start */
 593 01b2 1F91      		pop r17
 594 01b4 0F91      		pop r16
 595               	.LVL39:
 596 01b6 EF90      		pop r14
 597               	.LVL40:
 598 01b8 0895      		ret
 599               		.cfi_endproc
 600               	.LFE57:
 602               	.global	nRF24L01p_enable
 604               	nRF24L01p_enable:
 605               	.LFB58:
 987:../libs/nrf24l01.c **** 
 988:../libs/nrf24l01.c **** 
 989:../libs/nrf24l01.c **** // Utility
 990:../libs/nrf24l01.c **** //////////
 991:../libs/nrf24l01.c **** 
 992:../libs/nrf24l01.c **** 
 993:../libs/nrf24l01.c **** //
 994:../libs/nrf24l01.c **** // nRF24L01p_enable implementation.
 995:../libs/nrf24l01.c **** //
 996:../libs/nrf24l01.c **** void nRF24L01p_enable(void)
 997:../libs/nrf24l01.c **** {
 606               		.loc 1 997 0
 607               		.cfi_startproc
 608               	/* prologue: function */
 609               	/* frame size = 0 */
 610               	/* stack size = 0 */
 611               	.L__stack_usage = 0
 998:../libs/nrf24l01.c ****   // Pull CE high.
 999:../libs/nrf24l01.c ****   PORTB |= _BV(PORTB1);
 612               		.loc 1 999 0
 613 01ba 299A      		sbi 0x5,1
 614               	.LVL41:
 615               	.LBB12:
 616               	.LBB13:
 617               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:/usr/lib/avr/include/util/delay.h **** 
 166:/usr/lib/avr/include/util/delay.h **** #else
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/avr/include/util/delay.h **** 
 235:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/avr/include/util/delay.h **** 
 238:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h **** 	#else
 242:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/avr/include/util/delay.h **** 	#endif
 245:/usr/lib/avr/include/util/delay.h **** 
 246:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 618               		.loc 2 246 0
 619 01bc 87E0      		ldi r24,lo8(519)
 620 01be 92E0      		ldi r25,hi8(519)
 621 01c0 0197      		1: sbiw r24,1
 622 01c2 01F4      		brne 1b
 623 01c4 00C0      		rjmp .
 624 01c6 0000      		nop
 625 01c8 0895      		ret
 626               	.LBE13:
 627               	.LBE12:
 628               		.cfi_endproc
 629               	.LFE58:
 631               	.global	nRF24L01p_disable
 633               	nRF24L01p_disable:
 634               	.LFB59:
1000:../libs/nrf24l01.c ****   _delay_us(nRF24L01p_TIMING_TSTBY2A_US);
1001:../libs/nrf24l01.c **** }
1002:../libs/nrf24l01.c **** 
1003:../libs/nrf24l01.c **** 
1004:../libs/nrf24l01.c **** //
1005:../libs/nrf24l01.c **** // nRF24L01p_disable implementation.
1006:../libs/nrf24l01.c **** //
1007:../libs/nrf24l01.c **** void nRF24L01p_disable(void)
1008:../libs/nrf24l01.c **** {
 635               		.loc 1 1008 0
 636               		.cfi_startproc
 637               	/* prologue: function */
 638               	/* frame size = 0 */
 639               	/* stack size = 0 */
 640               	.L__stack_usage = 0
1009:../libs/nrf24l01.c ****   // Pull CE high.
1010:../libs/nrf24l01.c ****   PORTB &= ~_BV(PORTB1);
 641               		.loc 1 1010 0
 642 01ca 2998      		cbi 0x5,1
 643 01cc 0895      		ret
 644               		.cfi_endproc
 645               	.LFE59:
 647               	.global	nRF24L01p_get_register8
 649               	nRF24L01p_get_register8:
 650               	.LFB60:
1011:../libs/nrf24l01.c **** }
1012:../libs/nrf24l01.c **** 
1013:../libs/nrf24l01.c **** 
1014:../libs/nrf24l01.c **** //
1015:../libs/nrf24l01.c **** // nRF24L01p_get_register8 implementation.
1016:../libs/nrf24l01.c **** //
1017:../libs/nrf24l01.c **** byte nRF24L01p_get_register8(byte address)
1018:../libs/nrf24l01.c **** {
 651               		.loc 1 1018 0
 652               		.cfi_startproc
 653               	.LVL42:
 654 01ce CF93      		push r28
 655               	.LCFI21:
 656               		.cfi_def_cfa_offset 3
 657               		.cfi_offset 28, -2
 658 01d0 DF93      		push r29
 659               	.LCFI22:
 660               		.cfi_def_cfa_offset 4
 661               		.cfi_offset 29, -3
 662 01d2 1F92      		push __zero_reg__
 663               	.LCFI23:
 664               		.cfi_def_cfa_offset 5
 665 01d4 CDB7      		in r28,__SP_L__
 666 01d6 DEB7      		in r29,__SP_H__
 667               	.LCFI24:
 668               		.cfi_def_cfa_register 28
 669               	/* prologue: function */
 670               	/* frame size = 1 */
 671               	/* stack size = 3 */
 672               	.L__stack_usage = 3
1019:../libs/nrf24l01.c ****   spi_start();
 673               		.loc 1 1019 0
 674 01d8 8983      		std Y+1,r24
 675 01da 0E94 0000 		call spi_start
 676               	.LVL43:
1020:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_R_REGISTER |
 677               		.loc 1 1020 0
 678 01de 8981      		ldd r24,Y+1
 679 01e0 8F71      		andi r24,lo8(31)
 680 01e2 0E94 0000 		call spi_transfer
 681               	.LVL44:
1021:../libs/nrf24l01.c ****                (address & nRF24L01p_SPI_RW_REGISTER_MASK));
1022:../libs/nrf24l01.c ****   byte response = spi_transfer(nRF24L01p_SPI_NOP);
 682               		.loc 1 1022 0
 683 01e6 8FEF      		ldi r24,lo8(-1)
 684 01e8 0E94 0000 		call spi_transfer
 685               	.LVL45:
1023:../libs/nrf24l01.c ****   spi_end();
 686               		.loc 1 1023 0
 687 01ec 8983      		std Y+1,r24
 688 01ee 0E94 0000 		call spi_end
 689               	.LVL46:
1024:../libs/nrf24l01.c **** 
1025:../libs/nrf24l01.c ****   return response;
1026:../libs/nrf24l01.c **** }
 690               		.loc 1 1026 0
 691 01f2 8981      		ldd r24,Y+1
 692               	/* epilogue start */
 693 01f4 0F90      		pop __tmp_reg__
 694 01f6 DF91      		pop r29
 695 01f8 CF91      		pop r28
 696 01fa 0895      		ret
 697               		.cfi_endproc
 698               	.LFE60:
 700               	.global	nRF24L01p_get_payload_width
 702               	nRF24L01p_get_payload_width:
 703               	.LFB32:
 615:../libs/nrf24l01.c **** {
 704               		.loc 1 615 0
 705               		.cfi_startproc
 706               	.LVL47:
 707               	/* prologue: function */
 708               	/* frame size = 0 */
 709               	/* stack size = 0 */
 710               	.L__stack_usage = 0
 616:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_PW_P0 ||
 711               		.loc 1 616 0
 712 01fc 9FEE      		ldi r25,lo8(-17)
 713 01fe 980F      		add r25,r24
 714 0200 9630      		cpi r25,lo8(6)
 715 0202 00F4      		brsh .L46
 624:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(reg);
 716               		.loc 1 624 0
 717 0204 0C94 0000 		jmp nRF24L01p_get_register8
 718               	.LVL48:
 719               	.L46:
 625:../libs/nrf24l01.c **** }
 720               		.loc 1 625 0
 721 0208 80E0      		ldi r24,0
 722               	.LVL49:
 723 020a 0895      		ret
 724               		.cfi_endproc
 725               	.LFE32:
 727               	.global	nRF24L01p_process_rx_payload
 729               	nRF24L01p_process_rx_payload:
 730               	.LFB12:
 214:../libs/nrf24l01.c **** {
 731               		.loc 1 214 0
 732               		.cfi_startproc
 733               	.LVL50:
 734 020c DF92      		push r13
 735               	.LCFI25:
 736               		.cfi_def_cfa_offset 3
 737               		.cfi_offset 13, -2
 738 020e EF92      		push r14
 739               	.LCFI26:
 740               		.cfi_def_cfa_offset 4
 741               		.cfi_offset 14, -3
 742 0210 FF92      		push r15
 743               	.LCFI27:
 744               		.cfi_def_cfa_offset 5
 745               		.cfi_offset 15, -4
 746 0212 0F93      		push r16
 747               	.LCFI28:
 748               		.cfi_def_cfa_offset 6
 749               		.cfi_offset 16, -5
 750 0214 1F93      		push r17
 751               	.LCFI29:
 752               		.cfi_def_cfa_offset 7
 753               		.cfi_offset 17, -6
 754 0216 CF93      		push r28
 755               	.LCFI30:
 756               		.cfi_def_cfa_offset 8
 757               		.cfi_offset 28, -7
 758 0218 DF93      		push r29
 759               	.LCFI31:
 760               		.cfi_def_cfa_offset 9
 761               		.cfi_offset 29, -8
 762               	/* prologue: function */
 763               	/* frame size = 0 */
 764               	/* stack size = 7 */
 765               	.L__stack_usage = 7
 766 021a C82F      		mov r28,r24
 216:../libs/nrf24l01.c ****   byte payload_width = nRF24L01p_get_payload_width(nRF24L01p_REGISTER_RX_PW_P0 + pipe);
 767               		.loc 1 216 0
 768 021c 81E1      		ldi r24,lo8(17)
 769               	.LVL51:
 770 021e 8C0F      		add r24,r28
 771 0220 0E94 0000 		call nRF24L01p_get_payload_width
 772               	.LVL52:
 773 0224 D82E      		mov r13,r24
 774               	.LVL53:
 218:../libs/nrf24l01.c ****   if (nRF24L01p_rx_pipes[pipe].remaining == 0)
 775               		.loc 1 218 0
 776 0226 8EE0      		ldi r24,lo8(14)
 777 0228 C89F      		mul r28,r24
 778 022a E001      		movw r28,r0
 779 022c 1124      		clr __zero_reg__
 780               	.LVL54:
 781 022e C050      		subi r28,lo8(-(nRF24L01p_rx_pipes))
 782 0230 D040      		sbci r29,hi8(-(nRF24L01p_rx_pipes))
 783 0232 EC84      		ldd r14,Y+12
 784 0234 FD84      		ldd r15,Y+13
 785 0236 E114      		cp r14,__zero_reg__
 786 0238 F104      		cpc r15,__zero_reg__
 787 023a 01F4      		brne .L48
 223:../libs/nrf24l01.c ****     spi_start();
 788               		.loc 1 223 0
 789 023c 0E94 0000 		call spi_start
 790               	.LVL55:
 224:../libs/nrf24l01.c ****     spi_transfer(nRF24L01p_SPI_R_RX_PAYLOAD);
 791               		.loc 1 224 0
 792 0240 81E6      		ldi r24,lo8(97)
 793 0242 0E94 0000 		call spi_transfer
 794               	.LVL56:
 795               	.LBB14:
 225:../libs/nrf24l01.c ****     for (byte i = 0; i < payload_width; i++)
 796               		.loc 1 225 0
 797 0246 C0E0      		ldi r28,0
 798               	.LVL57:
 799               	.L49:
 225:../libs/nrf24l01.c ****     for (byte i = 0; i < payload_width; i++)
 800               		.loc 1 225 0 is_stmt 0 discriminator 1
 801 0248 CD15      		cp r28,r13
 802 024a 01F0      		breq .L53
 226:../libs/nrf24l01.c ****       spi_transfer(nRF24L01p_SPI_NOP);
 803               		.loc 1 226 0 is_stmt 1 discriminator 2
 804 024c 8FEF      		ldi r24,lo8(-1)
 805 024e 0E94 0000 		call spi_transfer
 806               	.LVL58:
 225:../libs/nrf24l01.c ****     for (byte i = 0; i < payload_width; i++)
 807               		.loc 1 225 0 discriminator 2
 808 0252 CF5F      		subi r28,lo8(-(1))
 809               	.LVL59:
 810 0254 00C0      		rjmp .L49
 811               	.L53:
 812               	/* epilogue start */
 813               	.LBE14:
 250:../libs/nrf24l01.c **** }
 814               		.loc 1 250 0
 815 0256 DF91      		pop r29
 816 0258 CF91      		pop r28
 817               	.LVL60:
 818 025a 1F91      		pop r17
 819 025c 0F91      		pop r16
 820 025e FF90      		pop r15
 821 0260 EF90      		pop r14
 822 0262 DF90      		pop r13
 823               	.LVL61:
 227:../libs/nrf24l01.c ****     spi_end();
 824               		.loc 1 227 0
 825 0264 0C94 0000 		jmp spi_end
 826               	.LVL62:
 827               	.L48:
 235:../libs/nrf24l01.c ****     if (nRF24L01p_rx_pipes[pipe].remaining < payload_width)
 828               		.loc 1 235 0
 829 0268 0D2D      		mov r16,r13
 830 026a 10E0      		ldi r17,0
 831 026c E016      		cp r14,r16
 832 026e F106      		cpc r15,r17
 833 0270 00F4      		brsh .L51
 834               	.LBB15:
 237:../libs/nrf24l01.c ****       byte *payload = malloc(payload_width);
 835               		.loc 1 237 0
 836 0272 C801      		movw r24,r16
 837 0274 0E94 0000 		call malloc
 838               	.LVL63:
 839 0278 8C01      		movw r16,r24
 840               	.LVL64:
 238:../libs/nrf24l01.c ****       nRF24L01p_rx_fifo_read(payload, payload_width);
 841               		.loc 1 238 0
 842 027a 6D2D      		mov r22,r13
 843 027c 0E94 0000 		call nRF24L01p_rx_fifo_read
 844               	.LVL65:
 239:../libs/nrf24l01.c ****       memcpy(nRF24L01p_rx_pipes[pipe].data, payload, nRF24L01p_rx_pipes[pipe].remaining);
 845               		.loc 1 239 0
 846 0280 A701      		movw r20,r14
 847 0282 B801      		movw r22,r16
 848 0284 8A85      		ldd r24,Y+10
 849 0286 9B85      		ldd r25,Y+11
 850 0288 0E94 0000 		call memcpy
 851               	.LVL66:
 240:../libs/nrf24l01.c ****       free(payload);
 852               		.loc 1 240 0
 853 028c C801      		movw r24,r16
 854 028e 0E94 0000 		call free
 855               	.LVL67:
 241:../libs/nrf24l01.c ****       nRF24L01p_rx_pipes[pipe].remaining = 0;
 856               		.loc 1 241 0
 857 0292 1D86      		std Y+13,__zero_reg__
 858 0294 1C86      		std Y+12,__zero_reg__
 859               	.LBE15:
 860 0296 00C0      		rjmp .L47
 861               	.LVL68:
 862               	.L51:
 245:../libs/nrf24l01.c ****       nRF24L01p_rx_fifo_read(nRF24L01p_rx_pipes[pipe].data, payload_width);
 863               		.loc 1 245 0
 864 0298 EA84      		ldd r14,Y+10
 865 029a FB84      		ldd r15,Y+11
 866 029c 6D2D      		mov r22,r13
 867 029e C701      		movw r24,r14
 868 02a0 0E94 0000 		call nRF24L01p_rx_fifo_read
 869               	.LVL69:
 246:../libs/nrf24l01.c ****       nRF24L01p_rx_pipes[pipe].data = nRF24L01p_rx_pipes[pipe].data + payload_width;
 870               		.loc 1 246 0
 871 02a4 E00E      		add r14,r16
 872 02a6 F11E      		adc r15,r17
 873 02a8 FB86      		std Y+11,r15
 874 02aa EA86      		std Y+10,r14
 247:../libs/nrf24l01.c ****       nRF24L01p_rx_pipes[pipe].remaining = nRF24L01p_rx_pipes[pipe].remaining - payload_width;
 875               		.loc 1 247 0
 876 02ac 8C85      		ldd r24,Y+12
 877 02ae 9D85      		ldd r25,Y+13
 878 02b0 801B      		sub r24,r16
 879 02b2 910B      		sbc r25,r17
 880 02b4 9D87      		std Y+13,r25
 881 02b6 8C87      		std Y+12,r24
 882               	.L47:
 883               	/* epilogue start */
 250:../libs/nrf24l01.c **** }
 884               		.loc 1 250 0
 885 02b8 DF91      		pop r29
 886 02ba CF91      		pop r28
 887 02bc 1F91      		pop r17
 888 02be 0F91      		pop r16
 889 02c0 FF90      		pop r15
 890 02c2 EF90      		pop r14
 891 02c4 DF90      		pop r13
 892               	.LVL70:
 893 02c6 0895      		ret
 894               		.cfi_endproc
 895               	.LFE12:
 897               	.global	nRF24L01p_tx_fifo_is_reuse
 899               	nRF24L01p_tx_fifo_is_reuse:
 900               	.LFB42:
 726:../libs/nrf24l01.c **** {
 901               		.loc 1 726 0
 902               		.cfi_startproc
 903               	/* prologue: function */
 904               	/* frame size = 0 */
 905               	/* stack size = 0 */
 906               	.L__stack_usage = 0
 727:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 907               		.loc 1 727 0
 908 02c8 87E1      		ldi r24,lo8(23)
 909 02ca 0E94 0000 		call nRF24L01p_get_register8
 910               	.LVL71:
 729:../libs/nrf24l01.c **** }
 911               		.loc 1 729 0
 912 02ce 86FB      		bst r24,6
 913 02d0 8827      		clr r24
 914 02d2 80F9      		bld r24,0
 915 02d4 0895      		ret
 916               		.cfi_endproc
 917               	.LFE42:
 919               	.global	nRF24L01p_tx_fifo_is_full
 921               	nRF24L01p_tx_fifo_is_full:
 922               	.LFB43:
 736:../libs/nrf24l01.c **** {
 923               		.loc 1 736 0
 924               		.cfi_startproc
 925               	/* prologue: function */
 926               	/* frame size = 0 */
 927               	/* stack size = 0 */
 928               	.L__stack_usage = 0
 737:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 929               		.loc 1 737 0
 930 02d6 87E1      		ldi r24,lo8(23)
 931 02d8 0E94 0000 		call nRF24L01p_get_register8
 932               	.LVL72:
 739:../libs/nrf24l01.c **** }
 933               		.loc 1 739 0
 934 02dc 85FB      		bst r24,5
 935 02de 8827      		clr r24
 936 02e0 80F9      		bld r24,0
 937 02e2 0895      		ret
 938               		.cfi_endproc
 939               	.LFE43:
 941               	.global	nRF24L01p_tx_fifo_is_empty
 943               	nRF24L01p_tx_fifo_is_empty:
 944               	.LFB44:
 746:../libs/nrf24l01.c **** {
 945               		.loc 1 746 0
 946               		.cfi_startproc
 947               	/* prologue: function */
 948               	/* frame size = 0 */
 949               	/* stack size = 0 */
 950               	.L__stack_usage = 0
 747:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 951               		.loc 1 747 0
 952 02e4 87E1      		ldi r24,lo8(23)
 953 02e6 0E94 0000 		call nRF24L01p_get_register8
 954               	.LVL73:
 749:../libs/nrf24l01.c **** }
 955               		.loc 1 749 0
 956 02ea 8295      		swap r24
 957 02ec 8170      		andi r24,1
 958 02ee 0895      		ret
 959               		.cfi_endproc
 960               	.LFE44:
 962               	.global	nRF24L01p_rx_fifo_is_full
 964               	nRF24L01p_rx_fifo_is_full:
 965               	.LFB47:
 782:../libs/nrf24l01.c **** {
 966               		.loc 1 782 0
 967               		.cfi_startproc
 968               	/* prologue: function */
 969               	/* frame size = 0 */
 970               	/* stack size = 0 */
 971               	.L__stack_usage = 0
 783:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 972               		.loc 1 783 0
 973 02f0 87E1      		ldi r24,lo8(23)
 974 02f2 0E94 0000 		call nRF24L01p_get_register8
 975               	.LVL74:
 785:../libs/nrf24l01.c **** }
 976               		.loc 1 785 0
 977 02f6 8695      		lsr r24
 978 02f8 8170      		andi r24,1
 979 02fa 0895      		ret
 980               		.cfi_endproc
 981               	.LFE47:
 983               	.global	nRF24L01p_rx_fifo_is_empty
 985               	nRF24L01p_rx_fifo_is_empty:
 986               	.LFB48:
 792:../libs/nrf24l01.c **** {
 987               		.loc 1 792 0
 988               		.cfi_startproc
 989               	/* prologue: function */
 990               	/* frame size = 0 */
 991               	/* stack size = 0 */
 992               	.L__stack_usage = 0
 793:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_FIFO_STATUS) &
 993               		.loc 1 793 0
 994 02fc 87E1      		ldi r24,lo8(23)
 995 02fe 0E94 0000 		call nRF24L01p_get_register8
 996               	.LVL75:
 795:../libs/nrf24l01.c **** }
 997               		.loc 1 795 0
 998 0302 8170      		andi r24,lo8(1)
 999 0304 0895      		ret
 1000               		.cfi_endproc
 1001               	.LFE48:
 1003               	.global	nRF24L01p_packets_lost
 1005               	nRF24L01p_packets_lost:
 1006               	.LFB51:
 832:../libs/nrf24l01.c **** {
 1007               		.loc 1 832 0
 1008               		.cfi_startproc
 1009               	/* prologue: function */
 1010               	/* frame size = 0 */
 1011               	/* stack size = 0 */
 1012               	.L__stack_usage = 0
 833:../libs/nrf24l01.c ****   return (nRF24L01p_get_register8(nRF24L01p_REGISTER_OBSERVE_TX) &
 1013               		.loc 1 833 0
 1014 0306 88E0      		ldi r24,lo8(8)
 1015 0308 0E94 0000 		call nRF24L01p_get_register8
 1016               	.LVL76:
 835:../libs/nrf24l01.c **** }
 1017               		.loc 1 835 0
 1018 030c 8295      		swap r24
 1019 030e 8F70      		andi r24,lo8(15)
 1020 0310 0895      		ret
 1021               		.cfi_endproc
 1022               	.LFE51:
 1024               	.global	nRF24L01p_packets_retransmitted
 1026               	nRF24L01p_packets_retransmitted:
 1027               	.LFB52:
 842:../libs/nrf24l01.c **** {
 1028               		.loc 1 842 0
 1029               		.cfi_startproc
 1030               	/* prologue: function */
 1031               	/* frame size = 0 */
 1032               	/* stack size = 0 */
 1033               	.L__stack_usage = 0
 843:../libs/nrf24l01.c ****   return nRF24L01p_get_register8(nRF24L01p_REGISTER_OBSERVE_TX) &
 1034               		.loc 1 843 0
 1035 0312 88E0      		ldi r24,lo8(8)
 1036 0314 0E94 0000 		call nRF24L01p_get_register8
 1037               	.LVL77:
 845:../libs/nrf24l01.c **** }
 1038               		.loc 1 845 0
 1039 0318 8F70      		andi r24,lo8(15)
 1040 031a 0895      		ret
 1041               		.cfi_endproc
 1042               	.LFE52:
 1044               	.global	nRF24L01p_set_register8
 1046               	nRF24L01p_set_register8:
 1047               	.LFB61:
1027:../libs/nrf24l01.c **** 
1028:../libs/nrf24l01.c **** 
1029:../libs/nrf24l01.c **** //
1030:../libs/nrf24l01.c **** // nRF24L01p_set_register8 implementation.
1031:../libs/nrf24l01.c **** //
1032:../libs/nrf24l01.c **** int nRF24L01p_set_register8(byte address, byte data)
1033:../libs/nrf24l01.c **** {
 1048               		.loc 1 1033 0
 1049               		.cfi_startproc
 1050               	.LVL78:
 1051 031c 1F93      		push r17
 1052               	.LCFI32:
 1053               		.cfi_def_cfa_offset 3
 1054               		.cfi_offset 17, -2
 1055 031e CF93      		push r28
 1056               	.LCFI33:
 1057               		.cfi_def_cfa_offset 4
 1058               		.cfi_offset 28, -3
 1059 0320 DF93      		push r29
 1060               	.LCFI34:
 1061               		.cfi_def_cfa_offset 5
 1062               		.cfi_offset 29, -4
 1063 0322 1F92      		push __zero_reg__
 1064               	.LCFI35:
 1065               		.cfi_def_cfa_offset 6
 1066 0324 CDB7      		in r28,__SP_L__
 1067 0326 DEB7      		in r29,__SP_H__
 1068               	.LCFI36:
 1069               		.cfi_def_cfa_register 28
 1070               	/* prologue: function */
 1071               	/* frame size = 1 */
 1072               	/* stack size = 4 */
 1073               	.L__stack_usage = 4
 1074 0328 182F      		mov r17,r24
1034:../libs/nrf24l01.c ****   if (address >= 0x18 && address <= 0x1B)
 1075               		.loc 1 1034 0
 1076 032a 88EE      		ldi r24,lo8(-24)
 1077               	.LVL79:
 1078 032c 810F      		add r24,r17
 1079 032e 8430      		cpi r24,lo8(4)
 1080 0330 00F0      		brlo .L63
1035:../libs/nrf24l01.c ****     return -1;
1036:../libs/nrf24l01.c **** 
1037:../libs/nrf24l01.c ****   spi_start();
 1081               		.loc 1 1037 0
 1082 0332 6983      		std Y+1,r22
 1083 0334 0E94 0000 		call spi_start
 1084               	.LVL80:
1038:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_W_REGISTER |
 1085               		.loc 1 1038 0
 1086 0338 812F      		mov r24,r17
 1087 033a 8F71      		andi r24,lo8(31)
 1088 033c 8062      		ori r24,lo8(32)
 1089 033e 0E94 0000 		call spi_transfer
 1090               	.LVL81:
1039:../libs/nrf24l01.c ****                (address & nRF24L01p_SPI_RW_REGISTER_MASK));
1040:../libs/nrf24l01.c ****   spi_transfer(data);
 1091               		.loc 1 1040 0
 1092 0342 6981      		ldd r22,Y+1
 1093 0344 862F      		mov r24,r22
 1094 0346 0E94 0000 		call spi_transfer
 1095               	.LVL82:
1041:../libs/nrf24l01.c ****   spi_end();
 1096               		.loc 1 1041 0
 1097 034a 0E94 0000 		call spi_end
 1098               	.LVL83:
1042:../libs/nrf24l01.c **** 
1043:../libs/nrf24l01.c ****   return 0;
 1099               		.loc 1 1043 0
 1100 034e 80E0      		ldi r24,0
 1101 0350 90E0      		ldi r25,0
 1102 0352 00C0      		rjmp .L62
 1103               	.LVL84:
 1104               	.L63:
1035:../libs/nrf24l01.c ****     return -1;
 1105               		.loc 1 1035 0
 1106 0354 8FEF      		ldi r24,lo8(-1)
 1107 0356 9FEF      		ldi r25,lo8(-1)
 1108               	.LVL85:
 1109               	.L62:
 1110               	/* epilogue start */
1044:../libs/nrf24l01.c **** }
 1111               		.loc 1 1044 0
 1112 0358 0F90      		pop __tmp_reg__
 1113 035a DF91      		pop r29
 1114 035c CF91      		pop r28
 1115 035e 1F91      		pop r17
 1116               	.LVL86:
 1117 0360 0895      		ret
 1118               		.cfi_endproc
 1119               	.LFE61:
 1121               	.global	nRF24L01p_set_register8_bits
 1123               	nRF24L01p_set_register8_bits:
 1124               	.LFB62:
1045:../libs/nrf24l01.c **** 
1046:../libs/nrf24l01.c **** 
1047:../libs/nrf24l01.c **** //
1048:../libs/nrf24l01.c **** // nRF24L01p_set_register8_bits implementation.
1049:../libs/nrf24l01.c **** //
1050:../libs/nrf24l01.c **** int nRF24L01p_set_register8_bits(byte address, byte mask, byte value)
1051:../libs/nrf24l01.c **** {
 1125               		.loc 1 1051 0
 1126               		.cfi_startproc
 1127               	.LVL87:
 1128 0362 1F93      		push r17
 1129               	.LCFI37:
 1130               		.cfi_def_cfa_offset 3
 1131               		.cfi_offset 17, -2
 1132 0364 CF93      		push r28
 1133               	.LCFI38:
 1134               		.cfi_def_cfa_offset 4
 1135               		.cfi_offset 28, -3
 1136 0366 DF93      		push r29
 1137               	.LCFI39:
 1138               		.cfi_def_cfa_offset 5
 1139               		.cfi_offset 29, -4
 1140 0368 00D0      		rcall .
 1141               	.LCFI40:
 1142               		.cfi_def_cfa_offset 7
 1143 036a CDB7      		in r28,__SP_L__
 1144 036c DEB7      		in r29,__SP_H__
 1145               	.LCFI41:
 1146               		.cfi_def_cfa_register 28
 1147               	/* prologue: function */
 1148               	/* frame size = 2 */
 1149               	/* stack size = 5 */
 1150               	.L__stack_usage = 5
 1151 036e 182F      		mov r17,r24
1052:../libs/nrf24l01.c ****   byte reg = nRF24L01p_get_register8(address);
 1152               		.loc 1 1052 0
 1153 0370 4A83      		std Y+2,r20
 1154 0372 6983      		std Y+1,r22
 1155 0374 0E94 0000 		call nRF24L01p_get_register8
 1156               	.LVL88:
1053:../libs/nrf24l01.c ****   reg = (reg & ~mask) | (value & mask);
 1157               		.loc 1 1053 0
 1158 0378 6981      		ldd r22,Y+1
 1159 037a 962F      		mov r25,r22
 1160 037c 9095      		com r25
 1161 037e 9823      		and r25,r24
 1162 0380 4A81      		ldd r20,Y+2
 1163 0382 6423      		and r22,r20
 1164 0384 962B      		or r25,r22
 1165               	.LVL89:
1054:../libs/nrf24l01.c ****   return nRF24L01p_set_register8(address, reg);
 1166               		.loc 1 1054 0
 1167 0386 692F      		mov r22,r25
 1168 0388 812F      		mov r24,r17
 1169               	/* epilogue start */
1055:../libs/nrf24l01.c **** }
 1170               		.loc 1 1055 0
 1171 038a 0F90      		pop __tmp_reg__
 1172 038c 0F90      		pop __tmp_reg__
 1173 038e DF91      		pop r29
 1174 0390 CF91      		pop r28
 1175 0392 1F91      		pop r17
 1176               	.LVL90:
1054:../libs/nrf24l01.c ****   return nRF24L01p_set_register8(address, reg);
 1177               		.loc 1 1054 0
 1178 0394 0C94 0000 		jmp nRF24L01p_set_register8
 1179               	.LVL91:
 1180               		.cfi_endproc
 1181               	.LFE62:
 1183               	.global	nRF24L01p_config_rx_dr_interrupt
 1185               	nRF24L01p_config_rx_dr_interrupt:
 1186               	.LFB14:
 307:../libs/nrf24l01.c **** {
 1187               		.loc 1 307 0
 1188               		.cfi_startproc
 1189               	.LVL92:
 1190               	/* prologue: function */
 1191               	/* frame size = 0 */
 1192               	/* stack size = 0 */
 1193               	.L__stack_usage = 0
 308:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 1194               		.loc 1 308 0
 1195 0398 41E0      		ldi r20,lo8(1)
 1196 039a 4827      		eor r20,r24
 1197 039c 4195      		neg r20
 1198 039e 60E4      		ldi r22,lo8(64)
 1199 03a0 80E0      		ldi r24,0
 1200               	.LVL93:
 1201 03a2 0E94 0000 		call nRF24L01p_set_register8_bits
 1202               	.LVL94:
 312:../libs/nrf24l01.c **** }
 1203               		.loc 1 312 0
 1204 03a6 80E0      		ldi r24,0
 1205 03a8 90E0      		ldi r25,0
 1206 03aa 0895      		ret
 1207               		.cfi_endproc
 1208               	.LFE14:
 1210               	.global	nRF24L01p_config_tx_ds_interrupt
 1212               	nRF24L01p_config_tx_ds_interrupt:
 1213               	.LFB15:
 319:../libs/nrf24l01.c **** {
 1214               		.loc 1 319 0
 1215               		.cfi_startproc
 1216               	.LVL95:
 1217               	/* prologue: function */
 1218               	/* frame size = 0 */
 1219               	/* stack size = 0 */
 1220               	.L__stack_usage = 0
 320:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 1221               		.loc 1 320 0
 1222 03ac 41E0      		ldi r20,lo8(1)
 1223 03ae 4827      		eor r20,r24
 1224 03b0 4195      		neg r20
 1225 03b2 60E2      		ldi r22,lo8(32)
 1226 03b4 80E0      		ldi r24,0
 1227               	.LVL96:
 1228 03b6 0E94 0000 		call nRF24L01p_set_register8_bits
 1229               	.LVL97:
 324:../libs/nrf24l01.c **** }
 1230               		.loc 1 324 0
 1231 03ba 80E0      		ldi r24,0
 1232 03bc 90E0      		ldi r25,0
 1233 03be 0895      		ret
 1234               		.cfi_endproc
 1235               	.LFE15:
 1237               	.global	nRF24L01p_config_max_rt_interrupt
 1239               	nRF24L01p_config_max_rt_interrupt:
 1240               	.LFB16:
 331:../libs/nrf24l01.c **** {
 1241               		.loc 1 331 0
 1242               		.cfi_startproc
 1243               	.LVL98:
 1244               	/* prologue: function */
 1245               	/* frame size = 0 */
 1246               	/* stack size = 0 */
 1247               	.L__stack_usage = 0
 332:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 1248               		.loc 1 332 0
 1249 03c0 41E0      		ldi r20,lo8(1)
 1250 03c2 4827      		eor r20,r24
 1251 03c4 4195      		neg r20
 1252 03c6 60E1      		ldi r22,lo8(16)
 1253 03c8 80E0      		ldi r24,0
 1254               	.LVL99:
 1255 03ca 0E94 0000 		call nRF24L01p_set_register8_bits
 1256               	.LVL100:
 336:../libs/nrf24l01.c **** }
 1257               		.loc 1 336 0
 1258 03ce 80E0      		ldi r24,0
 1259 03d0 90E0      		ldi r25,0
 1260 03d2 0895      		ret
 1261               		.cfi_endproc
 1262               	.LFE16:
 1264               	.global	nRF24L01p_config_crc
 1266               	nRF24L01p_config_crc:
 1267               	.LFB17:
 343:../libs/nrf24l01.c **** {
 1268               		.loc 1 343 0
 1269               		.cfi_startproc
 1270               	.LVL101:
 1271               	/* prologue: function */
 1272               	/* frame size = 0 */
 1273               	/* stack size = 0 */
 1274               	.L__stack_usage = 0
 344:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_CRC_ENABLE ||
 1275               		.loc 1 344 0
 1276 03d4 982F      		mov r25,r24
 1277 03d6 977F      		andi r25,lo8(-9)
 1278 03d8 01F4      		brne .L70
 348:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 1279               		.loc 1 348 0
 1280 03da 482F      		mov r20,r24
 1281 03dc 68E0      		ldi r22,lo8(8)
 1282 03de 80E0      		ldi r24,0
 1283               	.LVL102:
 1284 03e0 0E94 0000 		call nRF24L01p_set_register8_bits
 1285               	.LVL103:
 352:../libs/nrf24l01.c ****   return 0;
 1286               		.loc 1 352 0
 1287 03e4 80E0      		ldi r24,0
 1288 03e6 90E0      		ldi r25,0
 1289 03e8 0895      		ret
 1290               	.LVL104:
 1291               	.L70:
 346:../libs/nrf24l01.c ****     return -1;
 1292               		.loc 1 346 0
 1293 03ea 8FEF      		ldi r24,lo8(-1)
 1294 03ec 9FEF      		ldi r25,lo8(-1)
 1295               	.LVL105:
 353:../libs/nrf24l01.c **** }
 1296               		.loc 1 353 0
 1297 03ee 0895      		ret
 1298               		.cfi_endproc
 1299               	.LFE17:
 1301               	.global	nRF24L01p_config_crc_count
 1303               	nRF24L01p_config_crc_count:
 1304               	.LFB18:
 360:../libs/nrf24l01.c **** {
 1305               		.loc 1 360 0
 1306               		.cfi_startproc
 1307               	.LVL106:
 1308               	/* prologue: function */
 1309               	/* frame size = 0 */
 1310               	/* stack size = 0 */
 1311               	.L__stack_usage = 0
 361:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_CRCO_1 ||
 1312               		.loc 1 361 0
 1313 03f0 982F      		mov r25,r24
 1314 03f2 9B7F      		andi r25,lo8(-5)
 1315 03f4 01F4      		brne .L73
 365:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 1316               		.loc 1 365 0
 1317 03f6 482F      		mov r20,r24
 1318 03f8 64E0      		ldi r22,lo8(4)
 1319 03fa 80E0      		ldi r24,0
 1320               	.LVL107:
 1321 03fc 0E94 0000 		call nRF24L01p_set_register8_bits
 1322               	.LVL108:
 369:../libs/nrf24l01.c ****   return 0;
 1323               		.loc 1 369 0
 1324 0400 80E0      		ldi r24,0
 1325 0402 90E0      		ldi r25,0
 1326 0404 0895      		ret
 1327               	.LVL109:
 1328               	.L73:
 363:../libs/nrf24l01.c ****     return -1;
 1329               		.loc 1 363 0
 1330 0406 8FEF      		ldi r24,lo8(-1)
 1331 0408 9FEF      		ldi r25,lo8(-1)
 1332               	.LVL110:
 370:../libs/nrf24l01.c **** }
 1333               		.loc 1 370 0
 1334 040a 0895      		ret
 1335               		.cfi_endproc
 1336               	.LFE18:
 1338               	.global	nRF24L01p_config_power
 1340               	nRF24L01p_config_power:
 1341               	.LFB19:
 377:../libs/nrf24l01.c **** {
 1342               		.loc 1 377 0
 1343               		.cfi_startproc
 1344               	.LVL111:
 1345 040c CF93      		push r28
 1346               	.LCFI42:
 1347               		.cfi_def_cfa_offset 3
 1348               		.cfi_offset 28, -2
 1349               	/* prologue: function */
 1350               	/* frame size = 0 */
 1351               	/* stack size = 1 */
 1352               	.L__stack_usage = 1
 1353 040e C82F      		mov r28,r24
 378:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_PWR_UP ||
 1354               		.loc 1 378 0
 1355 0410 8D7F      		andi r24,lo8(-3)
 1356               	.LVL112:
 1357 0412 01F4      		brne .L76
 382:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 1358               		.loc 1 382 0
 1359 0414 4C2F      		mov r20,r28
 1360 0416 62E0      		ldi r22,lo8(2)
 1361 0418 0E94 0000 		call nRF24L01p_set_register8_bits
 1362               	.LVL113:
 386:../libs/nrf24l01.c ****   if (value == nRF24L01p_VALUE_CONFIG_PWR_UP)
 1363               		.loc 1 386 0
 1364 041c C230      		cpi r28,lo8(2)
 1365 041e 01F4      		brne .L77
 1366               	.LVL114:
 1367               	.LBB16:
 1368               	.LBB17:
 1369               		.loc 2 246 0
 1370 0420 8FE6      		ldi r24,lo8(5999)
 1371 0422 97E1      		ldi r25,hi8(5999)
 1372 0424 0197      		1: sbiw r24,1
 1373 0426 01F4      		brne 1b
 1374 0428 00C0      		rjmp .
 1375 042a 0000      		nop
 1376 042c 00C0      		rjmp .L77
 1377               	.LVL115:
 1378               	.L76:
 1379               	.LBE17:
 1380               	.LBE16:
 380:../libs/nrf24l01.c ****     return -1;
 1381               		.loc 1 380 0
 1382 042e 8FEF      		ldi r24,lo8(-1)
 1383 0430 9FEF      		ldi r25,lo8(-1)
 1384 0432 00C0      		rjmp .L75
 1385               	.L77:
 389:../libs/nrf24l01.c ****   return 0;
 1386               		.loc 1 389 0
 1387 0434 80E0      		ldi r24,0
 1388 0436 90E0      		ldi r25,0
 1389               	.L75:
 1390               	/* epilogue start */
 390:../libs/nrf24l01.c **** }
 1391               		.loc 1 390 0
 1392 0438 CF91      		pop r28
 1393               	.LVL116:
 1394 043a 0895      		ret
 1395               		.cfi_endproc
 1396               	.LFE19:
 1398               	.global	nRF24L01p_config_transceiver_mode
 1400               	nRF24L01p_config_transceiver_mode:
 1401               	.LFB20:
 397:../libs/nrf24l01.c **** {
 1402               		.loc 1 397 0
 1403               		.cfi_startproc
 1404               	.LVL117:
 1405               	/* prologue: function */
 1406               	/* frame size = 0 */
 1407               	/* stack size = 0 */
 1408               	.L__stack_usage = 0
 398:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_CONFIG_PRIM_TX ||
 1409               		.loc 1 398 0
 1410 043c 8230      		cpi r24,lo8(2)
 1411 043e 00F4      		brsh .L80
 402:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_CONFIG,
 1412               		.loc 1 402 0
 1413 0440 482F      		mov r20,r24
 1414 0442 61E0      		ldi r22,lo8(1)
 1415 0444 80E0      		ldi r24,0
 1416               	.LVL118:
 1417 0446 0E94 0000 		call nRF24L01p_set_register8_bits
 1418               	.LVL119:
 405:../libs/nrf24l01.c ****   return 0;
 1419               		.loc 1 405 0
 1420 044a 80E0      		ldi r24,0
 1421 044c 90E0      		ldi r25,0
 1422 044e 0895      		ret
 1423               	.LVL120:
 1424               	.L80:
 400:../libs/nrf24l01.c ****     return -1;
 1425               		.loc 1 400 0
 1426 0450 8FEF      		ldi r24,lo8(-1)
 1427 0452 9FEF      		ldi r25,lo8(-1)
 1428               	.LVL121:
 406:../libs/nrf24l01.c **** }
 1429               		.loc 1 406 0
 1430 0454 0895      		ret
 1431               		.cfi_endproc
 1432               	.LFE20:
 1434               	.global	nRF24L01p_config_auto_ack
 1436               	nRF24L01p_config_auto_ack:
 1437               	.LFB21:
 413:../libs/nrf24l01.c **** {
 1438               		.loc 1 413 0
 1439               		.cfi_startproc
 1440               	.LVL122:
 1441               	/* prologue: function */
 1442               	/* frame size = 0 */
 1443               	/* stack size = 0 */
 1444               	.L__stack_usage = 0
 414:../libs/nrf24l01.c ****   if (!(mask == nRF24L01p_MASK_EN_AA_ENAA_P0 ||
 1445               		.loc 1 414 0
 1446 0456 9FEF      		ldi r25,lo8(-1)
 1447 0458 980F      		add r25,r24
 1448 045a 9230      		cpi r25,lo8(2)
 1449 045c 00F0      		brlo .L82
 415:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P1 ||
 1450               		.loc 1 415 0
 1451 045e 8430      		cpi r24,lo8(4)
 1452 0460 01F0      		breq .L82
 416:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P2 ||
 1453               		.loc 1 416 0
 1454 0462 8830      		cpi r24,lo8(8)
 1455 0464 01F0      		breq .L82
 417:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P3 ||
 1456               		.loc 1 417 0
 1457 0466 8031      		cpi r24,lo8(16)
 1458 0468 01F0      		breq .L82
 418:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_AA_ENAA_P4 ||
 1459               		.loc 1 418 0
 1460 046a 8032      		cpi r24,lo8(32)
 1461 046c 01F0      		breq .L82
 414:../libs/nrf24l01.c ****   if (!(mask == nRF24L01p_MASK_EN_AA_ENAA_P0 ||
 1462               		.loc 1 414 0
 1463 046e 8F33      		cpi r24,lo8(63)
 1464 0470 01F4      		brne .L84
 1465               	.L82:
 423:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_AA,
 1466               		.loc 1 423 0
 1467 0472 462F      		mov r20,r22
 1468 0474 4195      		neg r20
 1469 0476 682F      		mov r22,r24
 1470               	.LVL123:
 1471 0478 81E0      		ldi r24,lo8(1)
 1472               	.LVL124:
 1473 047a 0E94 0000 		call nRF24L01p_set_register8_bits
 1474               	.LVL125:
 425:../libs/nrf24l01.c ****   return 0;
 1475               		.loc 1 425 0
 1476 047e 80E0      		ldi r24,0
 1477 0480 90E0      		ldi r25,0
 1478 0482 0895      		ret
 1479               	.LVL126:
 1480               	.L84:
 421:../libs/nrf24l01.c ****     return -1;
 1481               		.loc 1 421 0
 1482 0484 8FEF      		ldi r24,lo8(-1)
 1483 0486 9FEF      		ldi r25,lo8(-1)
 1484               	.LVL127:
 426:../libs/nrf24l01.c **** }
 1485               		.loc 1 426 0
 1486 0488 0895      		ret
 1487               		.cfi_endproc
 1488               	.LFE21:
 1490               	.global	nRF24L01p_config_rx
 1492               	nRF24L01p_config_rx:
 1493               	.LFB22:
 433:../libs/nrf24l01.c **** {
 1494               		.loc 1 433 0
 1495               		.cfi_startproc
 1496               	.LVL128:
 1497               	/* prologue: function */
 1498               	/* frame size = 0 */
 1499               	/* stack size = 0 */
 1500               	.L__stack_usage = 0
 434:../libs/nrf24l01.c ****   if (!(mask == nRF24L01p_MASK_EN_RXADDR_ERX_P0 ||
 1501               		.loc 1 434 0
 1502 048a 9FEF      		ldi r25,lo8(-1)
 1503 048c 980F      		add r25,r24
 1504 048e 9230      		cpi r25,lo8(2)
 1505 0490 00F0      		brlo .L98
 435:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P1 ||
 1506               		.loc 1 435 0
 1507 0492 8430      		cpi r24,lo8(4)
 1508 0494 01F0      		breq .L98
 436:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P2 ||
 1509               		.loc 1 436 0
 1510 0496 8830      		cpi r24,lo8(8)
 1511 0498 01F0      		breq .L98
 437:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P3 ||
 1512               		.loc 1 437 0
 1513 049a 8031      		cpi r24,lo8(16)
 1514 049c 01F0      		breq .L98
 438:../libs/nrf24l01.c ****         mask == nRF24L01p_MASK_EN_RXADDR_ERX_P4 ||
 1515               		.loc 1 438 0
 1516 049e 8032      		cpi r24,lo8(32)
 1517 04a0 01F0      		breq .L98
 434:../libs/nrf24l01.c ****   if (!(mask == nRF24L01p_MASK_EN_RXADDR_ERX_P0 ||
 1518               		.loc 1 434 0
 1519 04a2 8F33      		cpi r24,lo8(63)
 1520 04a4 01F4      		brne .L100
 1521               	.L98:
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 1522               		.loc 1 443 0
 1523 04a6 462F      		mov r20,r22
 1524 04a8 4195      		neg r20
 1525 04aa 682F      		mov r22,r24
 1526               	.LVL129:
 1527 04ac 82E0      		ldi r24,lo8(2)
 1528               	.LVL130:
 1529 04ae 0E94 0000 		call nRF24L01p_set_register8_bits
 1530               	.LVL131:
 446:../libs/nrf24l01.c ****   return 0;
 1531               		.loc 1 446 0
 1532 04b2 80E0      		ldi r24,0
 1533 04b4 90E0      		ldi r25,0
 1534 04b6 0895      		ret
 1535               	.LVL132:
 1536               	.L100:
 441:../libs/nrf24l01.c ****     return -1;
 1537               		.loc 1 441 0
 1538 04b8 8FEF      		ldi r24,lo8(-1)
 1539 04ba 9FEF      		ldi r25,lo8(-1)
 1540               	.LVL133:
 447:../libs/nrf24l01.c **** }
 1541               		.loc 1 447 0
 1542 04bc 0895      		ret
 1543               		.cfi_endproc
 1544               	.LFE22:
 1546               	.global	nRF24L01p_config_address_width
 1548               	nRF24L01p_config_address_width:
 1549               	.LFB23:
 454:../libs/nrf24l01.c **** {
 1550               		.loc 1 454 0
 1551               		.cfi_startproc
 1552               	.LVL134:
 1553               	/* prologue: function */
 1554               	/* frame size = 0 */
 1555               	/* stack size = 0 */
 1556               	.L__stack_usage = 0
 455:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_SETUP_AW_AW_3 ||
 1557               		.loc 1 455 0
 1558 04be 9FEF      		ldi r25,lo8(-1)
 1559 04c0 980F      		add r25,r24
 1560 04c2 9330      		cpi r25,lo8(3)
 1561 04c4 00F4      		brsh .L115
 460:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_AW,
 1562               		.loc 1 460 0
 1563 04c6 482F      		mov r20,r24
 1564 04c8 63E0      		ldi r22,lo8(3)
 1565 04ca 83E0      		ldi r24,lo8(3)
 1566               	.LVL135:
 1567 04cc 0E94 0000 		call nRF24L01p_set_register8_bits
 1568               	.LVL136:
 463:../libs/nrf24l01.c ****   return 0;
 1569               		.loc 1 463 0
 1570 04d0 80E0      		ldi r24,0
 1571 04d2 90E0      		ldi r25,0
 1572 04d4 0895      		ret
 1573               	.LVL137:
 1574               	.L115:
 458:../libs/nrf24l01.c ****     return -1;
 1575               		.loc 1 458 0
 1576 04d6 8FEF      		ldi r24,lo8(-1)
 1577 04d8 9FEF      		ldi r25,lo8(-1)
 1578               	.LVL138:
 464:../libs/nrf24l01.c **** }
 1579               		.loc 1 464 0
 1580 04da 0895      		ret
 1581               		.cfi_endproc
 1582               	.LFE23:
 1584               	.global	nRF24L01p_config_retransmit_delay
 1586               	nRF24L01p_config_retransmit_delay:
 1587               	.LFB24:
 471:../libs/nrf24l01.c **** {
 1588               		.loc 1 471 0
 1589               		.cfi_startproc
 1590               	.LVL139:
 1591               	/* prologue: function */
 1592               	/* frame size = 0 */
 1593               	/* stack size = 0 */
 1594               	.L__stack_usage = 0
 472:../libs/nrf24l01.c ****   if (value <= 0x0F)
 1595               		.loc 1 472 0
 1596 04dc 8031      		cpi r24,lo8(16)
 1597 04de 00F0      		brlo .L118
 475:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
 1598               		.loc 1 475 0
 1599 04e0 482F      		mov r20,r24
 1600 04e2 60EF      		ldi r22,lo8(-16)
 1601 04e4 84E0      		ldi r24,lo8(4)
 1602               	.LVL140:
 1603 04e6 0E94 0000 		call nRF24L01p_set_register8_bits
 1604               	.LVL141:
 478:../libs/nrf24l01.c ****   return 0;
 1605               		.loc 1 478 0
 1606 04ea 80E0      		ldi r24,0
 1607 04ec 90E0      		ldi r25,0
 1608 04ee 0895      		ret
 1609               	.LVL142:
 1610               	.L118:
 473:../libs/nrf24l01.c ****     return -1;
 1611               		.loc 1 473 0
 1612 04f0 8FEF      		ldi r24,lo8(-1)
 1613 04f2 9FEF      		ldi r25,lo8(-1)
 1614               	.LVL143:
 479:../libs/nrf24l01.c **** }
 1615               		.loc 1 479 0
 1616 04f4 0895      		ret
 1617               		.cfi_endproc
 1618               	.LFE24:
 1620               	.global	nRF24L01p_config_retransmit_count
 1622               	nRF24L01p_config_retransmit_count:
 1623               	.LFB25:
 486:../libs/nrf24l01.c **** {
 1624               		.loc 1 486 0
 1625               		.cfi_startproc
 1626               	.LVL144:
 1627               	/* prologue: function */
 1628               	/* frame size = 0 */
 1629               	/* stack size = 0 */
 1630               	.L__stack_usage = 0
 487:../libs/nrf24l01.c ****   if (value > 0x0F)
 1631               		.loc 1 487 0
 1632 04f6 8031      		cpi r24,lo8(16)
 1633 04f8 00F4      		brsh .L121
 490:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_SETUP_RETR,
 1634               		.loc 1 490 0
 1635 04fa 482F      		mov r20,r24
 1636 04fc 6FE0      		ldi r22,lo8(15)
 1637 04fe 84E0      		ldi r24,lo8(4)
 1638               	.LVL145:
 1639 0500 0E94 0000 		call nRF24L01p_set_register8_bits
 1640               	.LVL146:
 493:../libs/nrf24l01.c ****   return 0;
 1641               		.loc 1 493 0
 1642 0504 80E0      		ldi r24,0
 1643 0506 90E0      		ldi r25,0
 1644 0508 0895      		ret
 1645               	.LVL147:
 1646               	.L121:
 488:../libs/nrf24l01.c ****     return -1;
 1647               		.loc 1 488 0
 1648 050a 8FEF      		ldi r24,lo8(-1)
 1649 050c 9FEF      		ldi r25,lo8(-1)
 1650               	.LVL148:
 494:../libs/nrf24l01.c **** }
 1651               		.loc 1 494 0
 1652 050e 0895      		ret
 1653               		.cfi_endproc
 1654               	.LFE25:
 1656               	.global	nRF24L01p_config_channel
 1658               	nRF24L01p_config_channel:
 1659               	.LFB26:
 501:../libs/nrf24l01.c **** {
 1660               		.loc 1 501 0
 1661               		.cfi_startproc
 1662               	.LVL149:
 1663               	/* prologue: function */
 1664               	/* frame size = 0 */
 1665               	/* stack size = 0 */
 1666               	.L__stack_usage = 0
 502:../libs/nrf24l01.c ****   if (value > 127)
 1667               		.loc 1 502 0
 1668 0510 87FD      		sbrc r24,7
 1669 0512 00C0      		rjmp .L124
 505:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_CH,
 1670               		.loc 1 505 0
 1671 0514 482F      		mov r20,r24
 1672 0516 6FE7      		ldi r22,lo8(127)
 1673 0518 85E0      		ldi r24,lo8(5)
 1674               	.LVL150:
 1675 051a 0E94 0000 		call nRF24L01p_set_register8_bits
 1676               	.LVL151:
 508:../libs/nrf24l01.c ****   return 0;
 1677               		.loc 1 508 0
 1678 051e 80E0      		ldi r24,0
 1679 0520 90E0      		ldi r25,0
 1680 0522 0895      		ret
 1681               	.LVL152:
 1682               	.L124:
 503:../libs/nrf24l01.c ****     return -1;
 1683               		.loc 1 503 0
 1684 0524 8FEF      		ldi r24,lo8(-1)
 1685 0526 9FEF      		ldi r25,lo8(-1)
 1686               	.LVL153:
 509:../libs/nrf24l01.c **** }
 1687               		.loc 1 509 0
 1688 0528 0895      		ret
 1689               		.cfi_endproc
 1690               	.LFE26:
 1692               	.global	nRF24L01p_config_air_data_rate
 1694               	nRF24L01p_config_air_data_rate:
 1695               	.LFB27:
 516:../libs/nrf24l01.c **** {
 1696               		.loc 1 516 0
 1697               		.cfi_startproc
 1698               	.LVL154:
 1699               	/* prologue: function */
 1700               	/* frame size = 0 */
 1701               	/* stack size = 0 */
 1702               	.L__stack_usage = 0
 517:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_DR_1Mbps ||
 1703               		.loc 1 517 0
 1704 052a 982F      		mov r25,r24
 1705 052c 977F      		andi r25,lo8(-9)
 1706 052e 01F4      		brne .L127
 521:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
 1707               		.loc 1 521 0
 1708 0530 482F      		mov r20,r24
 1709 0532 68E0      		ldi r22,lo8(8)
 1710 0534 86E0      		ldi r24,lo8(6)
 1711               	.LVL155:
 1712 0536 0E94 0000 		call nRF24L01p_set_register8_bits
 1713               	.LVL156:
 524:../libs/nrf24l01.c ****   return 0;
 1714               		.loc 1 524 0
 1715 053a 80E0      		ldi r24,0
 1716 053c 90E0      		ldi r25,0
 1717 053e 0895      		ret
 1718               	.LVL157:
 1719               	.L127:
 519:../libs/nrf24l01.c ****     return -1;
 1720               		.loc 1 519 0
 1721 0540 8FEF      		ldi r24,lo8(-1)
 1722 0542 9FEF      		ldi r25,lo8(-1)
 1723               	.LVL158:
 525:../libs/nrf24l01.c **** }
 1724               		.loc 1 525 0
 1725 0544 0895      		ret
 1726               		.cfi_endproc
 1727               	.LFE27:
 1729               	.global	nRF24L01p_config_output_power
 1731               	nRF24L01p_config_output_power:
 1732               	.LFB28:
 532:../libs/nrf24l01.c **** {
 1733               		.loc 1 532 0
 1734               		.cfi_startproc
 1735               	.LVL159:
 1736               	/* prologue: function */
 1737               	/* frame size = 0 */
 1738               	/* stack size = 0 */
 1739               	.L__stack_usage = 0
 533:../libs/nrf24l01.c ****   if (!(value == nRF24L01p_VALUE_RF_SETUP_RF_PWR_NEG_18dBm ||
 1740               		.loc 1 533 0
 1741 0546 982F      		mov r25,r24
 1742 0548 997F      		andi r25,lo8(-7)
 1743 054a 01F4      		brne .L130
 539:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_RF_SETUP,
 1744               		.loc 1 539 0
 1745 054c 482F      		mov r20,r24
 1746 054e 66E0      		ldi r22,lo8(6)
 1747 0550 86E0      		ldi r24,lo8(6)
 1748               	.LVL160:
 1749 0552 0E94 0000 		call nRF24L01p_set_register8_bits
 1750               	.LVL161:
 542:../libs/nrf24l01.c ****   return 0;
 1751               		.loc 1 542 0
 1752 0556 80E0      		ldi r24,0
 1753 0558 90E0      		ldi r25,0
 1754 055a 0895      		ret
 1755               	.LVL162:
 1756               	.L130:
 537:../libs/nrf24l01.c ****     return -1;
 1757               		.loc 1 537 0
 1758 055c 8FEF      		ldi r24,lo8(-1)
 1759 055e 9FEF      		ldi r25,lo8(-1)
 1760               	.LVL163:
 543:../libs/nrf24l01.c **** }
 1761               		.loc 1 543 0
 1762 0560 0895      		ret
 1763               		.cfi_endproc
 1764               	.LFE28:
 1766               	.global	nRF24L01p_config_payload_width
 1768               	nRF24L01p_config_payload_width:
 1769               	.LFB31:
 594:../libs/nrf24l01.c **** {
 1770               		.loc 1 594 0
 1771               		.cfi_startproc
 1772               	.LVL164:
 1773               	/* prologue: function */
 1774               	/* frame size = 0 */
 1775               	/* stack size = 0 */
 1776               	.L__stack_usage = 0
 1777 0562 462F      		mov r20,r22
 595:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_PW_P0 ||
 1778               		.loc 1 595 0
 1779 0564 9FEE      		ldi r25,lo8(-17)
 1780 0566 980F      		add r25,r24
 1781 0568 9630      		cpi r25,lo8(6)
 1782 056a 00F4      		brsh .L133
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 1783               		.loc 1 603 0
 1784 056c 6FE3      		ldi r22,lo8(63)
 1785               	.LVL165:
 1786 056e 0E94 0000 		call nRF24L01p_set_register8_bits
 1787               	.LVL166:
 607:../libs/nrf24l01.c ****   return 0;
 1788               		.loc 1 607 0
 1789 0572 80E0      		ldi r24,0
 1790 0574 90E0      		ldi r25,0
 1791 0576 0895      		ret
 1792               	.LVL167:
 1793               	.L133:
 601:../libs/nrf24l01.c ****     return -1;
 1794               		.loc 1 601 0
 1795 0578 8FEF      		ldi r24,lo8(-1)
 1796 057a 9FEF      		ldi r25,lo8(-1)
 1797               	.LVL168:
 608:../libs/nrf24l01.c **** }
 1798               		.loc 1 608 0
 1799 057c 0895      		ret
 1800               		.cfi_endproc
 1801               	.LFE31:
 1803               	.global	nRF24L01p_status_rx_ready_clear
 1805               	nRF24L01p_status_rx_ready_clear:
 1806               	.LFB35:
 657:../libs/nrf24l01.c **** {
 1807               		.loc 1 657 0
 1808               		.cfi_startproc
 1809               	/* prologue: function */
 1810               	/* frame size = 0 */
 1811               	/* stack size = 0 */
 1812               	.L__stack_usage = 0
 658:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
 1813               		.loc 1 658 0
 1814 057e 4FEF      		ldi r20,lo8(-1)
 1815 0580 60E4      		ldi r22,lo8(64)
 1816 0582 87E0      		ldi r24,lo8(7)
 1817 0584 0C94 0000 		jmp nRF24L01p_set_register8_bits
 1818               	.LVL169:
 1819               		.cfi_endproc
 1820               	.LFE35:
 1822               	.global	nRF24L01p_status_tx_sent_clear
 1824               	nRF24L01p_status_tx_sent_clear:
 1825               	.LFB37:
 676:../libs/nrf24l01.c **** {
 1826               		.loc 1 676 0
 1827               		.cfi_startproc
 1828               	/* prologue: function */
 1829               	/* frame size = 0 */
 1830               	/* stack size = 0 */
 1831               	.L__stack_usage = 0
 677:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
 1832               		.loc 1 677 0
 1833 0588 4FEF      		ldi r20,lo8(-1)
 1834 058a 60E2      		ldi r22,lo8(32)
 1835 058c 87E0      		ldi r24,lo8(7)
 1836 058e 0C94 0000 		jmp nRF24L01p_set_register8_bits
 1837               	.LVL170:
 1838               		.cfi_endproc
 1839               	.LFE37:
 1841               	.global	nRF24L01p_process_tx_payload
 1843               	nRF24L01p_process_tx_payload:
 1844               	.LFB11:
 166:../libs/nrf24l01.c **** {
 1845               		.loc 1 166 0
 1846               		.cfi_startproc
 1847 0592 DF92      		push r13
 1848               	.LCFI43:
 1849               		.cfi_def_cfa_offset 3
 1850               		.cfi_offset 13, -2
 1851 0594 EF92      		push r14
 1852               	.LCFI44:
 1853               		.cfi_def_cfa_offset 4
 1854               		.cfi_offset 14, -3
 1855 0596 FF92      		push r15
 1856               	.LCFI45:
 1857               		.cfi_def_cfa_offset 5
 1858               		.cfi_offset 15, -4
 1859 0598 0F93      		push r16
 1860               	.LCFI46:
 1861               		.cfi_def_cfa_offset 6
 1862               		.cfi_offset 16, -5
 1863 059a 1F93      		push r17
 1864               	.LCFI47:
 1865               		.cfi_def_cfa_offset 7
 1866               		.cfi_offset 17, -6
 1867 059c CF93      		push r28
 1868               	.LCFI48:
 1869               		.cfi_def_cfa_offset 8
 1870               		.cfi_offset 28, -7
 1871 059e DF93      		push r29
 1872               	.LCFI49:
 1873               		.cfi_def_cfa_offset 9
 1874               		.cfi_offset 29, -8
 1875               	/* prologue: function */
 1876               	/* frame size = 0 */
 1877               	/* stack size = 7 */
 1878               	.L__stack_usage = 7
 167:../libs/nrf24l01.c ****   if (nRF24L01p_tx_pipe.remaining == 0)
 1879               		.loc 1 167 0
 1880 05a0 8091 0000 		lds r24,nRF24L01p_tx_pipe+11
 1881 05a4 9091 0000 		lds r25,nRF24L01p_tx_pipe+11+1
 1882 05a8 892B      		or r24,r25
 1883 05aa 01F4      		brne .L138
 170:../libs/nrf24l01.c ****     nRF24L01p_disable();
 1884               		.loc 1 170 0
 1885 05ac 0E94 0000 		call nRF24L01p_disable
 1886               	.LVL171:
 173:../libs/nrf24l01.c ****     nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, FALSE);
 1887               		.loc 1 173 0
 1888 05b0 60E0      		ldi r22,0
 1889 05b2 81E0      		ldi r24,lo8(1)
 1890 05b4 0E94 0000 		call nRF24L01p_config_rx
 1891               	.LVL172:
 1892 05b8 00C0      		rjmp .L139
 1893               	.L144:
 177:../libs/nrf24l01.c ****     while (!nRF24L01p_tx_fifo_is_full() && nRF24L01p_tx_pipe.remaining != 0)
 1894               		.loc 1 177 0 discriminator 2
 1895 05ba C091 0000 		lds r28,nRF24L01p_tx_pipe+11
 1896 05be D091 0000 		lds r29,nRF24L01p_tx_pipe+11+1
 1897 05c2 2097      		sbiw r28,0
 1898 05c4 01F0      		breq .L142
 182:../libs/nrf24l01.c ****       if (nRF24L01p_tx_pipe.remaining < nRF24L01p_tx_pipe.payload_width)
 1899               		.loc 1 182 0
 1900 05c6 D090 0000 		lds r13,nRF24L01p_tx_pipe+8
 1901 05ca 0D2D      		mov r16,r13
 1902 05cc 10E0      		ldi r17,0
 1903 05ce C017      		cp r28,r16
 1904 05d0 D107      		cpc r29,r17
 1905 05d2 00F4      		brsh .L140
 1906               	.LBB18:
 184:../libs/nrf24l01.c ****         byte *payload = malloc(nRF24L01p_tx_pipe.payload_width);
 1907               		.loc 1 184 0
 1908 05d4 C801      		movw r24,r16
 1909 05d6 0E94 0000 		call malloc
 1910               	.LVL173:
 1911 05da 8C01      		movw r16,r24
 1912               	.LVL174:
 185:../libs/nrf24l01.c ****         memcpy(payload, nRF24L01p_tx_pipe.data, nRF24L01p_tx_pipe.remaining);
 1913               		.loc 1 185 0
 1914 05dc 6091 0000 		lds r22,nRF24L01p_tx_pipe+9
 1915 05e0 7091 0000 		lds r23,nRF24L01p_tx_pipe+9+1
 1916 05e4 AE01      		movw r20,r28
 1917 05e6 0E94 0000 		call memcpy
 1918               	.LVL175:
 186:../libs/nrf24l01.c ****         nRF24L01p_tx_fifo_write(payload, nRF24L01p_tx_pipe.payload_width);
 1919               		.loc 1 186 0
 1920 05ea 6D2D      		mov r22,r13
 1921 05ec C801      		movw r24,r16
 1922 05ee 0E94 0000 		call nRF24L01p_tx_fifo_write
 1923               	.LVL176:
 187:../libs/nrf24l01.c ****         free(payload);
 1924               		.loc 1 187 0
 1925 05f2 C801      		movw r24,r16
 1926 05f4 0E94 0000 		call free
 1927               	.LVL177:
 188:../libs/nrf24l01.c ****         nRF24L01p_tx_pipe.remaining = 0;
 1928               		.loc 1 188 0
 1929 05f8 1092 0000 		sts nRF24L01p_tx_pipe+11+1,__zero_reg__
 1930 05fc 1092 0000 		sts nRF24L01p_tx_pipe+11,__zero_reg__
 1931               	.LVL178:
 1932               	.L138:
 1933               	.LBE18:
 177:../libs/nrf24l01.c ****     while (!nRF24L01p_tx_fifo_is_full() && nRF24L01p_tx_pipe.remaining != 0)
 1934               		.loc 1 177 0 discriminator 1
 1935 0600 0E94 0000 		call nRF24L01p_tx_fifo_is_full
 1936               	.LVL179:
 1937 0604 8823      		tst r24
 1938 0606 01F0      		breq .L144
 1939 0608 00C0      		rjmp .L142
 1940               	.L140:
 192:../libs/nrf24l01.c ****         nRF24L01p_tx_fifo_write(nRF24L01p_tx_pipe.data, nRF24L01p_tx_pipe.payload_width);
 1941               		.loc 1 192 0
 1942 060a E090 0000 		lds r14,nRF24L01p_tx_pipe+9
 1943 060e F090 0000 		lds r15,nRF24L01p_tx_pipe+9+1
 1944 0612 6D2D      		mov r22,r13
 1945 0614 C701      		movw r24,r14
 1946 0616 0E94 0000 		call nRF24L01p_tx_fifo_write
 1947               	.LVL180:
 193:../libs/nrf24l01.c ****         nRF24L01p_tx_pipe.data = nRF24L01p_tx_pipe.data + nRF24L01p_tx_pipe.payload_width;
 1948               		.loc 1 193 0
 1949 061a E00E      		add r14,r16
 1950 061c F11E      		adc r15,r17
 1951 061e F092 0000 		sts nRF24L01p_tx_pipe+9+1,r15
 1952 0622 E092 0000 		sts nRF24L01p_tx_pipe+9,r14
 194:../libs/nrf24l01.c ****         nRF24L01p_tx_pipe.remaining = nRF24L01p_tx_pipe.remaining - nRF24L01p_tx_pipe.payload_width
 1953               		.loc 1 194 0
 1954 0626 C01B      		sub r28,r16
 1955 0628 D10B      		sbc r29,r17
 1956 062a D093 0000 		sts nRF24L01p_tx_pipe+11+1,r29
 1957 062e C093 0000 		sts nRF24L01p_tx_pipe+11,r28
 1958 0632 00C0      		rjmp .L138
 1959               	.L142:
 203:../libs/nrf24l01.c ****     nRF24L01p_enable();
 1960               		.loc 1 203 0
 1961 0634 0E94 0000 		call nRF24L01p_enable
 1962               	.LVL181:
 1963               	.L139:
 1964               	/* epilogue start */
 207:../libs/nrf24l01.c **** }
 1965               		.loc 1 207 0
 1966 0638 DF91      		pop r29
 1967 063a CF91      		pop r28
 1968 063c 1F91      		pop r17
 1969 063e 0F91      		pop r16
 1970 0640 FF90      		pop r15
 1971 0642 EF90      		pop r14
 1972 0644 DF90      		pop r13
 206:../libs/nrf24l01.c ****   nRF24L01p_status_tx_sent_clear();
 1973               		.loc 1 206 0
 1974 0646 0C94 0000 		jmp nRF24L01p_status_tx_sent_clear
 1975               	.LVL182:
 1976               		.cfi_endproc
 1977               	.LFE11:
 1979               	.global	nRF24L01p_status_max_retries_clear
 1981               	nRF24L01p_status_max_retries_clear:
 1982               	.LFB39:
 695:../libs/nrf24l01.c **** {
 1983               		.loc 1 695 0
 1984               		.cfi_startproc
 1985               	/* prologue: function */
 1986               	/* frame size = 0 */
 1987               	/* stack size = 0 */
 1988               	.L__stack_usage = 0
 696:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_STATUS,
 1989               		.loc 1 696 0
 1990 064a 4FEF      		ldi r20,lo8(-1)
 1991 064c 60E1      		ldi r22,lo8(16)
 1992 064e 87E0      		ldi r24,lo8(7)
 1993 0650 0C94 0000 		jmp nRF24L01p_set_register8_bits
 1994               	.LVL183:
 1995               		.cfi_endproc
 1996               	.LFE39:
 1998               	.global	__vector_1
 2000               	__vector_1:
 2001               	.LFB13:
 257:../libs/nrf24l01.c **** {
 2002               		.loc 1 257 0
 2003               		.cfi_startproc
 2004 0654 1F92      		push r1
 2005               	.LCFI50:
 2006               		.cfi_def_cfa_offset 3
 2007               		.cfi_offset 1, -2
 2008 0656 0F92      		push r0
 2009               	.LCFI51:
 2010               		.cfi_def_cfa_offset 4
 2011               		.cfi_offset 0, -3
 2012 0658 0FB6      		in r0,__SREG__
 2013 065a 0F92      		push r0
 2014 065c 1124      		clr __zero_reg__
 2015 065e 2F93      		push r18
 2016               	.LCFI52:
 2017               		.cfi_def_cfa_offset 5
 2018               		.cfi_offset 18, -4
 2019 0660 3F93      		push r19
 2020               	.LCFI53:
 2021               		.cfi_def_cfa_offset 6
 2022               		.cfi_offset 19, -5
 2023 0662 4F93      		push r20
 2024               	.LCFI54:
 2025               		.cfi_def_cfa_offset 7
 2026               		.cfi_offset 20, -6
 2027 0664 5F93      		push r21
 2028               	.LCFI55:
 2029               		.cfi_def_cfa_offset 8
 2030               		.cfi_offset 21, -7
 2031 0666 6F93      		push r22
 2032               	.LCFI56:
 2033               		.cfi_def_cfa_offset 9
 2034               		.cfi_offset 22, -8
 2035 0668 7F93      		push r23
 2036               	.LCFI57:
 2037               		.cfi_def_cfa_offset 10
 2038               		.cfi_offset 23, -9
 2039 066a 8F93      		push r24
 2040               	.LCFI58:
 2041               		.cfi_def_cfa_offset 11
 2042               		.cfi_offset 24, -10
 2043 066c 9F93      		push r25
 2044               	.LCFI59:
 2045               		.cfi_def_cfa_offset 12
 2046               		.cfi_offset 25, -11
 2047 066e AF93      		push r26
 2048               	.LCFI60:
 2049               		.cfi_def_cfa_offset 13
 2050               		.cfi_offset 26, -12
 2051 0670 BF93      		push r27
 2052               	.LCFI61:
 2053               		.cfi_def_cfa_offset 14
 2054               		.cfi_offset 27, -13
 2055 0672 CF93      		push r28
 2056               	.LCFI62:
 2057               		.cfi_def_cfa_offset 15
 2058               		.cfi_offset 28, -14
 2059 0674 EF93      		push r30
 2060               	.LCFI63:
 2061               		.cfi_def_cfa_offset 16
 2062               		.cfi_offset 30, -15
 2063 0676 FF93      		push r31
 2064               	.LCFI64:
 2065               		.cfi_def_cfa_offset 17
 2066               		.cfi_offset 31, -16
 2067               	/* prologue: Signal */
 2068               	/* frame size = 0 */
 2069               	/* stack size = 16 */
 2070               	.L__stack_usage = 16
 258:../libs/nrf24l01.c ****   nRF24L01p_status_fetch();
 2071               		.loc 1 258 0
 2072 0678 0E94 0000 		call nRF24L01p_status_fetch
 2073               	.LVL184:
 260:../libs/nrf24l01.c ****   if (nRF24L01p_status_tx_sent())
 2074               		.loc 1 260 0
 2075 067c 0E94 0000 		call nRF24L01p_status_tx_sent
 2076               	.LVL185:
 2077 0680 8111      		cpse r24,__zero_reg__
 262:../libs/nrf24l01.c ****     nRF24L01p_process_tx_payload();
 2078               		.loc 1 262 0
 2079 0682 0E94 0000 		call nRF24L01p_process_tx_payload
 2080               	.LVL186:
 2081               	.L147:
 265:../libs/nrf24l01.c ****   if (nRF24L01p_status_rx_ready())
 2082               		.loc 1 265 0
 2083 0686 0E94 0000 		call nRF24L01p_status_rx_ready
 2084               	.LVL187:
 2085 068a 8111      		cpse r24,__zero_reg__
 2086 068c 00C0      		rjmp .L148
 2087               	.L153:
 284:../libs/nrf24l01.c ****   if (nRF24L01p_status_max_retries())
 2088               		.loc 1 284 0
 2089 068e 0E94 0000 		call nRF24L01p_status_max_retries
 2090               	.LVL188:
 2091 0692 8823      		tst r24
 2092 0694 01F0      		breq .L146
 2093               	.LBB19:
 286:../libs/nrf24l01.c ****     byte lost = nRF24L01p_packets_lost();
 2094               		.loc 1 286 0
 2095 0696 0E94 0000 		call nRF24L01p_packets_lost
 2096               	.LVL189:
 288:../libs/nrf24l01.c ****     nRF24L01p_tx_fifo_flush();
 2097               		.loc 1 288 0
 2098 069a 0E94 0000 		call nRF24L01p_tx_fifo_flush
 2099               	.LVL190:
 289:../libs/nrf24l01.c ****     nRF24L01p_status_max_retries_clear();
 2100               		.loc 1 289 0
 2101 069e 0E94 0000 		call nRF24L01p_status_max_retries_clear
 2102               	.LVL191:
 2103 06a2 00C0      		rjmp .L146
 2104               	.L148:
 2105               	.LBE19:
 2106               	.LBB20:
 274:../libs/nrf24l01.c ****       PORTC=0x01;
 2107               		.loc 1 274 0
 2108 06a4 C1E0      		ldi r28,lo8(1)
 2109               	.L151:
 2110               	.LBE20:
 272:../libs/nrf24l01.c ****     while (!nRF24L01p_rx_fifo_is_empty())
 2111               		.loc 1 272 0 discriminator 1
 2112 06a6 0E94 0000 		call nRF24L01p_rx_fifo_is_empty
 2113               	.LVL192:
 2114 06aa 8111      		cpse r24,__zero_reg__
 2115 06ac 00C0      		rjmp .L153
 2116               	.LBB21:
 274:../libs/nrf24l01.c ****       PORTC=0x01;
 2117               		.loc 1 274 0
 2118 06ae C8B9      		out 0x8,r28
 275:../libs/nrf24l01.c ****       nRF24L01p_status_fetch();
 2119               		.loc 1 275 0
 2120 06b0 0E94 0000 		call nRF24L01p_status_fetch
 2121               	.LVL193:
 276:../libs/nrf24l01.c ****       byte pipe = nRF24L01p_status_pipe_ready();
 2122               		.loc 1 276 0
 2123 06b4 0E94 0000 		call nRF24L01p_status_pipe_ready
 2124               	.LVL194:
 277:../libs/nrf24l01.c ****       if (pipe <= 5) nRF24L01p_process_rx_payload(pipe);
 2125               		.loc 1 277 0
 2126 06b8 8630      		cpi r24,lo8(6)
 2127 06ba 00F4      		brsh .L152
 277:../libs/nrf24l01.c ****       if (pipe <= 5) nRF24L01p_process_rx_payload(pipe);
 2128               		.loc 1 277 0 is_stmt 0 discriminator 1
 2129 06bc 0E94 0000 		call nRF24L01p_process_rx_payload
 2130               	.LVL195:
 2131               	.L152:
 278:../libs/nrf24l01.c ****       nRF24L01p_status_rx_ready_clear();
 2132               		.loc 1 278 0 is_stmt 1
 2133 06c0 0E94 0000 		call nRF24L01p_status_rx_ready_clear
 2134               	.LVL196:
 2135 06c4 00C0      		rjmp .L151
 2136               	.L146:
 2137               	/* epilogue start */
 2138               	.LBE21:
 297:../libs/nrf24l01.c **** }
 2139               		.loc 1 297 0
 2140 06c6 FF91      		pop r31
 2141 06c8 EF91      		pop r30
 2142 06ca CF91      		pop r28
 2143 06cc BF91      		pop r27
 2144 06ce AF91      		pop r26
 2145 06d0 9F91      		pop r25
 2146 06d2 8F91      		pop r24
 2147 06d4 7F91      		pop r23
 2148 06d6 6F91      		pop r22
 2149 06d8 5F91      		pop r21
 2150 06da 4F91      		pop r20
 2151 06dc 3F91      		pop r19
 2152 06de 2F91      		pop r18
 2153 06e0 0F90      		pop r0
 2154 06e2 0FBE      		out __SREG__,r0
 2155 06e4 0F90      		pop r0
 2156 06e6 1F90      		pop r1
 2157 06e8 1895      		reti
 2158               		.cfi_endproc
 2159               	.LFE13:
 2161               	.global	nRF24L01p_init
 2163               	nRF24L01p_init:
 2164               	.LFB10:
  59:../libs/nrf24l01.c **** {
 2165               		.loc 1 59 0
 2166               		.cfi_startproc
 2167               	.LVL197:
 2168               	/* prologue: function */
 2169               	/* frame size = 0 */
 2170               	/* stack size = 0 */
 2171               	.L__stack_usage = 0
  61:../libs/nrf24l01.c ****   spi_init(SPI_MASTER);
 2172               		.loc 1 61 0
 2173 06ea 80E1      		ldi r24,lo8(16)
 2174               	.LVL198:
 2175 06ec 0E94 0000 		call spi_init
 2176               	.LVL199:
  64:../libs/nrf24l01.c ****   DDRB |= _BV(DDB1);
 2177               		.loc 1 64 0
 2178 06f0 219A      		sbi 0x4,1
  67:../libs/nrf24l01.c ****   nRF24L01p_config_crc(nRF24L01p_VALUE_CONFIG_CRC_ENABLE);
 2179               		.loc 1 67 0
 2180 06f2 88E0      		ldi r24,lo8(8)
 2181 06f4 0E94 0000 		call nRF24L01p_config_crc
 2182               	.LVL200:
  68:../libs/nrf24l01.c ****   nRF24L01p_config_crc_count(nRF24L01p_VALUE_CONFIG_CRCO_2);
 2183               		.loc 1 68 0
 2184 06f8 84E0      		ldi r24,lo8(4)
 2185 06fa 0E94 0000 		call nRF24L01p_config_crc_count
 2186               	.LVL201:
  71:../libs/nrf24l01.c ****   nRF24L01p_config_address_width(nRF24L01p_VALUE_SETUP_AW_AW_5);
 2187               		.loc 1 71 0
 2188 06fe 83E0      		ldi r24,lo8(3)
 2189 0700 0E94 0000 		call nRF24L01p_config_address_width
 2190               	.LVL202:
  74:../libs/nrf24l01.c ****   nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_ALL, FALSE);
 2191               		.loc 1 74 0
 2192 0704 60E0      		ldi r22,0
 2193 0706 8FE3      		ldi r24,lo8(63)
 2194 0708 0E94 0000 		call nRF24L01p_config_rx
 2195               	.LVL203:
  77:../libs/nrf24l01.c ****   nRF24L01p_config_channel(100);
 2196               		.loc 1 77 0
 2197 070c 84E6      		ldi r24,lo8(100)
 2198 070e 0E94 0000 		call nRF24L01p_config_channel
 2199               	.LVL204:
  80:../libs/nrf24l01.c ****   nRF24L01p_config_air_data_rate(nRF24L01p_VALUE_RF_SETUP_RF_DR_1Mbps);
 2200               		.loc 1 80 0
 2201 0712 80E0      		ldi r24,0
 2202 0714 0E94 0000 		call nRF24L01p_config_air_data_rate
 2203               	.LVL205:
  83:../libs/nrf24l01.c ****   nRF24L01p_config_output_power(nRF24L01p_VALUE_RF_SETUP_RF_PWR_0dBm);
 2204               		.loc 1 83 0
 2205 0718 86E0      		ldi r24,lo8(6)
 2206 071a 0E94 0000 		call nRF24L01p_config_output_power
 2207               	.LVL206:
  86:../libs/nrf24l01.c ****   nRF24L01p_config_auto_ack(nRF24L01p_MASK_EN_AA_ENAA_ALL, FALSE);
 2208               		.loc 1 86 0
 2209 071e 60E0      		ldi r22,0
 2210 0720 8FE3      		ldi r24,lo8(63)
 2211 0722 0E94 0000 		call nRF24L01p_config_auto_ack
 2212               	.LVL207:
  89:../libs/nrf24l01.c ****   nRF24L01p_config_retransmit_count(nRF24L01p_VALUE_SETUP_RETR_ARC_3);
 2213               		.loc 1 89 0
 2214 0726 83E0      		ldi r24,lo8(3)
 2215 0728 0E94 0000 		call nRF24L01p_config_retransmit_count
 2216               	.LVL208:
  93:../libs/nrf24l01.c ****   nRF24L01p_tx_fifo_flush();
 2217               		.loc 1 93 0
 2218 072c 0E94 0000 		call nRF24L01p_tx_fifo_flush
 2219               	.LVL209:
  94:../libs/nrf24l01.c ****   nRF24L01p_rx_fifo_flush();
 2220               		.loc 1 94 0
 2221 0730 0E94 0000 		call nRF24L01p_rx_fifo_flush
 2222               	.LVL210:
  97:../libs/nrf24l01.c ****   nRF24L01p_status_rx_ready_clear();
 2223               		.loc 1 97 0
 2224 0734 0E94 0000 		call nRF24L01p_status_rx_ready_clear
 2225               	.LVL211:
  98:../libs/nrf24l01.c ****   nRF24L01p_status_tx_sent_clear();
 2226               		.loc 1 98 0
 2227 0738 0E94 0000 		call nRF24L01p_status_tx_sent_clear
 2228               	.LVL212:
  99:../libs/nrf24l01.c ****   nRF24L01p_status_max_retries_clear();
 2229               		.loc 1 99 0
 2230 073c 0E94 0000 		call nRF24L01p_status_max_retries_clear
 2231               	.LVL213:
 103:../libs/nrf24l01.c ****   EIMSK |= (1 << INT0);
 2232               		.loc 1 103 0
 2233 0740 E89A      		sbi 0x1d,0
 104:../libs/nrf24l01.c ****   EICRA = (EICRA & ~(1 << ISC00 | 1 << ISC01)) | 0x02;
 2234               		.loc 1 104 0
 2235 0742 E9E6      		ldi r30,lo8(105)
 2236 0744 F0E0      		ldi r31,0
 2237 0746 8081      		ld r24,Z
 2238 0748 8C7F      		andi r24,lo8(-4)
 2239 074a 8260      		ori r24,lo8(2)
 2240 074c 8083      		st Z,r24
 107:../libs/nrf24l01.c ****   sei();
 2241               		.loc 1 107 0
 2242               	/* #APP */
 2243               	 ;  107 "../libs/nrf24l01.c" 1
 2244 074e 7894      		sei
 2245               	 ;  0 "" 2
 110:../libs/nrf24l01.c ****   nRF24L01p_config_power(nRF24L01p_VALUE_CONFIG_PWR_UP);
 2246               		.loc 1 110 0
 2247               	/* #NOAPP */
 2248 0750 82E0      		ldi r24,lo8(2)
 2249 0752 0E94 0000 		call nRF24L01p_config_power
 2250               	.LVL214:
 114:../libs/nrf24l01.c **** }
 2251               		.loc 1 114 0
 2252 0756 80E0      		ldi r24,0
 2253 0758 90E0      		ldi r25,0
 2254 075a 0895      		ret
 2255               		.cfi_endproc
 2256               	.LFE10:
 2258               	.global	nRF24L01p_get_register40
 2260               	nRF24L01p_get_register40:
 2261               	.LFB63:
1056:../libs/nrf24l01.c **** 
1057:../libs/nrf24l01.c **** 
1058:../libs/nrf24l01.c **** //
1059:../libs/nrf24l01.c **** // nRF24L01p_get_register40 implementation.
1060:../libs/nrf24l01.c **** //
1061:../libs/nrf24l01.c **** long long unsigned int nRF24L01p_get_register40(byte address)
1062:../libs/nrf24l01.c **** {
 2262               		.loc 1 1062 0
 2263               		.cfi_startproc
 2264               	.LVL215:
 2265 075c 6F92      		push r6
 2266               	.LCFI65:
 2267               		.cfi_def_cfa_offset 3
 2268               		.cfi_offset 6, -2
 2269 075e 7F92      		push r7
 2270               	.LCFI66:
 2271               		.cfi_def_cfa_offset 4
 2272               		.cfi_offset 7, -3
 2273 0760 9F92      		push r9
 2274               	.LCFI67:
 2275               		.cfi_def_cfa_offset 5
 2276               		.cfi_offset 9, -4
 2277 0762 AF92      		push r10
 2278               	.LCFI68:
 2279               		.cfi_def_cfa_offset 6
 2280               		.cfi_offset 10, -5
 2281 0764 BF92      		push r11
 2282               	.LCFI69:
 2283               		.cfi_def_cfa_offset 7
 2284               		.cfi_offset 11, -6
 2285 0766 CF92      		push r12
 2286               	.LCFI70:
 2287               		.cfi_def_cfa_offset 8
 2288               		.cfi_offset 12, -7
 2289 0768 DF92      		push r13
 2290               	.LCFI71:
 2291               		.cfi_def_cfa_offset 9
 2292               		.cfi_offset 13, -8
 2293 076a EF92      		push r14
 2294               	.LCFI72:
 2295               		.cfi_def_cfa_offset 10
 2296               		.cfi_offset 14, -9
 2297 076c FF92      		push r15
 2298               	.LCFI73:
 2299               		.cfi_def_cfa_offset 11
 2300               		.cfi_offset 15, -10
 2301 076e 0F93      		push r16
 2302               	.LCFI74:
 2303               		.cfi_def_cfa_offset 12
 2304               		.cfi_offset 16, -11
 2305 0770 1F93      		push r17
 2306               	.LCFI75:
 2307               		.cfi_def_cfa_offset 13
 2308               		.cfi_offset 17, -12
 2309 0772 CF93      		push r28
 2310               	.LCFI76:
 2311               		.cfi_def_cfa_offset 14
 2312               		.cfi_offset 28, -13
 2313 0774 DF93      		push r29
 2314               	.LCFI77:
 2315               		.cfi_def_cfa_offset 15
 2316               		.cfi_offset 29, -14
 2317 0776 1F92      		push __zero_reg__
 2318               	.LCFI78:
 2319               		.cfi_def_cfa_offset 16
 2320 0778 CDB7      		in r28,__SP_L__
 2321 077a DEB7      		in r29,__SP_H__
 2322               	.LCFI79:
 2323               		.cfi_def_cfa_register 28
 2324               	/* prologue: function */
 2325               	/* frame size = 1 */
 2326               	/* stack size = 14 */
 2327               	.L__stack_usage = 14
1063:../libs/nrf24l01.c ****   spi_start();
 2328               		.loc 1 1063 0
 2329 077c 8983      		std Y+1,r24
 2330 077e 0E94 0000 		call spi_start
 2331               	.LVL216:
1064:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_R_REGISTER |
 2332               		.loc 1 1064 0
 2333 0782 8981      		ldd r24,Y+1
 2334 0784 8F71      		andi r24,lo8(31)
 2335 0786 0E94 0000 		call spi_transfer
 2336               	.LVL217:
 2337 078a 612C      		mov r6,__zero_reg__
 2338 078c 712C      		mov r7,__zero_reg__
1065:../libs/nrf24l01.c ****                (address & nRF24L01p_SPI_RW_REGISTER_MASK));
1066:../libs/nrf24l01.c ****   long long unsigned int response = 0;
 2339               		.loc 1 1066 0
 2340 078e 912C      		mov r9,__zero_reg__
 2341 0790 A12C      		mov r10,__zero_reg__
 2342 0792 B12C      		mov r11,__zero_reg__
 2343 0794 C12C      		mov r12,__zero_reg__
 2344 0796 D12C      		mov r13,__zero_reg__
 2345 0798 E12C      		mov r14,__zero_reg__
 2346 079a F12C      		mov r15,__zero_reg__
 2347 079c 10E0      		ldi r17,0
 2348               	.LVL218:
 2349               	.L162:
 2350               	.LBB24:
 2351               	.LBB25:
1067:../libs/nrf24l01.c ****   for (byte i = 0; i < 5; i++)
1068:../libs/nrf24l01.c ****   {
1069:../libs/nrf24l01.c ****     long long unsigned int chunk = spi_transfer(nRF24L01p_SPI_NOP);
 2352               		.loc 1 1069 0 discriminator 2
 2353 079e 8FEF      		ldi r24,lo8(-1)
 2354 07a0 0E94 0000 		call spi_transfer
 2355               	.LVL219:
1070:../libs/nrf24l01.c ****     response |= chunk << (8 * i);
 2356               		.loc 1 1070 0 discriminator 2
 2357 07a4 282F      		mov r18,r24
 2358 07a6 30E0      		ldi r19,0
 2359 07a8 40E0      		ldi r20,0
 2360 07aa 50E0      		ldi r21,0
 2361 07ac 60E0      		ldi r22,0
 2362 07ae 70E0      		ldi r23,0
 2363 07b0 80E0      		ldi r24,0
 2364               	.LVL220:
 2365 07b2 90E0      		ldi r25,0
 2366 07b4 062D      		mov r16,r6
 2367 07b6 0E94 0000 		call __ashldi3
 2368               	.LVL221:
 2369 07ba 922A      		or r9,r18
 2370               	.LVL222:
 2371 07bc A32A      		or r10,r19
 2372 07be B42A      		or r11,r20
 2373 07c0 C52A      		or r12,r21
 2374 07c2 D62A      		or r13,r22
 2375 07c4 E72A      		or r14,r23
 2376 07c6 F82A      		or r15,r24
 2377 07c8 192B      		or r17,r25
 2378               	.LVL223:
 2379 07ca 88E0      		ldi r24,8
 2380 07cc 680E      		add r6,r24
 2381 07ce 711C      		adc r7,__zero_reg__
 2382               	.LBE25:
1067:../libs/nrf24l01.c ****   for (byte i = 0; i < 5; i++)
 2383               		.loc 1 1067 0 discriminator 2
 2384 07d0 E8E2      		ldi r30,40
 2385 07d2 6E16      		cp r6,r30
 2386 07d4 7104      		cpc r7,__zero_reg__
 2387 07d6 01F4      		brne .L162
 2388               	.LBE24:
1071:../libs/nrf24l01.c ****   }
1072:../libs/nrf24l01.c ****   spi_end();
 2389               		.loc 1 1072 0
 2390 07d8 0E94 0000 		call spi_end
 2391               	.LVL224:
1073:../libs/nrf24l01.c **** 
1074:../libs/nrf24l01.c ****   return response;
1075:../libs/nrf24l01.c **** }
 2392               		.loc 1 1075 0
 2393 07dc 292D      		mov r18,r9
 2394 07de 3A2D      		mov r19,r10
 2395 07e0 4B2D      		mov r20,r11
 2396 07e2 5C2D      		mov r21,r12
 2397 07e4 6D2D      		mov r22,r13
 2398 07e6 7E2D      		mov r23,r14
 2399 07e8 8F2D      		mov r24,r15
 2400 07ea 912F      		mov r25,r17
 2401               	/* epilogue start */
 2402 07ec 0F90      		pop __tmp_reg__
 2403 07ee DF91      		pop r29
 2404 07f0 CF91      		pop r28
 2405 07f2 1F91      		pop r17
 2406               	.LVL225:
 2407 07f4 0F91      		pop r16
 2408 07f6 FF90      		pop r15
 2409               	.LVL226:
 2410 07f8 EF90      		pop r14
 2411               	.LVL227:
 2412 07fa DF90      		pop r13
 2413               	.LVL228:
 2414 07fc CF90      		pop r12
 2415               	.LVL229:
 2416 07fe BF90      		pop r11
 2417               	.LVL230:
 2418 0800 AF90      		pop r10
 2419               	.LVL231:
 2420 0802 9F90      		pop r9
 2421               	.LVL232:
 2422 0804 7F90      		pop r7
 2423 0806 6F90      		pop r6
 2424 0808 0895      		ret
 2425               		.cfi_endproc
 2426               	.LFE63:
 2428               	.global	nRF24L01p_get_address
 2430               	nRF24L01p_get_address:
 2431               	.LFB30:
 574:../libs/nrf24l01.c **** {
 2432               		.loc 1 574 0
 2433               		.cfi_startproc
 2434               	.LVL233:
 2435               	/* prologue: function */
 2436               	/* frame size = 0 */
 2437               	/* stack size = 0 */
 2438               	.L__stack_usage = 0
 575:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_ADDR_P0 ||
 2439               		.loc 1 575 0
 2440 080a 96EF      		ldi r25,lo8(-10)
 2441 080c 980F      		add r25,r24
 2442 080e 9730      		cpi r25,lo8(7)
 2443 0810 00F4      		brsh .L164
 586:../libs/nrf24l01.c ****   return nRF24L01p_get_register40(reg);
 2444               		.loc 1 586 0
 2445 0812 0C94 0000 		jmp nRF24L01p_get_register40
 2446               	.LVL234:
 2447               	.L164:
 587:../libs/nrf24l01.c **** }
 2448               		.loc 1 587 0
 2449 0816 20E0      		ldi r18,0
 2450 0818 30E0      		ldi r19,0
 2451 081a 40E0      		ldi r20,0
 2452 081c 50E0      		ldi r21,0
 2453 081e 60E0      		ldi r22,0
 2454 0820 70E0      		ldi r23,0
 2455 0822 80E0      		ldi r24,0
 2456               	.LVL235:
 2457 0824 90E0      		ldi r25,0
 2458 0826 0895      		ret
 2459               		.cfi_endproc
 2460               	.LFE30:
 2462               	.global	nRF24L01p_set_register40
 2464               	nRF24L01p_set_register40:
 2465               	.LFB64:
1076:../libs/nrf24l01.c **** 
1077:../libs/nrf24l01.c **** 
1078:../libs/nrf24l01.c **** //
1079:../libs/nrf24l01.c **** // nRF24L01p_set_register40 implementation.
1080:../libs/nrf24l01.c **** //
1081:../libs/nrf24l01.c **** int nRF24L01p_set_register40(byte address, long long unsigned int data)
1082:../libs/nrf24l01.c **** {
 2466               		.loc 1 1082 0
 2467               		.cfi_startproc
 2468               	.LVL236:
 2469 0828 AF92      		push r10
 2470               	.LCFI80:
 2471               		.cfi_def_cfa_offset 3
 2472               		.cfi_offset 10, -2
 2473 082a BF92      		push r11
 2474               	.LCFI81:
 2475               		.cfi_def_cfa_offset 4
 2476               		.cfi_offset 11, -3
 2477 082c CF92      		push r12
 2478               	.LCFI82:
 2479               		.cfi_def_cfa_offset 5
 2480               		.cfi_offset 12, -4
 2481 082e DF92      		push r13
 2482               	.LCFI83:
 2483               		.cfi_def_cfa_offset 6
 2484               		.cfi_offset 13, -5
 2485 0830 EF92      		push r14
 2486               	.LCFI84:
 2487               		.cfi_def_cfa_offset 7
 2488               		.cfi_offset 14, -6
 2489 0832 FF92      		push r15
 2490               	.LCFI85:
 2491               		.cfi_def_cfa_offset 8
 2492               		.cfi_offset 15, -7
 2493 0834 0F93      		push r16
 2494               	.LCFI86:
 2495               		.cfi_def_cfa_offset 9
 2496               		.cfi_offset 16, -8
 2497 0836 1F93      		push r17
 2498               	.LCFI87:
 2499               		.cfi_def_cfa_offset 10
 2500               		.cfi_offset 17, -9
 2501 0838 CF93      		push r28
 2502               	.LCFI88:
 2503               		.cfi_def_cfa_offset 11
 2504               		.cfi_offset 28, -10
 2505 083a DF93      		push r29
 2506               	.LCFI89:
 2507               		.cfi_def_cfa_offset 12
 2508               		.cfi_offset 29, -11
 2509 083c 00D0      		rcall .
 2510               	.LCFI90:
 2511               		.cfi_def_cfa_offset 14
 2512 083e CDB7      		in r28,__SP_L__
 2513 0840 DEB7      		in r29,__SP_H__
 2514               	.LCFI91:
 2515               		.cfi_def_cfa_register 28
 2516               	/* prologue: function */
 2517               	/* frame size = 2 */
 2518               	/* stack size = 12 */
 2519               	.L__stack_usage = 12
 2520 0842 6901      		movw r12,r18
 2521 0844 7A01      		movw r14,r20
 2522 0846 A62E      		mov r10,r22
1083:../libs/nrf24l01.c ****   if (address >= 0x18 && address <= 0x1B)
 2523               		.loc 1 1083 0
 2524 0848 28EE      		ldi r18,lo8(-24)
 2525 084a 280F      		add r18,r24
 2526 084c 2430      		cpi r18,lo8(4)
 2527 084e 00F0      		brlo .L169
1084:../libs/nrf24l01.c ****     return -1;
1085:../libs/nrf24l01.c **** 
1086:../libs/nrf24l01.c ****   spi_start();
 2528               		.loc 1 1086 0
 2529 0850 8983      		std Y+1,r24
 2530 0852 7A83      		std Y+2,r23
 2531 0854 0E94 0000 		call spi_start
 2532               	.LVL237:
1087:../libs/nrf24l01.c ****   spi_transfer(nRF24L01p_SPI_W_REGISTER |
 2533               		.loc 1 1087 0
 2534 0858 8981      		ldd r24,Y+1
 2535 085a 8F71      		andi r24,lo8(31)
 2536 085c 8062      		ori r24,lo8(32)
 2537 085e 0E94 0000 		call spi_transfer
 2538               	.LVL238:
 2539 0862 85E0      		ldi r24,lo8(5)
 2540 0864 B82E      		mov r11,r24
 2541 0866 9A81      		ldd r25,Y+2
 2542               	.LVL239:
 2543               	.L168:
 2544               	.LBB26:
1088:../libs/nrf24l01.c ****                (address & nRF24L01p_SPI_RW_REGISTER_MASK));
1089:../libs/nrf24l01.c ****   for (byte i = 0; i < 5; i++)
1090:../libs/nrf24l01.c ****   {
1091:../libs/nrf24l01.c ****     spi_transfer(data & 0xFF);
 2545               		.loc 1 1091 0 discriminator 2
 2546 0868 802F      		mov r24,r16
 2547 086a 9A83      		std Y+2,r25
 2548 086c 0E94 0000 		call spi_transfer
 2549               	.LVL240:
1092:../libs/nrf24l01.c ****     data >>= 8;
 2550               		.loc 1 1092 0 discriminator 2
 2551 0870 9801      		movw r18,r16
 2552 0872 A601      		movw r20,r12
 2553 0874 B701      		movw r22,r14
 2554 0876 8A2D      		mov r24,r10
 2555 0878 9A81      		ldd r25,Y+2
 2556 087a 08E0      		ldi r16,lo8(8)
 2557 087c 0E94 0000 		call __lshrdi3
 2558 0880 8901      		movw r16,r18
 2559 0882 6A01      		movw r12,r20
 2560 0884 7B01      		movw r14,r22
 2561 0886 A82E      		mov r10,r24
 2562               	.LVL241:
 2563 0888 BA94      		dec r11
 2564               	.LVL242:
1089:../libs/nrf24l01.c ****   for (byte i = 0; i < 5; i++)
 2565               		.loc 1 1089 0 discriminator 2
 2566 088a 01F4      		brne .L168
 2567               	.LBE26:
1093:../libs/nrf24l01.c ****   }
1094:../libs/nrf24l01.c ****   spi_end();
 2568               		.loc 1 1094 0
 2569 088c 0E94 0000 		call spi_end
 2570               	.LVL243:
1095:../libs/nrf24l01.c **** 
1096:../libs/nrf24l01.c ****   return 0;
 2571               		.loc 1 1096 0
 2572 0890 80E0      		ldi r24,0
 2573 0892 90E0      		ldi r25,0
 2574 0894 00C0      		rjmp .L166
 2575               	.LVL244:
 2576               	.L169:
1084:../libs/nrf24l01.c ****     return -1;
 2577               		.loc 1 1084 0
 2578 0896 8FEF      		ldi r24,lo8(-1)
 2579 0898 9FEF      		ldi r25,lo8(-1)
 2580               	.LVL245:
 2581               	.L166:
 2582               	/* epilogue start */
1097:../libs/nrf24l01.c **** }
 2583               		.loc 1 1097 0
 2584 089a 0F90      		pop __tmp_reg__
 2585 089c 0F90      		pop __tmp_reg__
 2586 089e DF91      		pop r29
 2587 08a0 CF91      		pop r28
 2588 08a2 1F91      		pop r17
 2589 08a4 0F91      		pop r16
 2590 08a6 FF90      		pop r15
 2591 08a8 EF90      		pop r14
 2592 08aa DF90      		pop r13
 2593 08ac CF90      		pop r12
 2594 08ae BF90      		pop r11
 2595 08b0 AF90      		pop r10
 2596 08b2 0895      		ret
 2597               		.cfi_endproc
 2598               	.LFE64:
 2600               	.global	nRF24L01p_config_address
 2602               	nRF24L01p_config_address:
 2603               	.LFB29:
 550:../libs/nrf24l01.c **** {
 2604               		.loc 1 550 0
 2605               		.cfi_startproc
 2606               	.LVL246:
 2607 08b4 0F93      		push r16
 2608               	.LCFI92:
 2609               		.cfi_def_cfa_offset 3
 2610               		.cfi_offset 16, -2
 2611 08b6 1F93      		push r17
 2612               	.LCFI93:
 2613               		.cfi_def_cfa_offset 4
 2614               		.cfi_offset 17, -3
 2615               	/* prologue: function */
 2616               	/* frame size = 0 */
 2617               	/* stack size = 2 */
 2618               	.L__stack_usage = 2
 551:../libs/nrf24l01.c ****   if (!(reg == nRF24L01p_REGISTER_RX_ADDR_P0 ||
 2619               		.loc 1 551 0
 2620 08b8 96EF      		ldi r25,lo8(-10)
 2621 08ba 980F      		add r25,r24
 2622 08bc 9730      		cpi r25,lo8(7)
 2623 08be 00F4      		brsh .L172
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 2624               		.loc 1 564 0
 2625 08c0 0E94 0000 		call nRF24L01p_set_register40
 2626               	.LVL247:
 566:../libs/nrf24l01.c ****   return 0;
 2627               		.loc 1 566 0
 2628 08c4 80E0      		ldi r24,0
 2629 08c6 90E0      		ldi r25,0
 2630 08c8 00C0      		rjmp .L171
 2631               	.LVL248:
 2632               	.L172:
 558:../libs/nrf24l01.c ****     return -1;
 2633               		.loc 1 558 0
 2634 08ca 8FEF      		ldi r24,lo8(-1)
 2635 08cc 9FEF      		ldi r25,lo8(-1)
 2636               	.LVL249:
 2637               	.L171:
 2638               	/* epilogue start */
 567:../libs/nrf24l01.c **** }
 2639               		.loc 1 567 0
 2640 08ce 1F91      		pop r17
 2641 08d0 0F91      		pop r16
 2642               	.LVL250:
 2643 08d2 0895      		ret
 2644               		.cfi_endproc
 2645               	.LFE29:
 2647               	.global	nRF24L01p_read
 2649               	nRF24L01p_read:
 2650               	.LFB53:
 856:../libs/nrf24l01.c **** {
 2651               		.loc 1 856 0
 2652               		.cfi_startproc
 2653               	.LVL251:
 2654 08d4 8F92      		push r8
 2655               	.LCFI94:
 2656               		.cfi_def_cfa_offset 3
 2657               		.cfi_offset 8, -2
 2658 08d6 9F92      		push r9
 2659               	.LCFI95:
 2660               		.cfi_def_cfa_offset 4
 2661               		.cfi_offset 9, -3
 2662 08d8 AF92      		push r10
 2663               	.LCFI96:
 2664               		.cfi_def_cfa_offset 5
 2665               		.cfi_offset 10, -4
 2666 08da BF92      		push r11
 2667               	.LCFI97:
 2668               		.cfi_def_cfa_offset 6
 2669               		.cfi_offset 11, -5
 2670 08dc CF92      		push r12
 2671               	.LCFI98:
 2672               		.cfi_def_cfa_offset 7
 2673               		.cfi_offset 12, -6
 2674 08de DF92      		push r13
 2675               	.LCFI99:
 2676               		.cfi_def_cfa_offset 8
 2677               		.cfi_offset 13, -7
 2678 08e0 EF92      		push r14
 2679               	.LCFI100:
 2680               		.cfi_def_cfa_offset 9
 2681               		.cfi_offset 14, -8
 2682 08e2 FF92      		push r15
 2683               	.LCFI101:
 2684               		.cfi_def_cfa_offset 10
 2685               		.cfi_offset 15, -9
 2686 08e4 0F93      		push r16
 2687               	.LCFI102:
 2688               		.cfi_def_cfa_offset 11
 2689               		.cfi_offset 16, -10
 2690 08e6 1F93      		push r17
 2691               	.LCFI103:
 2692               		.cfi_def_cfa_offset 12
 2693               		.cfi_offset 17, -11
 2694 08e8 CF93      		push r28
 2695               	.LCFI104:
 2696               		.cfi_def_cfa_offset 13
 2697               		.cfi_offset 28, -12
 2698 08ea DF93      		push r29
 2699               	.LCFI105:
 2700               		.cfi_def_cfa_offset 14
 2701               		.cfi_offset 29, -13
 2702 08ec 1F92      		push __zero_reg__
 2703               	.LCFI106:
 2704               		.cfi_def_cfa_offset 15
 2705 08ee CDB7      		in r28,__SP_L__
 2706 08f0 DEB7      		in r29,__SP_H__
 2707               	.LCFI107:
 2708               		.cfi_def_cfa_register 28
 2709               	/* prologue: function */
 2710               	/* frame size = 1 */
 2711               	/* stack size = 13 */
 2712               	.L__stack_usage = 13
 2713 08f2 6C01      		movw r12,r24
 2714 08f4 7B01      		movw r14,r22
 857:../libs/nrf24l01.c ****   if (!nRF24L01p_rx_pipes[pipe].configured)
 2715               		.loc 1 857 0
 2716 08f6 A42E      		mov r10,r20
 2717 08f8 B12C      		mov r11,__zero_reg__
 2718 08fa 8EE0      		ldi r24,lo8(14)
 2719               	.LVL252:
 2720 08fc 489F      		mul r20,r24
 2721 08fe 4001      		movw r8,r0
 2722 0900 1124      		clr __zero_reg__
 2723 0902 D401      		movw r26,r8
 2724 0904 A050      		subi r26,lo8(-(nRF24L01p_rx_pipes))
 2725 0906 B040      		sbci r27,hi8(-(nRF24L01p_rx_pipes))
 2726 0908 4D01      		movw r8,r26
 2727 090a 8C91      		ld r24,X
 2728 090c 8823      		tst r24
 2729 090e 01F4      		brne .+2
 2730 0910 00C0      		rjmp .L183
 2731               	.LVL253:
 860:../libs/nrf24l01.c ****   if (!nRF24L01p_read_status(pipe))
 2732               		.loc 1 860 0
 2733 0912 1C96      		adiw r26,12
 2734 0914 8D91      		ld r24,X+
 2735 0916 9C91      		ld r25,X
 2736 0918 1D97      		sbiw r26,12+1
 2737 091a 892B      		or r24,r25
 2738 091c 01F0      		breq .+2
 2739 091e 00C0      		rjmp .L184
 864:../libs/nrf24l01.c ****   nRF24L01p_disable();
 2740               		.loc 1 864 0
 2741 0920 4983      		std Y+1,r20
 2742 0922 0E94 0000 		call nRF24L01p_disable
 2743               	.LVL254:
 867:../libs/nrf24l01.c ****   switch (pipe)
 2744               		.loc 1 867 0
 2745 0926 4981      		ldd r20,Y+1
 2746 0928 4230      		cpi r20,lo8(2)
 2747 092a 01F4      		brne .+2
 2748 092c 00C0      		rjmp .L175
 2749 092e 00F4      		brsh .L176
 2750 0930 4423      		tst r20
 2751 0932 01F0      		breq .L177
 2752 0934 4130      		cpi r20,lo8(1)
 2753 0936 01F0      		breq .+2
 2754 0938 00C0      		rjmp .L185
 2755               	.LVL255:
 2756               	.LBB65:
 2757               	.LBB66:
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 2758               		.loc 1 443 0
 2759 093a 4FEF      		ldi r20,lo8(-1)
 2760 093c 62E0      		ldi r22,lo8(2)
 2761 093e 82E0      		ldi r24,lo8(2)
 2762 0940 0E94 0000 		call nRF24L01p_set_register8_bits
 2763               	.LVL256:
 2764               	.LBE66:
 2765               	.LBE65:
 876:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P1, nRF24L01p_rx_pipes[pipe].addre
 2766               		.loc 1 876 0
 2767 0944 F401      		movw r30,r8
 2768 0946 3196      		adiw r30,1
 2769               	.LBB67:
 2770               	.LBB68:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 2771               		.loc 1 564 0
 2772 0948 D401      		movw r26,r8
 2773 094a 1196      		adiw r26,1
 2774 094c 0C91      		ld r16,X
 2775 094e 1181      		ldd r17,Z+1
 2776 0950 2281      		ldd r18,Z+2
 2777 0952 3381      		ldd r19,Z+3
 2778 0954 4481      		ldd r20,Z+4
 2779 0956 5581      		ldd r21,Z+5
 2780 0958 6681      		ldd r22,Z+6
 2781 095a 7781      		ldd r23,Z+7
 2782 095c 8BE0      		ldi r24,lo8(11)
 2783 095e 0E94 0000 		call nRF24L01p_set_register40
 2784               	.LVL257:
 2785               	.LBE68:
 2786               	.LBE67:
 2787               	.LBB69:
 2788               	.LBB70:
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 2789               		.loc 1 603 0
 2790 0962 F401      		movw r30,r8
 2791 0964 4185      		ldd r20,Z+9
 2792 0966 6FE3      		ldi r22,lo8(63)
 2793 0968 82E1      		ldi r24,lo8(18)
 2794 096a 00C0      		rjmp .L187
 2795               	.LVL258:
 2796               	.L176:
 2797               	.LBE70:
 2798               	.LBE69:
 867:../libs/nrf24l01.c ****   switch (pipe)
 2799               		.loc 1 867 0
 2800 096c 4430      		cpi r20,lo8(4)
 2801 096e 01F4      		brne .+2
 2802 0970 00C0      		rjmp .L179
 2803 0972 00F4      		brsh .+2
 2804 0974 00C0      		rjmp .L180
 2805 0976 4530      		cpi r20,lo8(5)
 2806 0978 01F0      		breq .+2
 2807 097a 00C0      		rjmp .L185
 2808               	.LVL259:
 2809               	.LBB71:
 2810               	.LBB72:
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 2811               		.loc 1 443 0
 2812 097c 4FEF      		ldi r20,lo8(-1)
 2813 097e 60E2      		ldi r22,lo8(32)
 2814 0980 82E0      		ldi r24,lo8(2)
 2815 0982 0E94 0000 		call nRF24L01p_set_register8_bits
 2816               	.LVL260:
 2817               	.LBE72:
 2818               	.LBE71:
 896:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P5, nRF24L01p_rx_pipes[pipe].addre
 2819               		.loc 1 896 0
 2820 0986 F401      		movw r30,r8
 2821 0988 3196      		adiw r30,1
 2822               	.LBB73:
 2823               	.LBB74:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 2824               		.loc 1 564 0
 2825 098a D401      		movw r26,r8
 2826 098c 1196      		adiw r26,1
 2827 098e 0C91      		ld r16,X
 2828 0990 1181      		ldd r17,Z+1
 2829 0992 2281      		ldd r18,Z+2
 2830 0994 3381      		ldd r19,Z+3
 2831 0996 4481      		ldd r20,Z+4
 2832 0998 5581      		ldd r21,Z+5
 2833 099a 6681      		ldd r22,Z+6
 2834 099c 7781      		ldd r23,Z+7
 2835 099e 8FE0      		ldi r24,lo8(15)
 2836 09a0 0E94 0000 		call nRF24L01p_set_register40
 2837               	.LVL261:
 2838               	.LBE74:
 2839               	.LBE73:
 2840               	.LBB75:
 2841               	.LBB76:
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 2842               		.loc 1 603 0
 2843 09a4 F401      		movw r30,r8
 2844 09a6 4185      		ldd r20,Z+9
 2845 09a8 6FE3      		ldi r22,lo8(63)
 2846 09aa 86E1      		ldi r24,lo8(22)
 2847 09ac 00C0      		rjmp .L187
 2848               	.LVL262:
 2849               	.L177:
 2850               	.LBE76:
 2851               	.LBE75:
 2852               	.LBB78:
 2853               	.LBB79:
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 2854               		.loc 1 443 0
 2855 09ae 4FEF      		ldi r20,lo8(-1)
 2856 09b0 61E0      		ldi r22,lo8(1)
 2857 09b2 82E0      		ldi r24,lo8(2)
 2858 09b4 0E94 0000 		call nRF24L01p_set_register8_bits
 2859               	.LVL263:
 2860               	.LBE79:
 2861               	.LBE78:
 871:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P0, nRF24L01p_rx_pipes[pipe].addre
 2862               		.loc 1 871 0
 2863 09b8 F401      		movw r30,r8
 2864 09ba 3196      		adiw r30,1
 2865               	.LBB80:
 2866               	.LBB81:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 2867               		.loc 1 564 0
 2868 09bc D401      		movw r26,r8
 2869 09be 1196      		adiw r26,1
 2870 09c0 0C91      		ld r16,X
 2871 09c2 1181      		ldd r17,Z+1
 2872 09c4 2281      		ldd r18,Z+2
 2873 09c6 3381      		ldd r19,Z+3
 2874 09c8 4481      		ldd r20,Z+4
 2875 09ca 5581      		ldd r21,Z+5
 2876 09cc 6681      		ldd r22,Z+6
 2877 09ce 7781      		ldd r23,Z+7
 2878 09d0 8AE0      		ldi r24,lo8(10)
 2879 09d2 0E94 0000 		call nRF24L01p_set_register40
 2880               	.LVL264:
 2881               	.LBE81:
 2882               	.LBE80:
 2883               	.LBB82:
 2884               	.LBB83:
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 2885               		.loc 1 603 0
 2886 09d6 F401      		movw r30,r8
 2887 09d8 4185      		ldd r20,Z+9
 2888 09da 6FE3      		ldi r22,lo8(63)
 2889 09dc 81E1      		ldi r24,lo8(17)
 2890 09de 00C0      		rjmp .L187
 2891               	.LVL265:
 2892               	.L175:
 2893               	.LBE83:
 2894               	.LBE82:
 2895               	.LBB84:
 2896               	.LBB85:
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 2897               		.loc 1 443 0
 2898 09e0 4FEF      		ldi r20,lo8(-1)
 2899 09e2 64E0      		ldi r22,lo8(4)
 2900 09e4 82E0      		ldi r24,lo8(2)
 2901 09e6 0E94 0000 		call nRF24L01p_set_register8_bits
 2902               	.LVL266:
 2903               	.LBE85:
 2904               	.LBE84:
 881:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P2, nRF24L01p_rx_pipes[pipe].addre
 2905               		.loc 1 881 0
 2906 09ea F401      		movw r30,r8
 2907 09ec 3196      		adiw r30,1
 2908               	.LBB86:
 2909               	.LBB87:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 2910               		.loc 1 564 0
 2911 09ee D401      		movw r26,r8
 2912 09f0 1196      		adiw r26,1
 2913 09f2 0C91      		ld r16,X
 2914 09f4 1181      		ldd r17,Z+1
 2915 09f6 2281      		ldd r18,Z+2
 2916 09f8 3381      		ldd r19,Z+3
 2917 09fa 4481      		ldd r20,Z+4
 2918 09fc 5581      		ldd r21,Z+5
 2919 09fe 6681      		ldd r22,Z+6
 2920 0a00 7781      		ldd r23,Z+7
 2921 0a02 8CE0      		ldi r24,lo8(12)
 2922 0a04 0E94 0000 		call nRF24L01p_set_register40
 2923               	.LVL267:
 2924               	.LBE87:
 2925               	.LBE86:
 2926               	.LBB88:
 2927               	.LBB89:
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 2928               		.loc 1 603 0
 2929 0a08 F401      		movw r30,r8
 2930 0a0a 4185      		ldd r20,Z+9
 2931 0a0c 6FE3      		ldi r22,lo8(63)
 2932 0a0e 83E1      		ldi r24,lo8(19)
 2933 0a10 00C0      		rjmp .L187
 2934               	.LVL268:
 2935               	.L180:
 2936               	.LBE89:
 2937               	.LBE88:
 2938               	.LBB90:
 2939               	.LBB91:
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 2940               		.loc 1 443 0
 2941 0a12 4FEF      		ldi r20,lo8(-1)
 2942 0a14 68E0      		ldi r22,lo8(8)
 2943 0a16 82E0      		ldi r24,lo8(2)
 2944 0a18 0E94 0000 		call nRF24L01p_set_register8_bits
 2945               	.LVL269:
 2946               	.LBE91:
 2947               	.LBE90:
 886:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P3, nRF24L01p_rx_pipes[pipe].addre
 2948               		.loc 1 886 0
 2949 0a1c F401      		movw r30,r8
 2950 0a1e 3196      		adiw r30,1
 2951               	.LBB92:
 2952               	.LBB93:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 2953               		.loc 1 564 0
 2954 0a20 D401      		movw r26,r8
 2955 0a22 1196      		adiw r26,1
 2956 0a24 0C91      		ld r16,X
 2957 0a26 1181      		ldd r17,Z+1
 2958 0a28 2281      		ldd r18,Z+2
 2959 0a2a 3381      		ldd r19,Z+3
 2960 0a2c 4481      		ldd r20,Z+4
 2961 0a2e 5581      		ldd r21,Z+5
 2962 0a30 6681      		ldd r22,Z+6
 2963 0a32 7781      		ldd r23,Z+7
 2964 0a34 8DE0      		ldi r24,lo8(13)
 2965 0a36 0E94 0000 		call nRF24L01p_set_register40
 2966               	.LVL270:
 2967               	.LBE93:
 2968               	.LBE92:
 2969               	.LBB94:
 2970               	.LBB95:
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 2971               		.loc 1 603 0
 2972 0a3a F401      		movw r30,r8
 2973 0a3c 4185      		ldd r20,Z+9
 2974 0a3e 6FE3      		ldi r22,lo8(63)
 2975 0a40 84E1      		ldi r24,lo8(20)
 2976 0a42 00C0      		rjmp .L187
 2977               	.LVL271:
 2978               	.L179:
 2979               	.LBE95:
 2980               	.LBE94:
 2981               	.LBB96:
 2982               	.LBB97:
 443:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(nRF24L01p_REGISTER_EN_RXADDR,
 2983               		.loc 1 443 0
 2984 0a44 4FEF      		ldi r20,lo8(-1)
 2985 0a46 60E1      		ldi r22,lo8(16)
 2986 0a48 82E0      		ldi r24,lo8(2)
 2987 0a4a 0E94 0000 		call nRF24L01p_set_register8_bits
 2988               	.LVL272:
 2989               	.LBE97:
 2990               	.LBE96:
 891:../libs/nrf24l01.c ****       ret |= nRF24L01p_config_address(nRF24L01p_REGISTER_RX_ADDR_P4, nRF24L01p_rx_pipes[pipe].addre
 2991               		.loc 1 891 0
 2992 0a4e F401      		movw r30,r8
 2993 0a50 3196      		adiw r30,1
 2994               	.LBB98:
 2995               	.LBB99:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 2996               		.loc 1 564 0
 2997 0a52 D401      		movw r26,r8
 2998 0a54 1196      		adiw r26,1
 2999 0a56 0C91      		ld r16,X
 3000 0a58 1181      		ldd r17,Z+1
 3001 0a5a 2281      		ldd r18,Z+2
 3002 0a5c 3381      		ldd r19,Z+3
 3003 0a5e 4481      		ldd r20,Z+4
 3004 0a60 5581      		ldd r21,Z+5
 3005 0a62 6681      		ldd r22,Z+6
 3006 0a64 7781      		ldd r23,Z+7
 3007 0a66 8EE0      		ldi r24,lo8(14)
 3008 0a68 0E94 0000 		call nRF24L01p_set_register40
 3009               	.LVL273:
 3010               	.LBE99:
 3011               	.LBE98:
 3012               	.LBB100:
 3013               	.LBB101:
 603:../libs/nrf24l01.c ****   nRF24L01p_set_register8_bits(reg,
 3014               		.loc 1 603 0
 3015 0a6c F401      		movw r30,r8
 3016 0a6e 4185      		ldd r20,Z+9
 3017 0a70 6FE3      		ldi r22,lo8(63)
 3018 0a72 85E1      		ldi r24,lo8(21)
 3019               	.LVL274:
 3020               	.L187:
 3021               	.LBE101:
 3022               	.LBE100:
 3023               	.LBB102:
 3024               	.LBB77:
 3025 0a74 0E94 0000 		call nRF24L01p_set_register8_bits
 3026               	.LVL275:
 3027               	.LBE77:
 3028               	.LBE102:
 906:../libs/nrf24l01.c ****   nRF24L01p_rx_pipes[pipe].data = dst;
 3029               		.loc 1 906 0
 3030 0a78 8EE0      		ldi r24,lo8(14)
 3031 0a7a 8A9D      		mul r24,r10
 3032 0a7c F001      		movw r30,r0
 3033 0a7e 8B9D      		mul r24,r11
 3034 0a80 F00D      		add r31,r0
 3035 0a82 1124      		clr __zero_reg__
 3036 0a84 E050      		subi r30,lo8(-(nRF24L01p_rx_pipes))
 3037 0a86 F040      		sbci r31,hi8(-(nRF24L01p_rx_pipes))
 3038 0a88 D386      		std Z+11,r13
 3039 0a8a C286      		std Z+10,r12
 907:../libs/nrf24l01.c ****   nRF24L01p_rx_pipes[pipe].remaining = count;
 3040               		.loc 1 907 0
 3041 0a8c F586      		std Z+13,r15
 3042 0a8e E486      		std Z+12,r14
 910:../libs/nrf24l01.c ****   nRF24L01p_enable();
 3043               		.loc 1 910 0
 3044 0a90 0E94 0000 		call nRF24L01p_enable
 3045               	.LVL276:
 912:../libs/nrf24l01.c ****   return 0;
 3046               		.loc 1 912 0
 3047 0a94 80E0      		ldi r24,0
 3048 0a96 90E0      		ldi r25,0
 3049 0a98 00C0      		rjmp .L186
 3050               	.LVL277:
 3051               	.L183:
 858:../libs/nrf24l01.c ****     return -1;
 3052               		.loc 1 858 0
 3053 0a9a 8FEF      		ldi r24,lo8(-1)
 3054 0a9c 9FEF      		ldi r25,lo8(-1)
 3055 0a9e 00C0      		rjmp .L186
 3056               	.LVL278:
 3057               	.L184:
 861:../libs/nrf24l01.c ****     return -2;
 3058               		.loc 1 861 0
 3059 0aa0 8EEF      		ldi r24,lo8(-2)
 3060 0aa2 9FEF      		ldi r25,lo8(-1)
 3061 0aa4 00C0      		rjmp .L186
 3062               	.LVL279:
 3063               	.L185:
 904:../libs/nrf24l01.c ****     return -3;
 3064               		.loc 1 904 0
 3065 0aa6 8DEF      		ldi r24,lo8(-3)
 3066 0aa8 9FEF      		ldi r25,lo8(-1)
 3067               	.LVL280:
 3068               	.L186:
 3069               	/* epilogue start */
 913:../libs/nrf24l01.c **** }
 3070               		.loc 1 913 0
 3071 0aaa 0F90      		pop __tmp_reg__
 3072 0aac DF91      		pop r29
 3073 0aae CF91      		pop r28
 3074 0ab0 1F91      		pop r17
 3075 0ab2 0F91      		pop r16
 3076 0ab4 FF90      		pop r15
 3077 0ab6 EF90      		pop r14
 3078               	.LVL281:
 3079 0ab8 DF90      		pop r13
 3080 0aba CF90      		pop r12
 3081               	.LVL282:
 3082 0abc BF90      		pop r11
 3083 0abe AF90      		pop r10
 3084               	.LVL283:
 3085 0ac0 9F90      		pop r9
 3086 0ac2 8F90      		pop r8
 3087 0ac4 0895      		ret
 3088               		.cfi_endproc
 3089               	.LFE53:
 3091               	.global	nRF24L01p_write
 3093               	nRF24L01p_write:
 3094               	.LFB55:
 929:../libs/nrf24l01.c **** {
 3095               		.loc 1 929 0
 3096               		.cfi_startproc
 3097               	.LVL284:
 3098 0ac6 5F92      		push r5
 3099               	.LCFI108:
 3100               		.cfi_def_cfa_offset 3
 3101               		.cfi_offset 5, -2
 3102 0ac8 6F92      		push r6
 3103               	.LCFI109:
 3104               		.cfi_def_cfa_offset 4
 3105               		.cfi_offset 6, -3
 3106 0aca 7F92      		push r7
 3107               	.LCFI110:
 3108               		.cfi_def_cfa_offset 5
 3109               		.cfi_offset 7, -4
 3110 0acc 8F92      		push r8
 3111               	.LCFI111:
 3112               		.cfi_def_cfa_offset 6
 3113               		.cfi_offset 8, -5
 3114 0ace 9F92      		push r9
 3115               	.LCFI112:
 3116               		.cfi_def_cfa_offset 7
 3117               		.cfi_offset 9, -6
 3118 0ad0 AF92      		push r10
 3119               	.LCFI113:
 3120               		.cfi_def_cfa_offset 8
 3121               		.cfi_offset 10, -7
 3122 0ad2 BF92      		push r11
 3123               	.LCFI114:
 3124               		.cfi_def_cfa_offset 9
 3125               		.cfi_offset 11, -8
 3126 0ad4 CF92      		push r12
 3127               	.LCFI115:
 3128               		.cfi_def_cfa_offset 10
 3129               		.cfi_offset 12, -9
 3130 0ad6 DF92      		push r13
 3131               	.LCFI116:
 3132               		.cfi_def_cfa_offset 11
 3133               		.cfi_offset 13, -10
 3134 0ad8 EF92      		push r14
 3135               	.LCFI117:
 3136               		.cfi_def_cfa_offset 12
 3137               		.cfi_offset 14, -11
 3138 0ada FF92      		push r15
 3139               	.LCFI118:
 3140               		.cfi_def_cfa_offset 13
 3141               		.cfi_offset 15, -12
 3142 0adc 0F93      		push r16
 3143               	.LCFI119:
 3144               		.cfi_def_cfa_offset 14
 3145               		.cfi_offset 16, -13
 3146 0ade 1F93      		push r17
 3147               	.LCFI120:
 3148               		.cfi_def_cfa_offset 15
 3149               		.cfi_offset 17, -14
 3150 0ae0 CF93      		push r28
 3151               	.LCFI121:
 3152               		.cfi_def_cfa_offset 16
 3153               		.cfi_offset 28, -15
 3154 0ae2 DF93      		push r29
 3155               	.LCFI122:
 3156               		.cfi_def_cfa_offset 17
 3157               		.cfi_offset 29, -16
 3158               	/* prologue: function */
 3159               	/* frame size = 0 */
 3160               	/* stack size = 15 */
 3161               	.L__stack_usage = 15
 3162 0ae4 7C01      		movw r14,r24
 3163 0ae6 EB01      		movw r28,r22
 930:../libs/nrf24l01.c ****   if (!nRF24L01p_rx_pipes[pipe].configured)
 3164               		.loc 1 930 0
 3165 0ae8 8EE0      		ldi r24,lo8(14)
 3166               	.LVL285:
 3167 0aea 489F      		mul r20,r24
 3168 0aec D001      		movw r26,r0
 3169 0aee 1124      		clr __zero_reg__
 3170 0af0 A050      		subi r26,lo8(-(nRF24L01p_rx_pipes))
 3171 0af2 B040      		sbci r27,hi8(-(nRF24L01p_rx_pipes))
 3172 0af4 8C91      		ld r24,X
 3173 0af6 8823      		tst r24
 3174 0af8 01F4      		brne .+2
 3175 0afa 00C0      		rjmp .L190
 933:../libs/nrf24l01.c ****   if (!nRF24L01p_write_status())
 3176               		.loc 1 933 0
 3177 0afc 8091 0000 		lds r24,nRF24L01p_tx_pipe+11
 3178 0b00 9091 0000 		lds r25,nRF24L01p_tx_pipe+11+1
 3179 0b04 892B      		or r24,r25
 3180 0b06 01F0      		breq .+2
 3181 0b08 00C0      		rjmp .L191
 938:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.address = nRF24L01p_rx_pipes[pipe].address;
 3182               		.loc 1 938 0
 3183 0b0a FD01      		movw r30,r26
 3184 0b0c 3196      		adiw r30,1
 3185 0b0e 1196      		adiw r26,1
 3186 0b10 6C90      		ld r6,X
 3187 0b12 1197      		sbiw r26,1
 3188 0b14 7180      		ldd r7,Z+1
 3189 0b16 8280      		ldd r8,Z+2
 3190 0b18 9380      		ldd r9,Z+3
 3191 0b1a A480      		ldd r10,Z+4
 3192 0b1c B580      		ldd r11,Z+5
 3193 0b1e C680      		ldd r12,Z+6
 3194 0b20 D780      		ldd r13,Z+7
 3195 0b22 6092 0000 		sts nRF24L01p_tx_pipe,r6
 3196 0b26 7092 0000 		sts nRF24L01p_tx_pipe+1,r7
 3197 0b2a 8092 0000 		sts nRF24L01p_tx_pipe+2,r8
 3198 0b2e 9092 0000 		sts nRF24L01p_tx_pipe+3,r9
 3199 0b32 A092 0000 		sts nRF24L01p_tx_pipe+4,r10
 3200 0b36 B092 0000 		sts nRF24L01p_tx_pipe+5,r11
 3201 0b3a C092 0000 		sts nRF24L01p_tx_pipe+6,r12
 3202 0b3e D092 0000 		sts nRF24L01p_tx_pipe+7,r13
 939:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.payload_width = nRF24L01p_rx_pipes[pipe].payload_width;
 3203               		.loc 1 939 0
 3204 0b42 1996      		adiw r26,9
 3205 0b44 5C90      		ld r5,X
 3206 0b46 5092 0000 		sts nRF24L01p_tx_pipe+8,r5
 942:../libs/nrf24l01.c ****   nRF24L01p_config_rx(nRF24L01p_MASK_EN_RXADDR_ERX_P0, TRUE);
 3207               		.loc 1 942 0
 3208 0b4a 61E0      		ldi r22,lo8(1)
 3209               	.LVL286:
 3210 0b4c 81E0      		ldi r24,lo8(1)
 3211 0b4e 0E94 0000 		call nRF24L01p_config_rx
 3212               	.LVL287:
 3213               	.LBB109:
 3214               	.LBB110:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 3215               		.loc 1 564 0
 3216 0b52 8301      		movw r16,r6
 3217 0b54 9401      		movw r18,r8
 3218 0b56 A501      		movw r20,r10
 3219 0b58 B601      		movw r22,r12
 3220 0b5a 8AE0      		ldi r24,lo8(10)
 3221 0b5c 0E94 0000 		call nRF24L01p_set_register40
 3222               	.LVL288:
 3223               	.LBE110:
 3224               	.LBE109:
 945:../libs/nrf24l01.c ****   nRF24L01p_config_payload_width(nRF24L01p_REGISTER_RX_ADDR_P0,
 3225               		.loc 1 945 0
 3226 0b60 652D      		mov r22,r5
 3227 0b62 8AE0      		ldi r24,lo8(10)
 3228 0b64 0E94 0000 		call nRF24L01p_config_payload_width
 3229               	.LVL289:
 3230               	.LBB111:
 3231               	.LBB112:
 564:../libs/nrf24l01.c ****   nRF24L01p_set_register40(reg, address);
 3232               		.loc 1 564 0
 3233 0b68 9401      		movw r18,r8
 3234 0b6a A501      		movw r20,r10
 3235 0b6c B601      		movw r22,r12
 3236 0b6e 80E1      		ldi r24,lo8(16)
 3237 0b70 0E94 0000 		call nRF24L01p_set_register40
 3238               	.LVL290:
 3239               	.LBE112:
 3240               	.LBE111:
 951:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.data = src;
 3241               		.loc 1 951 0
 3242 0b74 F092 0000 		sts nRF24L01p_tx_pipe+9+1,r15
 3243 0b78 E092 0000 		sts nRF24L01p_tx_pipe+9,r14
 952:../libs/nrf24l01.c ****   nRF24L01p_tx_pipe.remaining = count;
 3244               		.loc 1 952 0
 3245 0b7c D093 0000 		sts nRF24L01p_tx_pipe+11+1,r29
 3246 0b80 C093 0000 		sts nRF24L01p_tx_pipe+11,r28
 955:../libs/nrf24l01.c ****   nRF24L01p_process_tx_payload();
 3247               		.loc 1 955 0
 3248 0b84 0E94 0000 		call nRF24L01p_process_tx_payload
 3249               	.LVL291:
 957:../libs/nrf24l01.c ****   return 0;
 3250               		.loc 1 957 0
 3251 0b88 80E0      		ldi r24,0
 3252 0b8a 90E0      		ldi r25,0
 3253 0b8c 00C0      		rjmp .L189
 3254               	.LVL292:
 3255               	.L190:
 931:../libs/nrf24l01.c ****     return -1;
 3256               		.loc 1 931 0
 3257 0b8e 8FEF      		ldi r24,lo8(-1)
 3258 0b90 9FEF      		ldi r25,lo8(-1)
 3259 0b92 00C0      		rjmp .L189
 3260               	.L191:
 934:../libs/nrf24l01.c ****     return -2;
 3261               		.loc 1 934 0
 3262 0b94 8EEF      		ldi r24,lo8(-2)
 3263 0b96 9FEF      		ldi r25,lo8(-1)
 3264               	.LVL293:
 3265               	.L189:
 3266               	/* epilogue start */
 958:../libs/nrf24l01.c **** }
 3267               		.loc 1 958 0
 3268 0b98 DF91      		pop r29
 3269 0b9a CF91      		pop r28
 3270               	.LVL294:
 3271 0b9c 1F91      		pop r17
 3272 0b9e 0F91      		pop r16
 3273 0ba0 FF90      		pop r15
 3274 0ba2 EF90      		pop r14
 3275               	.LVL295:
 3276 0ba4 DF90      		pop r13
 3277 0ba6 CF90      		pop r12
 3278 0ba8 BF90      		pop r11
 3279 0baa AF90      		pop r10
 3280 0bac 9F90      		pop r9
 3281 0bae 8F90      		pop r8
 3282 0bb0 7F90      		pop r7
 3283 0bb2 6F90      		pop r6
 3284 0bb4 5F90      		pop r5
 3285 0bb6 0895      		ret
 3286               		.cfi_endproc
 3287               	.LFE55:
 3289               		.data
 3292               	nRF24L01p_status:
 3293 0000 0E        		.byte	14
 3294               		.local	nRF24L01p_rx_pipes
 3295               		.comm	nRF24L01p_rx_pipes,84,1
 3296               		.local	nRF24L01p_tx_pipe
 3297               		.comm	nRF24L01p_tx_pipe,13,1
 3298               		.text
 3299               	.Letext0:
 3300               		.file 3 "../libs/nrf24l01.h"
 3301               		.file 4 "/usr/lib/gcc/avr/4.8.2/include/stddef.h"
 3302               		.file 5 "/usr/lib/avr/include/stdint.h"
 3303               		.file 6 "/usr/lib/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrf24l01.c
     /tmp/ccUuIlwg.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccUuIlwg.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccUuIlwg.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccUuIlwg.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccUuIlwg.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccUuIlwg.s:12     .text:0000000000000000 spi_init
     /tmp/ccUuIlwg.s:53     .text:000000000000001a spi_start
     /tmp/ccUuIlwg.s:69     .text:000000000000001e spi_end
     /tmp/ccUuIlwg.s:85     .text:0000000000000022 spi_transfer
     /tmp/ccUuIlwg.s:111    .text:000000000000002e nRF24L01p_status_fetch
     /tmp/ccUuIlwg.s:3292   .data:0000000000000000 nRF24L01p_status
     /tmp/ccUuIlwg.s:135    .text:0000000000000040 nRF24L01p_status_rx_ready
     /tmp/ccUuIlwg.s:155    .text:000000000000004c nRF24L01p_status_tx_sent
     /tmp/ccUuIlwg.s:175    .text:0000000000000058 nRF24L01p_status_max_retries
     /tmp/ccUuIlwg.s:194    .text:0000000000000062 nRF24L01p_status_pipe_ready
     /tmp/ccUuIlwg.s:213    .text:000000000000006c nRF24L01p_status_tx_full
     /tmp/ccUuIlwg.s:231    .text:0000000000000074 nRF24L01p_tx_fifo_write
     /tmp/ccUuIlwg.s:333    .text:00000000000000ce nRF24L01p_tx_fifo_flush
     /tmp/ccUuIlwg.s:356    .text:00000000000000dc nRF24L01p_rx_fifo_read
     /tmp/ccUuIlwg.s:460    .text:0000000000000138 nRF24L01p_rx_fifo_flush
     /tmp/ccUuIlwg.s:483    .text:0000000000000146 nRF24L01p_read_status
                             .bss:0000000000000000 nRF24L01p_rx_pipes
     /tmp/ccUuIlwg.s:516    .text:0000000000000164 nRF24L01p_write_status
     /tmp/ccUuIlwg.s:3295   .bss:0000000000000054 nRF24L01p_tx_pipe
     /tmp/ccUuIlwg.s:541    .text:000000000000017a nRF24L01p_config_pipe
     /tmp/ccUuIlwg.s:604    .text:00000000000001ba nRF24L01p_enable
     /tmp/ccUuIlwg.s:633    .text:00000000000001ca nRF24L01p_disable
     /tmp/ccUuIlwg.s:649    .text:00000000000001ce nRF24L01p_get_register8
     /tmp/ccUuIlwg.s:702    .text:00000000000001fc nRF24L01p_get_payload_width
     /tmp/ccUuIlwg.s:729    .text:000000000000020c nRF24L01p_process_rx_payload
     /tmp/ccUuIlwg.s:899    .text:00000000000002c8 nRF24L01p_tx_fifo_is_reuse
     /tmp/ccUuIlwg.s:921    .text:00000000000002d6 nRF24L01p_tx_fifo_is_full
     /tmp/ccUuIlwg.s:943    .text:00000000000002e4 nRF24L01p_tx_fifo_is_empty
     /tmp/ccUuIlwg.s:964    .text:00000000000002f0 nRF24L01p_rx_fifo_is_full
     /tmp/ccUuIlwg.s:985    .text:00000000000002fc nRF24L01p_rx_fifo_is_empty
     /tmp/ccUuIlwg.s:1005   .text:0000000000000306 nRF24L01p_packets_lost
     /tmp/ccUuIlwg.s:1026   .text:0000000000000312 nRF24L01p_packets_retransmitted
     /tmp/ccUuIlwg.s:1046   .text:000000000000031c nRF24L01p_set_register8
     /tmp/ccUuIlwg.s:1123   .text:0000000000000362 nRF24L01p_set_register8_bits
     /tmp/ccUuIlwg.s:1185   .text:0000000000000398 nRF24L01p_config_rx_dr_interrupt
     /tmp/ccUuIlwg.s:1212   .text:00000000000003ac nRF24L01p_config_tx_ds_interrupt
     /tmp/ccUuIlwg.s:1239   .text:00000000000003c0 nRF24L01p_config_max_rt_interrupt
     /tmp/ccUuIlwg.s:1266   .text:00000000000003d4 nRF24L01p_config_crc
     /tmp/ccUuIlwg.s:1303   .text:00000000000003f0 nRF24L01p_config_crc_count
     /tmp/ccUuIlwg.s:1340   .text:000000000000040c nRF24L01p_config_power
     /tmp/ccUuIlwg.s:1400   .text:000000000000043c nRF24L01p_config_transceiver_mode
     /tmp/ccUuIlwg.s:1436   .text:0000000000000456 nRF24L01p_config_auto_ack
     /tmp/ccUuIlwg.s:1492   .text:000000000000048a nRF24L01p_config_rx
     /tmp/ccUuIlwg.s:1548   .text:00000000000004be nRF24L01p_config_address_width
     /tmp/ccUuIlwg.s:1586   .text:00000000000004dc nRF24L01p_config_retransmit_delay
     /tmp/ccUuIlwg.s:1622   .text:00000000000004f6 nRF24L01p_config_retransmit_count
     /tmp/ccUuIlwg.s:1658   .text:0000000000000510 nRF24L01p_config_channel
     /tmp/ccUuIlwg.s:1694   .text:000000000000052a nRF24L01p_config_air_data_rate
     /tmp/ccUuIlwg.s:1731   .text:0000000000000546 nRF24L01p_config_output_power
     /tmp/ccUuIlwg.s:1768   .text:0000000000000562 nRF24L01p_config_payload_width
     /tmp/ccUuIlwg.s:1805   .text:000000000000057e nRF24L01p_status_rx_ready_clear
     /tmp/ccUuIlwg.s:1824   .text:0000000000000588 nRF24L01p_status_tx_sent_clear
     /tmp/ccUuIlwg.s:1843   .text:0000000000000592 nRF24L01p_process_tx_payload
     /tmp/ccUuIlwg.s:1981   .text:000000000000064a nRF24L01p_status_max_retries_clear
     /tmp/ccUuIlwg.s:2000   .text:0000000000000654 __vector_1
     /tmp/ccUuIlwg.s:2163   .text:00000000000006ea nRF24L01p_init
     /tmp/ccUuIlwg.s:2260   .text:000000000000075c nRF24L01p_get_register40
     /tmp/ccUuIlwg.s:2430   .text:000000000000080a nRF24L01p_get_address
     /tmp/ccUuIlwg.s:2464   .text:0000000000000828 nRF24L01p_set_register40
     /tmp/ccUuIlwg.s:2602   .text:00000000000008b4 nRF24L01p_config_address
     /tmp/ccUuIlwg.s:2649   .text:00000000000008d4 nRF24L01p_read
     /tmp/ccUuIlwg.s:3093   .text:0000000000000ac6 nRF24L01p_write

UNDEFINED SYMBOLS
malloc
memcpy
free
__ashldi3
__lshrdi3
__do_copy_data
__do_clear_bss
